
Casa_FInal.elf:     file format elf32-littlenios2
Casa_FInal.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00007fa8 memsz 0x00007fa8 flags r-x
    LOAD off    0x00008fc8 vaddr 0x04007fc8 paddr 0x04009bfc align 2**12
         filesz 0x00001c34 memsz 0x00001c34 flags rw-
    LOAD off    0x0000b830 vaddr 0x0400b830 paddr 0x0400b830 align 2**12
         filesz 0x00000000 memsz 0x00000ae8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007b30  040001b4  040001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002e4  04007ce4  04007ce4  00008ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c34  04007fc8  04009bfc  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000ae8  0400b830  0400b830  0000b830  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000abfc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a58  00000000  00000000  0000ac28  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000108c  00000000  00000000  0000b680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001cc4e  00000000  00000000  0000c70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005b7b  00000000  00000000  0002935a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f1d3  00000000  00000000  0002eed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000148c  00000000  00000000  0003e0a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000018c1  00000000  00000000  0003f534  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004511  00000000  00000000  00040df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00045308  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00045368  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004826e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00048271  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00048274  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00048275  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00048276  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004827a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004827e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00048282  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00048286  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0004828a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000002  00000000  00000000  0004828e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00048290  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0008c4f4  00000000  00000000  000482b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b4 l    d  .text	00000000 .text
04007ce4 l    d  .rodata	00000000 .rodata
04007fc8 l    d  .rwdata	00000000 .rwdata
0400b830 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 InterruptHandlerForUart.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04000b94 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
04007fc8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04002618 l     F .text	00000058 std
04002724 l     F .text	00000008 __fp_lock
0400272c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
040036ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400374c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400384c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04003b2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04003c0c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04003d68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04003f94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04009be8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04004260 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04008978 l     O .rwdata	00001060 jtag
040099d8 l     O .rwdata	00000120 lcd_display
04009af8 l     O .rwdata	000000c4 uart
04004388 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040045c8 l     F .text	00000228 altera_avalon_jtag_uart_irq
040047f0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
04009bec l     O .rwdata	00000004 colstart
04004e6c l     F .text	000000b8 lcd_write_command
04004f24 l     F .text	000000d4 lcd_write_data
04004ff8 l     F .text	000000c4 lcd_clear_screen
040050bc l     F .text	000001ec lcd_repaint_screen
040052a8 l     F .text	000000c8 lcd_scroll_up
04005370 l     F .text	000002d0 lcd_handle_escape
04005b4c l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04005dac l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0400606c l     F .text	0000009c altera_avalon_uart_irq
04006108 l     F .text	000000e0 altera_avalon_uart_rxirq
040061e8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
040065d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
040067fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04006bf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04007018 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04007154 l     F .text	000000dc alt_file_locked
040073b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
04007e45 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04007acc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04007c80 l     F .text	00000040 alt_sim_halt
04003490 g     F .text	00000070 _isatty_r
04003dc8 g     F .text	0000006c alt_main
04000ce0 g     F .text	000000a0 _puts_r
0400c088 g     O .bss	00000100 alt_irq
04003500 g     F .text	00000078 _lseek_r
04009bfc g       *ABS*	00000000 __flash_rwdata_start
0400c318 g       *ABS*	00000000 __alt_heap_start
040030cc g     F .text	00000068 __sseek
04002680 g     F .text	000000a4 __sinit
04002780 g     F .text	00000068 __sfmoreglue
0400b836 g     O .bss	00000002 RxTail_1
04003e54 g     F .text	00000020 __malloc_unlock
04001b68 g     F .text	000000e0 memmove
04002770 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400341c g     F .text	00000074 _fstat_r
0400b844 g     O .bss	00000004 errno
0400b850 g     O .bss	00000004 alt_argv
04011bbc g       *ABS*	00000000 _gp
04004110 g     F .text	00000030 usleep
040087f8 g     O .rwdata	00000180 alt_fd_list
040075dc g     F .text	00000094 alt_find_dev
04001ac8 g     F .text	000000a0 memcpy
04002764 g     F .text	0000000c _cleanup_r
040070dc g     F .text	00000078 alt_io_redirect
04007ce4 g       *ABS*	00000000 __DTOR_END__
04000d80 g     F .text	00000014 puts
04004a08 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04000cd0 g     F .text	00000008 __udivsi3
04003a6c g     F .text	000000c0 isatty
04007848 g     F .text	00000090 alt_icache_flush
0400b838 g     O .bss	00000004 __malloc_top_pad
04000e08 g     F .text	0000049c __sfvwrite_r
0400223c g     F .text	00000070 _sbrk_r
04003578 g     F .text	00000078 _read_r
04009bdc g     O .rwdata	00000004 alt_max_fd
040032f8 g     F .text	00000110 _fclose_r
040025e4 g     F .text	00000034 fflush
0400b83c g     O .bss	00000004 __malloc_max_sbrked_mem
040038ac g     F .text	000001c0 alt_irq_register
04000260 g     F .text	00000130 IsrUart1
04003c78 g     F .text	000000f0 lseek
04009bc0 g     O .rwdata	00000004 _global_impure_ptr
04001c48 g     F .text	000005f4 _realloc_r
0400c318 g       *ABS*	00000000 __bss_end
04006f20 g     F .text	000000f8 alt_iic_isr_register
040074b0 g     F .text	0000010c alt_tick
04005fa4 g     F .text	000000c8 altera_avalon_uart_init
04009bf8 g     O .rwdata	00000004 __ctype_ptr
0400274c g     F .text	00000018 __fp_lock_all
04006ed8 g     F .text	00000048 alt_ic_irq_enabled
04007418 g     F .text	00000098 alt_alarm_stop
0400b848 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000c8 alt_irq_handler
040087d0 g     O .rwdata	00000028 alt_dev_null
04006afc g     F .text	00000044 alt_dcache_flush_all
040003d4 g     F .text	0000005c GetUart1
04009bfc g       *ABS*	00000000 __ram_rwdata_end
04009bd4 g     O .rwdata	00000008 alt_dev_list
04004140 g     F .text	00000120 write
04007fc8 g       *ABS*	00000000 __ram_rodata_end
04003778 g     F .text	000000d4 fstat
04000cd8 g     F .text	00000008 __umodsi3
0400c318 g       *ABS*	00000000 end
04005640 g     F .text	0000050c altera_avalon_lcd_16207_write
04006634 g     F .text	000001c8 altera_avalon_uart_write
04004508 g     F .text	000000c0 altera_avalon_jtag_uart_init
04007ce0 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04005e1c g     F .text	00000090 alt_avalon_timer_sc_init
04005f04 g     F .text	00000058 altera_avalon_uart_write_fd
04005f5c g     F .text	00000048 altera_avalon_uart_close_fd
04004c2c g     F .text	00000240 altera_avalon_jtag_uart_write
04002670 g     F .text	00000004 __sfp_lock_acquire
040019e4 g     F .text	000000e4 memchr
04002a04 g     F .text	00000314 _free_r
04007ad0 g     F .text	000001b0 __call_exitprocs
04009bc8 g     O .rwdata	00000004 __malloc_sbrk_base
040001b4 g     F .text	0000004c _start
0400b858 g     O .bss	00000004 _alt_tick_rate
0400b85c g     O .bss	00000004 _alt_nticks
04003e74 g     F .text	00000120 read
040042f4 g     F .text	00000094 alt_sys_init
04007998 g     F .text	00000134 __register_exitproc
0400b832 g     O .bss	00000002 TxTail_1
040048a0 g     F .text	00000074 altera_avalon_jtag_uart_close
04007fc8 g       *ABS*	00000000 __ram_rwdata_start
04007ce4 g       *ABS*	00000000 __ram_rodata_start
0400b860 g     O .bss	00000028 __malloc_current_mallinfo
040043c0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04007790 g     F .text	000000b8 alt_get_fd
040069b0 g     F .text	0000014c alt_busy_sleep
04003288 g     F .text	00000070 _close_r
04007924 g     F .text	00000074 memcmp
04004470 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0400c318 g       *ABS*	00000000 __alt_stack_base
040044b8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
040022ac g     F .text	0000013c __swsetup_r
040027e8 g     F .text	000000f0 __sfp
040083c8 g     O .rwdata	00000408 __malloc_av_
0400267c g     F .text	00000004 __sinit_lock_release
040031b0 g     F .text	00000060 __sread
04007670 g     F .text	00000120 alt_find_file
04006b40 g     F .text	000000b4 alt_dev_llist_insert
04003e34 g     F .text	00000020 __malloc_lock
04004054 g     F .text	000000bc sbrk
040023e8 g     F .text	000001fc _fflush_r
0400b830 g       *ABS*	00000000 __bss_start
0400302c g     F .text	00000098 memset
04000598 g     F .text	000005fc main
0400b854 g     O .bss	00000004 alt_envp
0400b840 g     O .bss	00000004 __malloc_max_total_mem
04004418 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0400b888 g     O .bss	00000400 rx_buffer_1
0400b830 g     O .bss	00000002 TxHead_1
04005c18 g     F .text	0000013c altera_avalon_lcd_16207_init
040030c4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04003408 g     F .text	00000014 fclose
0400c188 g     O .bss	00000190 _atexit0
040012a4 g     F .text	00000740 _malloc_r
04009be0 g     O .rwdata	00000004 alt_errno
04002de0 g     F .text	000000b8 _fwalk
04000c10 g     F .text	00000060 __divsi3
040028d8 g     F .text	0000012c _malloc_trim_r
04007ce4 g       *ABS*	00000000 __CTOR_END__
0400b834 g     O .bss	00000002 RxHead_1
04007ce4 g       *ABS*	00000000 __flash_rodata_start
04007ce4 g       *ABS*	00000000 __DTOR_LIST__
040042c0 g     F .text	00000034 alt_irq_init
04003ff4 g     F .text	00000060 alt_release_fd
0400bc88 g     O .bss	00000400 tx_buffer_1
040078d8 g     F .text	00000014 atexit
04003210 g     F .text	00000078 _write_r
04009bbc g     O .rwdata	00000004 _impure_ptr
0400b84c g     O .bss	00000004 alt_argc
04006cb8 g     F .text	00000064 _do_dtors
04000558 g     F .text	00000040 InitUart
04000020 g       .exceptions	00000000 alt_irq_entry
04002734 g     F .text	00000018 __fp_unlock_all
04005d54 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
04009bcc g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04006d4c g     F .text	00000050 alt_ic_isr_register
04009bfc g       *ABS*	00000000 _edata
04005eac g     F .text	00000058 altera_avalon_uart_read_fd
0400c318 g       *ABS*	00000000 _end
040001b4 g       *ABS*	00000000 __ram_exceptions_end
04000200 g     F .text	00000060 InitUart1
04004914 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04006e38 g     F .text	000000a0 alt_ic_irq_disable
04003134 g     F .text	0000007c __swrite
04009bc4 g     O .rwdata	00000004 __malloc_trim_threshold
040075bc g     F .text	00000020 altera_nios2_qsys_irq_init
040078ec g     F .text	00000038 exit
04002d18 g     F .text	000000c8 _fwalk_reent
04000c70 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04002674 g     F .text	00000004 __sfp_lock_release
04007d44 g     O .rodata	00000101 _ctype_
04000430 g     F .text	00000128 PutUart1
04006344 g     F .text	00000060 altera_avalon_uart_close
04007cc0 g     F .text	00000020 _exit
0400685c g     F .text	00000154 alt_alarm_start
04002e98 g     F .text	00000194 __smakebuf_r
04000d94 g     F .text	00000074 strlen
04000390 g     F .text	00000044 EmptyUart1
04007230 g     F .text	00000188 open
04006d1c g     F .text	00000030 alt_icache_flush_all
04000000 g       *ABS*	00000000 __alt_mem_ext_ram
04009be4 g     O .rwdata	00000004 alt_priority_mask
04006d9c g     F .text	0000009c alt_ic_irq_enable
040063a4 g     F .text	00000230 altera_avalon_uart_read
04009bf0 g     O .rwdata	00000008 alt_alarm_list
04006c54 g     F .text	00000064 _do_ctors
040035f0 g     F .text	000000fc close
04003b8c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
04002678 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406d14 	ori	at,at,436
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 40000fc:	0005313a 	rdctl	r2,ipending
 4000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 4000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 400010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000110:	00800044 	movi	r2,1
 4000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000118:	e0ffff17 	ldw	r3,-4(fp)
 400011c:	e0bffe17 	ldw	r2,-8(fp)
 4000120:	1884703a 	and	r2,r3,r2
 4000124:	1005003a 	cmpeq	r2,r2,zero
 4000128:	1000161e 	bne	r2,zero,4000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	e0bffd17 	ldw	r2,-12(fp)
 4000130:	00c10074 	movhi	r3,1025
 4000134:	18f02204 	addi	r3,r3,-16248
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	10c5883a 	add	r2,r2,r3
 4000140:	11400017 	ldw	r5,0(r2)
 4000144:	e0bffd17 	ldw	r2,-12(fp)
 4000148:	00c10074 	movhi	r3,1025
 400014c:	18f02204 	addi	r3,r3,-16248
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	10c5883a 	add	r2,r2,r3
 4000158:	10800104 	addi	r2,r2,4
 400015c:	11000017 	ldw	r4,0(r2)
 4000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000164:	0005313a 	rdctl	r2,ipending
 4000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 400016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000174:	e0bfff17 	ldw	r2,-4(fp)
 4000178:	1004c03a 	cmpne	r2,r2,zero
 400017c:	103fe31e 	bne	r2,zero,400010c <alt_irq_handler+0x20>
 4000180:	00000706 	br	40001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000184:	e0bffe17 	ldw	r2,-8(fp)
 4000188:	1085883a 	add	r2,r2,r2
 400018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000190:	e0bffd17 	ldw	r2,-12(fp)
 4000194:	10800044 	addi	r2,r2,1
 4000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 400019c:	003fde06 	br	4000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a0:	e037883a 	mov	sp,fp
 40001a4:	dfc00117 	ldw	ra,4(sp)
 40001a8:	df000017 	ldw	fp,0(sp)
 40001ac:	dec00204 	addi	sp,sp,8
 40001b0:	f800283a 	ret

Disassembly of section .text:

040001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 40001c0:	00bffd16 	blt	zero,r2,40001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001cc:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40001d0:	d686ef14 	ori	gp,gp,7100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d4:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001d8:	10ae0c14 	ori	r2,r2,47152

    movhi r3, %hi(__bss_end)
 40001dc:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001e0:	18f0c614 	ori	r3,r3,49944

    beq r2, r3, 1f
 40001e4:	10c00326 	beq	r2,r3,40001f4 <_start+0x40>

0:
    stw zero, (r2)
 40001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f0:	10fffd36 	bltu	r2,r3,40001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001f4:	4003b8c0 	call	4003b8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001f8:	4003dc80 	call	4003dc8 <alt_main>

040001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001fc:	003fff06 	br	40001fc <alt_after_alt_main>

04000200 <InitUart1>:

unsigned short RxHead_1 = 0;
unsigned short RxTail_1 = 0;
unsigned char rx_buffer_1[RX_BUFFER_SIZE_1];

void InitUart1(unsigned int BaudRate) {
 4000200:	defffc04 	addi	sp,sp,-16
 4000204:	dfc00315 	stw	ra,12(sp)
 4000208:	df000215 	stw	fp,8(sp)
 400020c:	df000204 	addi	fp,sp,8
 4000210:	e13fff15 	stw	r4,-4(fp)
	unsigned int divisor;

	divisor = (ALT_CPU_FREQ / BaudRate) + 1;
 4000214:	0100bef4 	movhi	r4,763
 4000218:	213c2004 	addi	r4,r4,-3968
 400021c:	e17fff17 	ldw	r5,-4(fp)
 4000220:	4000cd00 	call	4000cd0 <__udivsi3>
 4000224:	10800044 	addi	r2,r2,1
 4000228:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, divisor);
 400022c:	e0fffe17 	ldw	r3,-8(fp)
 4000230:	00820034 	movhi	r2,2048
 4000234:	10840c04 	addi	r2,r2,4144
 4000238:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,
 400023c:	00c20034 	movhi	r3,2048
 4000240:	18c40b04 	addi	r3,r3,4140
 4000244:	00802004 	movi	r2,128
 4000248:	18800035 	stwio	r2,0(r3)
			ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
}
 400024c:	e037883a 	mov	sp,fp
 4000250:	dfc00117 	ldw	ra,4(sp)
 4000254:	df000017 	ldw	fp,0(sp)
 4000258:	dec00204 	addi	sp,sp,8
 400025c:	f800283a 	ret

04000260 <IsrUart1>:

void IsrUart1(void* context, unsigned int id) {
 4000260:	defffc04 	addi	sp,sp,-16
 4000264:	df000315 	stw	fp,12(sp)
 4000268:	df000304 	addi	fp,sp,12
 400026c:	e13ffe15 	stw	r4,-8(fp)
 4000270:	e17fff15 	stw	r5,-4(fp)
	int sr;

	sr = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
 4000274:	00820034 	movhi	r2,2048
 4000278:	10840a04 	addi	r2,r2,4136
 400027c:	10800037 	ldwio	r2,0(r2)
 4000280:	e0bffd15 	stw	r2,-12(fp)
	if (sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 4000284:	e0bffd17 	ldw	r2,-12(fp)
 4000288:	1080200c 	andi	r2,r2,128
 400028c:	1005003a 	cmpeq	r2,r2,zero
 4000290:	1000151e 	bne	r2,zero,40002e8 <IsrUart1+0x88>

	{
		rx_buffer_1[RxHead_1] = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
 4000294:	d0a71e0b 	ldhu	r2,-25480(gp)
 4000298:	113fffcc 	andi	r4,r2,65535
 400029c:	00820034 	movhi	r2,2048
 40002a0:	10840804 	addi	r2,r2,4128
 40002a4:	10800037 	ldwio	r2,0(r2)
 40002a8:	1007883a 	mov	r3,r2
 40002ac:	00810074 	movhi	r2,1025
 40002b0:	10ae2204 	addi	r2,r2,-18296
 40002b4:	1105883a 	add	r2,r2,r4
 40002b8:	10c00005 	stb	r3,0(r2)
		IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE, 0);
 40002bc:	00820034 	movhi	r2,2048
 40002c0:	10840a04 	addi	r2,r2,4136
 40002c4:	10000035 	stwio	zero,0(r2)
		if (++RxHead_1 > (RX_BUFFER_SIZE_1 - 1))
 40002c8:	d0a71e0b 	ldhu	r2,-25480(gp)
 40002cc:	10800044 	addi	r2,r2,1
 40002d0:	d0a71e0d 	sth	r2,-25480(gp)
 40002d4:	d0a71e0b 	ldhu	r2,-25480(gp)
 40002d8:	10bfffcc 	andi	r2,r2,65535
 40002dc:	10810030 	cmpltui	r2,r2,1024
 40002e0:	1000011e 	bne	r2,zero,40002e8 <IsrUart1+0x88>
			RxHead_1 = 0;
 40002e4:	d0271e0d 	sth	zero,-25480(gp)



	}
	if (sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
 40002e8:	e0bffd17 	ldw	r2,-12(fp)
 40002ec:	1080100c 	andi	r2,r2,64
 40002f0:	1005003a 	cmpeq	r2,r2,zero
 40002f4:	1000221e 	bne	r2,zero,4000380 <IsrUart1+0x120>
		if (IORD_ALTERA_AVALON_UART_CONTROL(UART_BASE)
 40002f8:	00820034 	movhi	r2,2048
 40002fc:	10840b04 	addi	r2,r2,4140
 4000300:	10800037 	ldwio	r2,0(r2)
 4000304:	1080100c 	andi	r2,r2,64
 4000308:	1005003a 	cmpeq	r2,r2,zero
 400030c:	10001c1e 	bne	r2,zero,4000380 <IsrUart1+0x120>
				& ALTERA_AVALON_UART_CONTROL_TRDY_MSK)

		{
			if (TxTail_1 != TxHead_1) {
 4000310:	d0a71d8b 	ldhu	r2,-25482(gp)
 4000314:	d0e71d0b 	ldhu	r3,-25484(gp)
 4000318:	113fffcc 	andi	r4,r2,65535
 400031c:	18bfffcc 	andi	r2,r3,65535
 4000320:	20801326 	beq	r4,r2,4000370 <IsrUart1+0x110>
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE,
 4000324:	d0a71d8b 	ldhu	r2,-25482(gp)
 4000328:	10ffffcc 	andi	r3,r2,65535
 400032c:	00810074 	movhi	r2,1025
 4000330:	10af2204 	addi	r2,r2,-17272
 4000334:	10c5883a 	add	r2,r2,r3
 4000338:	10800003 	ldbu	r2,0(r2)
 400033c:	10c03fcc 	andi	r3,r2,255
 4000340:	00820034 	movhi	r2,2048
 4000344:	10840904 	addi	r2,r2,4132
 4000348:	10c00035 	stwio	r3,0(r2)
						tx_buffer_1[TxTail_1]);
				if (++TxTail_1 > (TX_BUFFER_SIZE_1 - 1))
 400034c:	d0a71d8b 	ldhu	r2,-25482(gp)
 4000350:	10800044 	addi	r2,r2,1
 4000354:	d0a71d8d 	sth	r2,-25482(gp)
 4000358:	d0a71d8b 	ldhu	r2,-25482(gp)
 400035c:	10bfffcc 	andi	r2,r2,65535
 4000360:	10810030 	cmpltui	r2,r2,1024
 4000364:	1000061e 	bne	r2,zero,4000380 <IsrUart1+0x120>
					TxTail_1 = 0;
 4000368:	d0271d8d 	sth	zero,-25482(gp)
 400036c:	00000406 	br	4000380 <IsrUart1+0x120>
			} else
				IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,
 4000370:	00c20034 	movhi	r3,2048
 4000374:	18c40b04 	addi	r3,r3,4140
 4000378:	00802004 	movi	r2,128
 400037c:	18800035 	stwio	r2,0(r3)
						ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
		}
	}
}
 4000380:	e037883a 	mov	sp,fp
 4000384:	df000017 	ldw	fp,0(sp)
 4000388:	dec00104 	addi	sp,sp,4
 400038c:	f800283a 	ret

04000390 <EmptyUart1>:

unsigned char EmptyUart1() {
 4000390:	defffe04 	addi	sp,sp,-8
 4000394:	df000115 	stw	fp,4(sp)
 4000398:	df000104 	addi	fp,sp,4
	if (RxHead_1 == RxTail_1)
 400039c:	d0a71e0b 	ldhu	r2,-25480(gp)
 40003a0:	d0e71e8b 	ldhu	r3,-25478(gp)
 40003a4:	113fffcc 	andi	r4,r2,65535
 40003a8:	18bfffcc 	andi	r2,r3,65535
 40003ac:	2080031e 	bne	r4,r2,40003bc <EmptyUart1+0x2c>
		return 1;
 40003b0:	00800044 	movi	r2,1
 40003b4:	e0bfff15 	stw	r2,-4(fp)
 40003b8:	00000106 	br	40003c0 <EmptyUart1+0x30>
	return 0;
 40003bc:	e03fff15 	stw	zero,-4(fp)
 40003c0:	e0bfff17 	ldw	r2,-4(fp)
}
 40003c4:	e037883a 	mov	sp,fp
 40003c8:	df000017 	ldw	fp,0(sp)
 40003cc:	dec00104 	addi	sp,sp,4
 40003d0:	f800283a 	ret

040003d4 <GetUart1>:

unsigned char GetUart1(void) {
 40003d4:	defffe04 	addi	sp,sp,-8
 40003d8:	df000115 	stw	fp,4(sp)
 40003dc:	df000104 	addi	fp,sp,4
	unsigned char rxChar;

	/* buffer is empty */

	rxChar = rx_buffer_1[RxTail_1];
 40003e0:	d0a71e8b 	ldhu	r2,-25478(gp)
 40003e4:	10ffffcc 	andi	r3,r2,65535
 40003e8:	00810074 	movhi	r2,1025
 40003ec:	10ae2204 	addi	r2,r2,-18296
 40003f0:	10c5883a 	add	r2,r2,r3
 40003f4:	10800003 	ldbu	r2,0(r2)
 40003f8:	e0bfff05 	stb	r2,-4(fp)
	if (++RxTail_1 > (RX_BUFFER_SIZE_1 - 1))
 40003fc:	d0a71e8b 	ldhu	r2,-25478(gp)
 4000400:	10800044 	addi	r2,r2,1
 4000404:	d0a71e8d 	sth	r2,-25478(gp)
 4000408:	d0a71e8b 	ldhu	r2,-25478(gp)
 400040c:	10bfffcc 	andi	r2,r2,65535
 4000410:	10810030 	cmpltui	r2,r2,1024
 4000414:	1000011e 	bne	r2,zero,400041c <GetUart1+0x48>
		RxTail_1 = 0;
 4000418:	d0271e8d 	sth	zero,-25478(gp)

	return rxChar;
 400041c:	e0bfff03 	ldbu	r2,-4(fp)
}
 4000420:	e037883a 	mov	sp,fp
 4000424:	df000017 	ldw	fp,0(sp)
 4000428:	dec00104 	addi	sp,sp,4
 400042c:	f800283a 	ret

04000430 <PutUart1>:

unsigned char PutUart1(unsigned char in_char) {
 4000430:	defffb04 	addi	sp,sp,-20
 4000434:	df000415 	stw	fp,16(sp)
 4000438:	df000404 	addi	fp,sp,16
 400043c:	e13ffe05 	stb	r4,-8(fp)
	unsigned short size;
	unsigned int z;

	z = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)
 4000440:	00820034 	movhi	r2,2048
 4000444:	10840a04 	addi	r2,r2,4136
 4000448:	10800037 	ldwio	r2,0(r2)
 400044c:	1080100c 	andi	r2,r2,64
 4000450:	e0bffc15 	stw	r2,-16(fp)
			& ALTERA_AVALON_UART_STATUS_TRDY_MSK;

	if ((TxHead_1 == TxTail_1) && z) {
 4000454:	d0a71d0b 	ldhu	r2,-25484(gp)
 4000458:	d0e71d8b 	ldhu	r3,-25482(gp)
 400045c:	113fffcc 	andi	r4,r2,65535
 4000460:	18bfffcc 	andi	r2,r3,65535
 4000464:	2080081e 	bne	r4,r2,4000488 <PutUart1+0x58>
 4000468:	e0bffc17 	ldw	r2,-16(fp)
 400046c:	1005003a 	cmpeq	r2,r2,zero
 4000470:	1000051e 	bne	r2,zero,4000488 <PutUart1+0x58>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, in_char);
 4000474:	e0fffe03 	ldbu	r3,-8(fp)
 4000478:	00820034 	movhi	r2,2048
 400047c:	10840904 	addi	r2,r2,4132
 4000480:	10c00035 	stwio	r3,0(r2)
	unsigned int z;

	z = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)
			& ALTERA_AVALON_UART_STATUS_TRDY_MSK;

	if ((TxHead_1 == TxTail_1) && z) {
 4000484:	00002d06 	br	400053c <PutUart1+0x10c>




	} else {
		if (TxHead_1 >= TxTail_1)
 4000488:	d0a71d0b 	ldhu	r2,-25484(gp)
 400048c:	d0e71d8b 	ldhu	r3,-25482(gp)
 4000490:	113fffcc 	andi	r4,r2,65535
 4000494:	18bfffcc 	andi	r2,r3,65535
 4000498:	20800536 	bltu	r4,r2,40004b0 <PutUart1+0x80>
			size = TxHead_1 - TxTail_1;
 400049c:	d0a71d0b 	ldhu	r2,-25484(gp)
 40004a0:	d0e71d8b 	ldhu	r3,-25482(gp)
 40004a4:	10c5c83a 	sub	r2,r2,r3
 40004a8:	e0bffd0d 	sth	r2,-12(fp)
 40004ac:	00000506 	br	40004c4 <PutUart1+0x94>
		else
			size = ((TX_BUFFER_SIZE_1 - 1) - TxTail_1) + TxHead_1;
 40004b0:	d0e71d0b 	ldhu	r3,-25484(gp)
 40004b4:	d0a71d8b 	ldhu	r2,-25482(gp)
 40004b8:	1885c83a 	sub	r2,r3,r2
 40004bc:	1080ffc4 	addi	r2,r2,1023
 40004c0:	e0bffd0d 	sth	r2,-12(fp)
		if (size > (TX_BUFFER_SIZE_1 - 3))
 40004c4:	e0bffd0b 	ldhu	r2,-12(fp)
 40004c8:	1080ffb0 	cmpltui	r2,r2,1022
 40004cc:	1000031e 	bne	r2,zero,40004dc <PutUart1+0xac>
			return (-1);
 40004d0:	00803fc4 	movi	r2,255
 40004d4:	e0bfff15 	stw	r2,-4(fp)
 40004d8:	00001a06 	br	4000544 <PutUart1+0x114>
		tx_buffer_1[TxHead_1] = in_char;
 40004dc:	d0a71d0b 	ldhu	r2,-25484(gp)
 40004e0:	10ffffcc 	andi	r3,r2,65535
 40004e4:	00810074 	movhi	r2,1025
 40004e8:	10af2204 	addi	r2,r2,-17272
 40004ec:	10c7883a 	add	r3,r2,r3
 40004f0:	e0bffe03 	ldbu	r2,-8(fp)
 40004f4:	18800005 	stb	r2,0(r3)
		if (++TxHead_1 > (TX_BUFFER_SIZE_1 - 1))
 40004f8:	d0a71d0b 	ldhu	r2,-25484(gp)
 40004fc:	10800044 	addi	r2,r2,1
 4000500:	d0a71d0d 	sth	r2,-25484(gp)
 4000504:	d0a71d0b 	ldhu	r2,-25484(gp)
 4000508:	10bfffcc 	andi	r2,r2,65535
 400050c:	10810030 	cmpltui	r2,r2,1024
 4000510:	1000011e 	bne	r2,zero,4000518 <PutUart1+0xe8>
			TxHead_1 = 0;
 4000514:	d0271d0d 	sth	zero,-25484(gp)
		z = IORD_ALTERA_AVALON_UART_CONTROL(UART_BASE)
 4000518:	00820034 	movhi	r2,2048
 400051c:	10840b04 	addi	r2,r2,4140
 4000520:	10800037 	ldwio	r2,0(r2)
 4000524:	10801014 	ori	r2,r2,64
 4000528:	e0bffc15 	stw	r2,-16(fp)
				| ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
		IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, z);
 400052c:	e0fffc17 	ldw	r3,-16(fp)
 4000530:	00820034 	movhi	r2,2048
 4000534:	10840b04 	addi	r2,r2,4140
 4000538:	10c00035 	stwio	r3,0(r2)

	}
	return (1);
 400053c:	00800044 	movi	r2,1
 4000540:	e0bfff15 	stw	r2,-4(fp)
 4000544:	e0bfff17 	ldw	r2,-4(fp)
}
 4000548:	e037883a 	mov	sp,fp
 400054c:	df000017 	ldw	fp,0(sp)
 4000550:	dec00104 	addi	sp,sp,4
 4000554:	f800283a 	ret

04000558 <InitUart>:
#include "altera_avalon_uart_regs.h"
#include "basic_io.h"

#define BAUD_RATE 9600

void InitUart() {
 4000558:	defffd04 	addi	sp,sp,-12
 400055c:	dfc00215 	stw	ra,8(sp)
 4000560:	df000115 	stw	fp,4(sp)
 4000564:	df000104 	addi	fp,sp,4
	int context_uart1;
	InitUart1(BAUD_RATE);
 4000568:	01096004 	movi	r4,9600
 400056c:	40002000 	call	4000200 <InitUart1>
	alt_irq_register(UART_IRQ, &context_uart1, IsrUart1);
 4000570:	01000044 	movi	r4,1
 4000574:	e17fff04 	addi	r5,fp,-4
 4000578:	01810034 	movhi	r6,1024
 400057c:	31809804 	addi	r6,r6,608
 4000580:	40038ac0 	call	40038ac <alt_irq_register>
}
 4000584:	e037883a 	mov	sp,fp
 4000588:	dfc00117 	ldw	ra,4(sp)
 400058c:	df000017 	ldw	fp,0(sp)
 4000590:	dec00204 	addi	sp,sp,8
 4000594:	f800283a 	ret

04000598 <main>:

int main() {
 4000598:	defff104 	addi	sp,sp,-60
 400059c:	dfc00e15 	stw	ra,56(sp)
 40005a0:	df000d15 	stw	fp,52(sp)
 40005a4:	df000d04 	addi	fp,sp,52
	int i = 0;
 40005a8:	e03fff15 	stw	zero,-4(fp)

	int presenca_sala = 0;
 40005ac:	e03ffe15 	stw	zero,-8(fp)
	int porta_sala = 0;
 40005b0:	e03ffd15 	stw	zero,-12(fp)
	int janela_sala = 0;
 40005b4:	e03ffc15 	stw	zero,-16(fp)

	int presenca_cozinha = 0;
 40005b8:	e03ffb15 	stw	zero,-20(fp)
	int porta_cozinha = 0;
 40005bc:	e03ffa15 	stw	zero,-24(fp)
	int janela_cozinha = 0;
 40005c0:	e03ff915 	stw	zero,-28(fp)

	int presenca_quarto = 0;
 40005c4:	e03ff815 	stw	zero,-32(fp)
	int porta_quarto = 0;
 40005c8:	e03ff715 	stw	zero,-36(fp)
	int janela_quarto = 0;
 40005cc:	e03ff615 	stw	zero,-40(fp)

	int presenca_casal = 0;
 40005d0:	e03ff515 	stw	zero,-44(fp)
	int porta_casal = 0;
 40005d4:	e03ff415 	stw	zero,-48(fp)
	int janela_casal = 0;
 40005d8:	e03ff315 	stw	zero,-52(fp)

	InitUart();
 40005dc:	40005580 	call	4000558 <InitUart>
 40005e0:	00000006 	br	40005e4 <main+0x4c>
	while (1) {
		//SALA
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON1_BASE) == 1 && presenca_sala == 0) {
 40005e4:	00820034 	movhi	r2,2048
 40005e8:	10844004 	addi	r2,r2,4352
 40005ec:	10800037 	ldwio	r2,0(r2)
 40005f0:	10800058 	cmpnei	r2,r2,1
 40005f4:	10000e1e 	bne	r2,zero,4000630 <main+0x98>
 40005f8:	e0bffe17 	ldw	r2,-8(fp)
 40005fc:	1004c03a 	cmpne	r2,r2,zero
 4000600:	10000b1e 	bne	r2,zero,4000630 <main+0x98>
			printf("Hello from Nios II!\n");
 4000604:	01010034 	movhi	r4,1024
 4000608:	211f3904 	addi	r4,r4,31972
 400060c:	4000d800 	call	4000d80 <puts>
			PutUart1('1');
 4000610:	01000c44 	movi	r4,49
 4000614:	40004300 	call	4000430 <PutUart1>
			presenca_sala = 1;
 4000618:	00800044 	movi	r2,1
 400061c:	e0bffe15 	stw	r2,-8(fp)
			msleep(500);
 4000620:	01000234 	movhi	r4,8
 4000624:	21284804 	addi	r4,r4,-24288
 4000628:	40041100 	call	4004110 <usleep>
	int janela_casal = 0;

	InitUart();
	while (1) {
		//SALA
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON1_BASE) == 1 && presenca_sala == 0) {
 400062c:	00000e06 	br	4000668 <main+0xd0>
			printf("Hello from Nios II!\n");
			PutUart1('1');
			presenca_sala = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON1_BASE) == 0 && presenca_sala == 1){
 4000630:	00820034 	movhi	r2,2048
 4000634:	10844004 	addi	r2,r2,4352
 4000638:	10800037 	ldwio	r2,0(r2)
 400063c:	1004c03a 	cmpne	r2,r2,zero
 4000640:	1000091e 	bne	r2,zero,4000668 <main+0xd0>
 4000644:	e0bffe17 	ldw	r2,-8(fp)
 4000648:	10800058 	cmpnei	r2,r2,1
 400064c:	1000061e 	bne	r2,zero,4000668 <main+0xd0>
			PutUart1('1');
 4000650:	01000c44 	movi	r4,49
 4000654:	40004300 	call	4000430 <PutUart1>
			presenca_sala = 0;
 4000658:	e03ffe15 	stw	zero,-8(fp)
			msleep(500);
 400065c:	01000234 	movhi	r4,8
 4000660:	21284804 	addi	r4,r4,-24288
 4000664:	40041100 	call	4004110 <usleep>
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON2_BASE) == 1 && porta_sala == 0){
 4000668:	00820034 	movhi	r2,2048
 400066c:	10843c04 	addi	r2,r2,4336
 4000670:	10800037 	ldwio	r2,0(r2)
 4000674:	10800058 	cmpnei	r2,r2,1
 4000678:	10000b1e 	bne	r2,zero,40006a8 <main+0x110>
 400067c:	e0bffd17 	ldw	r2,-12(fp)
 4000680:	1004c03a 	cmpne	r2,r2,zero
 4000684:	1000081e 	bne	r2,zero,40006a8 <main+0x110>
			PutUart1('q');
 4000688:	01001c44 	movi	r4,113
 400068c:	40004300 	call	4000430 <PutUart1>
			porta_sala = 1;
 4000690:	00800044 	movi	r2,1
 4000694:	e0bffd15 	stw	r2,-12(fp)
			msleep(500);
 4000698:	01000234 	movhi	r4,8
 400069c:	21284804 	addi	r4,r4,-24288
 40006a0:	40041100 	call	4004110 <usleep>
			PutUart1('1');
			presenca_sala = 0;
			msleep(500);
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON2_BASE) == 1 && porta_sala == 0){
 40006a4:	00000e06 	br	40006e0 <main+0x148>
			PutUart1('q');
			porta_sala = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON2_BASE) == 0 && porta_sala == 1){
 40006a8:	00820034 	movhi	r2,2048
 40006ac:	10843c04 	addi	r2,r2,4336
 40006b0:	10800037 	ldwio	r2,0(r2)
 40006b4:	1004c03a 	cmpne	r2,r2,zero
 40006b8:	1000091e 	bne	r2,zero,40006e0 <main+0x148>
 40006bc:	e0bffd17 	ldw	r2,-12(fp)
 40006c0:	10800058 	cmpnei	r2,r2,1
 40006c4:	1000061e 	bne	r2,zero,40006e0 <main+0x148>
			PutUart1('q');
 40006c8:	01001c44 	movi	r4,113
 40006cc:	40004300 	call	4000430 <PutUart1>
			porta_sala = 0;
 40006d0:	e03ffd15 	stw	zero,-12(fp)
			msleep(500);
 40006d4:	01000234 	movhi	r4,8
 40006d8:	21284804 	addi	r4,r4,-24288
 40006dc:	40041100 	call	4004110 <usleep>
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON3_BASE) == 1 && janela_sala == 0){
 40006e0:	00820034 	movhi	r2,2048
 40006e4:	10843404 	addi	r2,r2,4304
 40006e8:	10800037 	ldwio	r2,0(r2)
 40006ec:	10800058 	cmpnei	r2,r2,1
 40006f0:	10000b1e 	bne	r2,zero,4000720 <main+0x188>
 40006f4:	e0bffc17 	ldw	r2,-16(fp)
 40006f8:	1004c03a 	cmpne	r2,r2,zero
 40006fc:	1000081e 	bne	r2,zero,4000720 <main+0x188>
			PutUart1('a');
 4000700:	01001844 	movi	r4,97
 4000704:	40004300 	call	4000430 <PutUart1>
			janela_sala = 1;
 4000708:	00800044 	movi	r2,1
 400070c:	e0bffc15 	stw	r2,-16(fp)
			msleep(500);
 4000710:	01000234 	movhi	r4,8
 4000714:	21284804 	addi	r4,r4,-24288
 4000718:	40041100 	call	4004110 <usleep>
			PutUart1('q');
			porta_sala = 0;
			msleep(500);
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON3_BASE) == 1 && janela_sala == 0){
 400071c:	00000e06 	br	4000758 <main+0x1c0>
			PutUart1('a');
			janela_sala = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON3_BASE) == 0 && janela_sala == 1){
 4000720:	00820034 	movhi	r2,2048
 4000724:	10843404 	addi	r2,r2,4304
 4000728:	10800037 	ldwio	r2,0(r2)
 400072c:	1004c03a 	cmpne	r2,r2,zero
 4000730:	1000091e 	bne	r2,zero,4000758 <main+0x1c0>
 4000734:	e0bffc17 	ldw	r2,-16(fp)
 4000738:	10800058 	cmpnei	r2,r2,1
 400073c:	1000061e 	bne	r2,zero,4000758 <main+0x1c0>
			PutUart1('a');
 4000740:	01001844 	movi	r4,97
 4000744:	40004300 	call	4000430 <PutUart1>
			janela_sala = 0;
 4000748:	e03ffc15 	stw	zero,-16(fp)
			msleep(500);
 400074c:	01000234 	movhi	r4,8
 4000750:	21284804 	addi	r4,r4,-24288
 4000754:	40041100 	call	4004110 <usleep>
		}

		//COZINHA
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON4_BASE) == 1 && presenca_cozinha == 0){
 4000758:	00820034 	movhi	r2,2048
 400075c:	10843004 	addi	r2,r2,4288
 4000760:	10800037 	ldwio	r2,0(r2)
 4000764:	10800058 	cmpnei	r2,r2,1
 4000768:	10000b1e 	bne	r2,zero,4000798 <main+0x200>
 400076c:	e0bffb17 	ldw	r2,-20(fp)
 4000770:	1004c03a 	cmpne	r2,r2,zero
 4000774:	1000081e 	bne	r2,zero,4000798 <main+0x200>
			PutUart1('2');
 4000778:	01000c84 	movi	r4,50
 400077c:	40004300 	call	4000430 <PutUart1>
			presenca_cozinha = 1;
 4000780:	00800044 	movi	r2,1
 4000784:	e0bffb15 	stw	r2,-20(fp)
			msleep(500);
 4000788:	01000234 	movhi	r4,8
 400078c:	21284804 	addi	r4,r4,-24288
 4000790:	40041100 	call	4004110 <usleep>
			janela_sala = 0;
			msleep(500);
		}

		//COZINHA
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON4_BASE) == 1 && presenca_cozinha == 0){
 4000794:	00000e06 	br	40007d0 <main+0x238>
			PutUart1('2');
			presenca_cozinha = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON4_BASE) == 0 && presenca_cozinha == 1){
 4000798:	00820034 	movhi	r2,2048
 400079c:	10843004 	addi	r2,r2,4288
 40007a0:	10800037 	ldwio	r2,0(r2)
 40007a4:	1004c03a 	cmpne	r2,r2,zero
 40007a8:	1000091e 	bne	r2,zero,40007d0 <main+0x238>
 40007ac:	e0bffb17 	ldw	r2,-20(fp)
 40007b0:	10800058 	cmpnei	r2,r2,1
 40007b4:	1000061e 	bne	r2,zero,40007d0 <main+0x238>
			PutUart1('2');
 40007b8:	01000c84 	movi	r4,50
 40007bc:	40004300 	call	4000430 <PutUart1>
			presenca_cozinha = 0;
 40007c0:	e03ffb15 	stw	zero,-20(fp)
			msleep(500);
 40007c4:	01000234 	movhi	r4,8
 40007c8:	21284804 	addi	r4,r4,-24288
 40007cc:	40041100 	call	4004110 <usleep>
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON5_BASE) == 1 && porta_cozinha == 0){
 40007d0:	00820034 	movhi	r2,2048
 40007d4:	10842c04 	addi	r2,r2,4272
 40007d8:	10800037 	ldwio	r2,0(r2)
 40007dc:	10800058 	cmpnei	r2,r2,1
 40007e0:	10000b1e 	bne	r2,zero,4000810 <main+0x278>
 40007e4:	e0bffa17 	ldw	r2,-24(fp)
 40007e8:	1004c03a 	cmpne	r2,r2,zero
 40007ec:	1000081e 	bne	r2,zero,4000810 <main+0x278>
			PutUart1('e');
 40007f0:	01001944 	movi	r4,101
 40007f4:	40004300 	call	4000430 <PutUart1>
			porta_cozinha = 1;
 40007f8:	00800044 	movi	r2,1
 40007fc:	e0bffa15 	stw	r2,-24(fp)
			msleep(500);
 4000800:	01000234 	movhi	r4,8
 4000804:	21284804 	addi	r4,r4,-24288
 4000808:	40041100 	call	4004110 <usleep>
			PutUart1('2');
			presenca_cozinha = 0;
			msleep(500);
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON5_BASE) == 1 && porta_cozinha == 0){
 400080c:	00000e06 	br	4000848 <main+0x2b0>
			PutUart1('e');
			porta_cozinha = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON5_BASE) == 0 && porta_cozinha == 1){
 4000810:	00820034 	movhi	r2,2048
 4000814:	10842c04 	addi	r2,r2,4272
 4000818:	10800037 	ldwio	r2,0(r2)
 400081c:	1004c03a 	cmpne	r2,r2,zero
 4000820:	1000091e 	bne	r2,zero,4000848 <main+0x2b0>
 4000824:	e0bffa17 	ldw	r2,-24(fp)
 4000828:	10800058 	cmpnei	r2,r2,1
 400082c:	1000061e 	bne	r2,zero,4000848 <main+0x2b0>
			PutUart1('e');
 4000830:	01001944 	movi	r4,101
 4000834:	40004300 	call	4000430 <PutUart1>
			porta_cozinha = 0;
 4000838:	e03ffa15 	stw	zero,-24(fp)
			msleep(500);
 400083c:	01000234 	movhi	r4,8
 4000840:	21284804 	addi	r4,r4,-24288
 4000844:	40041100 	call	4004110 <usleep>
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON6_BASE) == 1 && janela_cozinha == 0){
 4000848:	00820034 	movhi	r2,2048
 400084c:	10842804 	addi	r2,r2,4256
 4000850:	10800037 	ldwio	r2,0(r2)
 4000854:	10800058 	cmpnei	r2,r2,1
 4000858:	10000b1e 	bne	r2,zero,4000888 <main+0x2f0>
 400085c:	e0bff917 	ldw	r2,-28(fp)
 4000860:	1004c03a 	cmpne	r2,r2,zero
 4000864:	1000081e 	bne	r2,zero,4000888 <main+0x2f0>
			PutUart1('s');
 4000868:	01001cc4 	movi	r4,115
 400086c:	40004300 	call	4000430 <PutUart1>
			janela_cozinha = 1;
 4000870:	00800044 	movi	r2,1
 4000874:	e0bff915 	stw	r2,-28(fp)
			msleep(500);
 4000878:	01000234 	movhi	r4,8
 400087c:	21284804 	addi	r4,r4,-24288
 4000880:	40041100 	call	4004110 <usleep>
			PutUart1('e');
			porta_cozinha = 0;
			msleep(500);
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON6_BASE) == 1 && janela_cozinha == 0){
 4000884:	00000e06 	br	40008c0 <main+0x328>
			PutUart1('s');
			janela_cozinha = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON6_BASE) == 0 && janela_cozinha == 1){
 4000888:	00820034 	movhi	r2,2048
 400088c:	10842804 	addi	r2,r2,4256
 4000890:	10800037 	ldwio	r2,0(r2)
 4000894:	1004c03a 	cmpne	r2,r2,zero
 4000898:	1000091e 	bne	r2,zero,40008c0 <main+0x328>
 400089c:	e0bff917 	ldw	r2,-28(fp)
 40008a0:	10800058 	cmpnei	r2,r2,1
 40008a4:	1000061e 	bne	r2,zero,40008c0 <main+0x328>
			PutUart1('s');
 40008a8:	01001cc4 	movi	r4,115
 40008ac:	40004300 	call	4000430 <PutUart1>
			janela_cozinha = 0;
 40008b0:	e03ff915 	stw	zero,-28(fp)
			msleep(500);
 40008b4:	01000234 	movhi	r4,8
 40008b8:	21284804 	addi	r4,r4,-24288
 40008bc:	40041100 	call	4004110 <usleep>
		}

		//QUARTO
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON7_BASE) == 1 && presenca_quarto == 0){
 40008c0:	00820034 	movhi	r2,2048
 40008c4:	10842404 	addi	r2,r2,4240
 40008c8:	10800037 	ldwio	r2,0(r2)
 40008cc:	10800058 	cmpnei	r2,r2,1
 40008d0:	10000b1e 	bne	r2,zero,4000900 <main+0x368>
 40008d4:	e0bff817 	ldw	r2,-32(fp)
 40008d8:	1004c03a 	cmpne	r2,r2,zero
 40008dc:	1000081e 	bne	r2,zero,4000900 <main+0x368>
			PutUart1('3');
 40008e0:	01000cc4 	movi	r4,51
 40008e4:	40004300 	call	4000430 <PutUart1>
			presenca_quarto = 1;
 40008e8:	00800044 	movi	r2,1
 40008ec:	e0bff815 	stw	r2,-32(fp)
			msleep(500);
 40008f0:	01000234 	movhi	r4,8
 40008f4:	21284804 	addi	r4,r4,-24288
 40008f8:	40041100 	call	4004110 <usleep>
			janela_cozinha = 0;
			msleep(500);
		}

		//QUARTO
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON7_BASE) == 1 && presenca_quarto == 0){
 40008fc:	00000e06 	br	4000938 <main+0x3a0>
			PutUart1('3');
			presenca_quarto = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON7_BASE) == 0 && presenca_quarto == 1){
 4000900:	00820034 	movhi	r2,2048
 4000904:	10842404 	addi	r2,r2,4240
 4000908:	10800037 	ldwio	r2,0(r2)
 400090c:	1004c03a 	cmpne	r2,r2,zero
 4000910:	1000091e 	bne	r2,zero,4000938 <main+0x3a0>
 4000914:	e0bff817 	ldw	r2,-32(fp)
 4000918:	10800058 	cmpnei	r2,r2,1
 400091c:	1000061e 	bne	r2,zero,4000938 <main+0x3a0>
			PutUart1('3');
 4000920:	01000cc4 	movi	r4,51
 4000924:	40004300 	call	4000430 <PutUart1>
			presenca_quarto = 0;
 4000928:	e03ff815 	stw	zero,-32(fp)
			msleep(500);
 400092c:	01000234 	movhi	r4,8
 4000930:	21284804 	addi	r4,r4,-24288
 4000934:	40041100 	call	4004110 <usleep>
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON8_BASE) == 1 && porta_quarto == 0){
 4000938:	00820034 	movhi	r2,2048
 400093c:	10842004 	addi	r2,r2,4224
 4000940:	10800037 	ldwio	r2,0(r2)
 4000944:	10800058 	cmpnei	r2,r2,1
 4000948:	10000b1e 	bne	r2,zero,4000978 <main+0x3e0>
 400094c:	e0bff717 	ldw	r2,-36(fp)
 4000950:	1004c03a 	cmpne	r2,r2,zero
 4000954:	1000081e 	bne	r2,zero,4000978 <main+0x3e0>
			PutUart1('r');
 4000958:	01001c84 	movi	r4,114
 400095c:	40004300 	call	4000430 <PutUart1>
			porta_quarto = 1;
 4000960:	00800044 	movi	r2,1
 4000964:	e0bff715 	stw	r2,-36(fp)
			msleep(500);
 4000968:	01000234 	movhi	r4,8
 400096c:	21284804 	addi	r4,r4,-24288
 4000970:	40041100 	call	4004110 <usleep>
			PutUart1('3');
			presenca_quarto = 0;
			msleep(500);
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON8_BASE) == 1 && porta_quarto == 0){
 4000974:	00000e06 	br	40009b0 <main+0x418>
			PutUart1('r');
			porta_quarto = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON8_BASE) == 0 && porta_quarto == 1){
 4000978:	00820034 	movhi	r2,2048
 400097c:	10842004 	addi	r2,r2,4224
 4000980:	10800037 	ldwio	r2,0(r2)
 4000984:	1004c03a 	cmpne	r2,r2,zero
 4000988:	1000091e 	bne	r2,zero,40009b0 <main+0x418>
 400098c:	e0bff717 	ldw	r2,-36(fp)
 4000990:	10800058 	cmpnei	r2,r2,1
 4000994:	1000061e 	bne	r2,zero,40009b0 <main+0x418>
			PutUart1('r');
 4000998:	01001c84 	movi	r4,114
 400099c:	40004300 	call	4000430 <PutUart1>
			porta_quarto = 0;
 40009a0:	e03ff715 	stw	zero,-36(fp)
			msleep(500);
 40009a4:	01000234 	movhi	r4,8
 40009a8:	21284804 	addi	r4,r4,-24288
 40009ac:	40041100 	call	4004110 <usleep>
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON9_BASE) == 1 && janela_quarto == 0){
 40009b0:	00820034 	movhi	r2,2048
 40009b4:	10841c04 	addi	r2,r2,4208
 40009b8:	10800037 	ldwio	r2,0(r2)
 40009bc:	10800058 	cmpnei	r2,r2,1
 40009c0:	10000b1e 	bne	r2,zero,40009f0 <main+0x458>
 40009c4:	e0bff617 	ldw	r2,-40(fp)
 40009c8:	1004c03a 	cmpne	r2,r2,zero
 40009cc:	1000081e 	bne	r2,zero,40009f0 <main+0x458>
			PutUart1('d');
 40009d0:	01001904 	movi	r4,100
 40009d4:	40004300 	call	4000430 <PutUart1>
			janela_quarto = 1;
 40009d8:	00800044 	movi	r2,1
 40009dc:	e0bff615 	stw	r2,-40(fp)
			msleep(500);
 40009e0:	01000234 	movhi	r4,8
 40009e4:	21284804 	addi	r4,r4,-24288
 40009e8:	40041100 	call	4004110 <usleep>
			PutUart1('r');
			porta_quarto = 0;
			msleep(500);
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON9_BASE) == 1 && janela_quarto == 0){
 40009ec:	00000e06 	br	4000a28 <main+0x490>
			PutUart1('d');
			janela_quarto = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON9_BASE) == 0 && janela_quarto == 1){
 40009f0:	00820034 	movhi	r2,2048
 40009f4:	10841c04 	addi	r2,r2,4208
 40009f8:	10800037 	ldwio	r2,0(r2)
 40009fc:	1004c03a 	cmpne	r2,r2,zero
 4000a00:	1000091e 	bne	r2,zero,4000a28 <main+0x490>
 4000a04:	e0bff617 	ldw	r2,-40(fp)
 4000a08:	10800058 	cmpnei	r2,r2,1
 4000a0c:	1000061e 	bne	r2,zero,4000a28 <main+0x490>
			PutUart1('d');
 4000a10:	01001904 	movi	r4,100
 4000a14:	40004300 	call	4000430 <PutUart1>
			janela_quarto = 0;
 4000a18:	e03ff615 	stw	zero,-40(fp)
			msleep(500);
 4000a1c:	01000234 	movhi	r4,8
 4000a20:	21284804 	addi	r4,r4,-24288
 4000a24:	40041100 	call	4004110 <usleep>
		}


		//QUARTO CASAL
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON10_BASE) == 1 && presenca_casal == 0){
 4000a28:	00820034 	movhi	r2,2048
 4000a2c:	10841804 	addi	r2,r2,4192
 4000a30:	10800037 	ldwio	r2,0(r2)
 4000a34:	10800058 	cmpnei	r2,r2,1
 4000a38:	10000b1e 	bne	r2,zero,4000a68 <main+0x4d0>
 4000a3c:	e0bff517 	ldw	r2,-44(fp)
 4000a40:	1004c03a 	cmpne	r2,r2,zero
 4000a44:	1000081e 	bne	r2,zero,4000a68 <main+0x4d0>
			PutUart1('5');
 4000a48:	01000d44 	movi	r4,53
 4000a4c:	40004300 	call	4000430 <PutUart1>
			presenca_casal = 1;
 4000a50:	00800044 	movi	r2,1
 4000a54:	e0bff515 	stw	r2,-44(fp)
			msleep(500);
 4000a58:	01000234 	movhi	r4,8
 4000a5c:	21284804 	addi	r4,r4,-24288
 4000a60:	40041100 	call	4004110 <usleep>
			msleep(500);
		}


		//QUARTO CASAL
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON10_BASE) == 1 && presenca_casal == 0){
 4000a64:	00000e06 	br	4000aa0 <main+0x508>
			PutUart1('5');
			presenca_casal = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON10_BASE) == 0 && presenca_casal == 1){
 4000a68:	00820034 	movhi	r2,2048
 4000a6c:	10841804 	addi	r2,r2,4192
 4000a70:	10800037 	ldwio	r2,0(r2)
 4000a74:	1004c03a 	cmpne	r2,r2,zero
 4000a78:	1000091e 	bne	r2,zero,4000aa0 <main+0x508>
 4000a7c:	e0bff517 	ldw	r2,-44(fp)
 4000a80:	10800058 	cmpnei	r2,r2,1
 4000a84:	1000061e 	bne	r2,zero,4000aa0 <main+0x508>
			PutUart1('5');
 4000a88:	01000d44 	movi	r4,53
 4000a8c:	40004300 	call	4000430 <PutUart1>
			presenca_casal = 0;
 4000a90:	e03ff515 	stw	zero,-44(fp)
			msleep(500);
 4000a94:	01000234 	movhi	r4,8
 4000a98:	21284804 	addi	r4,r4,-24288
 4000a9c:	40041100 	call	4004110 <usleep>
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON11_BASE) == 1 && porta_casal == 0){
 4000aa0:	00820034 	movhi	r2,2048
 4000aa4:	10841404 	addi	r2,r2,4176
 4000aa8:	10800037 	ldwio	r2,0(r2)
 4000aac:	10800058 	cmpnei	r2,r2,1
 4000ab0:	10000b1e 	bne	r2,zero,4000ae0 <main+0x548>
 4000ab4:	e0bff417 	ldw	r2,-48(fp)
 4000ab8:	1004c03a 	cmpne	r2,r2,zero
 4000abc:	1000081e 	bne	r2,zero,4000ae0 <main+0x548>
			PutUart1('y');
 4000ac0:	01001e44 	movi	r4,121
 4000ac4:	40004300 	call	4000430 <PutUart1>
			porta_casal = 1;
 4000ac8:	00800044 	movi	r2,1
 4000acc:	e0bff415 	stw	r2,-48(fp)
			msleep(500);
 4000ad0:	01000234 	movhi	r4,8
 4000ad4:	21284804 	addi	r4,r4,-24288
 4000ad8:	40041100 	call	4004110 <usleep>
			PutUart1('5');
			presenca_casal = 0;
			msleep(500);
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON11_BASE) == 1 && porta_casal == 0){
 4000adc:	00000e06 	br	4000b18 <main+0x580>
			PutUart1('y');
			porta_casal = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON11_BASE) == 0 && porta_casal == 1){
 4000ae0:	00820034 	movhi	r2,2048
 4000ae4:	10841404 	addi	r2,r2,4176
 4000ae8:	10800037 	ldwio	r2,0(r2)
 4000aec:	1004c03a 	cmpne	r2,r2,zero
 4000af0:	1000091e 	bne	r2,zero,4000b18 <main+0x580>
 4000af4:	e0bff417 	ldw	r2,-48(fp)
 4000af8:	10800058 	cmpnei	r2,r2,1
 4000afc:	1000061e 	bne	r2,zero,4000b18 <main+0x580>
			PutUart1('y');
 4000b00:	01001e44 	movi	r4,121
 4000b04:	40004300 	call	4000430 <PutUart1>
			porta_casal = 0;
 4000b08:	e03ff415 	stw	zero,-48(fp)
			msleep(500);
 4000b0c:	01000234 	movhi	r4,8
 4000b10:	21284804 	addi	r4,r4,-24288
 4000b14:	40041100 	call	4004110 <usleep>
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON12_BASE) == 1 && janela_casal == 0){
 4000b18:	00820034 	movhi	r2,2048
 4000b1c:	10841004 	addi	r2,r2,4160
 4000b20:	10800037 	ldwio	r2,0(r2)
 4000b24:	10800058 	cmpnei	r2,r2,1
 4000b28:	10000b1e 	bne	r2,zero,4000b58 <main+0x5c0>
 4000b2c:	e0bff317 	ldw	r2,-52(fp)
 4000b30:	1004c03a 	cmpne	r2,r2,zero
 4000b34:	1000081e 	bne	r2,zero,4000b58 <main+0x5c0>
			PutUart1('g');
 4000b38:	010019c4 	movi	r4,103
 4000b3c:	40004300 	call	4000430 <PutUart1>
			janela_casal = 1;
 4000b40:	00800044 	movi	r2,1
 4000b44:	e0bff315 	stw	r2,-52(fp)
			msleep(500);
 4000b48:	01000234 	movhi	r4,8
 4000b4c:	21284804 	addi	r4,r4,-24288
 4000b50:	40041100 	call	4004110 <usleep>
			PutUart1('y');
			porta_casal = 0;
			msleep(500);
		}

		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON12_BASE) == 1 && janela_casal == 0){
 4000b54:	003ea306 	br	40005e4 <main+0x4c>
			PutUart1('g');
			janela_casal = 1;
			msleep(500);
		}else if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON12_BASE) == 0 && janela_casal == 1){
 4000b58:	00820034 	movhi	r2,2048
 4000b5c:	10841004 	addi	r2,r2,4160
 4000b60:	10800037 	ldwio	r2,0(r2)
 4000b64:	1004c03a 	cmpne	r2,r2,zero
 4000b68:	103e9e1e 	bne	r2,zero,40005e4 <main+0x4c>
 4000b6c:	e0bff317 	ldw	r2,-52(fp)
 4000b70:	10800058 	cmpnei	r2,r2,1
 4000b74:	103e9b1e 	bne	r2,zero,40005e4 <main+0x4c>
			PutUart1('g');
 4000b78:	010019c4 	movi	r4,103
 4000b7c:	40004300 	call	4000430 <PutUart1>
			janela_casal = 0;
 4000b80:	e03ff315 	stw	zero,-52(fp)
			msleep(500);
 4000b84:	01000234 	movhi	r4,8
 4000b88:	21284804 	addi	r4,r4,-24288
 4000b8c:	40041100 	call	4004110 <usleep>
		}

	}
 4000b90:	003e9406 	br	40005e4 <main+0x4c>

04000b94 <udivmodsi4>:
 4000b94:	29001b2e 	bgeu	r5,r4,4000c04 <udivmodsi4+0x70>
 4000b98:	28001a16 	blt	r5,zero,4000c04 <udivmodsi4+0x70>
 4000b9c:	00800044 	movi	r2,1
 4000ba0:	0007883a 	mov	r3,zero
 4000ba4:	01c007c4 	movi	r7,31
 4000ba8:	00000306 	br	4000bb8 <udivmodsi4+0x24>
 4000bac:	19c01326 	beq	r3,r7,4000bfc <udivmodsi4+0x68>
 4000bb0:	18c00044 	addi	r3,r3,1
 4000bb4:	28000416 	blt	r5,zero,4000bc8 <udivmodsi4+0x34>
 4000bb8:	294b883a 	add	r5,r5,r5
 4000bbc:	1085883a 	add	r2,r2,r2
 4000bc0:	293ffa36 	bltu	r5,r4,4000bac <udivmodsi4+0x18>
 4000bc4:	10000d26 	beq	r2,zero,4000bfc <udivmodsi4+0x68>
 4000bc8:	0007883a 	mov	r3,zero
 4000bcc:	21400236 	bltu	r4,r5,4000bd8 <udivmodsi4+0x44>
 4000bd0:	2149c83a 	sub	r4,r4,r5
 4000bd4:	1886b03a 	or	r3,r3,r2
 4000bd8:	1004d07a 	srli	r2,r2,1
 4000bdc:	280ad07a 	srli	r5,r5,1
 4000be0:	103ffa1e 	bne	r2,zero,4000bcc <udivmodsi4+0x38>
 4000be4:	30000226 	beq	r6,zero,4000bf0 <udivmodsi4+0x5c>
 4000be8:	2005883a 	mov	r2,r4
 4000bec:	f800283a 	ret
 4000bf0:	1809883a 	mov	r4,r3
 4000bf4:	2005883a 	mov	r2,r4
 4000bf8:	f800283a 	ret
 4000bfc:	0007883a 	mov	r3,zero
 4000c00:	003ff806 	br	4000be4 <udivmodsi4+0x50>
 4000c04:	00800044 	movi	r2,1
 4000c08:	0007883a 	mov	r3,zero
 4000c0c:	003fef06 	br	4000bcc <udivmodsi4+0x38>

04000c10 <__divsi3>:
 4000c10:	defffe04 	addi	sp,sp,-8
 4000c14:	dc000015 	stw	r16,0(sp)
 4000c18:	dfc00115 	stw	ra,4(sp)
 4000c1c:	0021883a 	mov	r16,zero
 4000c20:	20000c16 	blt	r4,zero,4000c54 <__divsi3+0x44>
 4000c24:	000d883a 	mov	r6,zero
 4000c28:	28000e16 	blt	r5,zero,4000c64 <__divsi3+0x54>
 4000c2c:	4000b940 	call	4000b94 <udivmodsi4>
 4000c30:	1007883a 	mov	r3,r2
 4000c34:	8005003a 	cmpeq	r2,r16,zero
 4000c38:	1000011e 	bne	r2,zero,4000c40 <__divsi3+0x30>
 4000c3c:	00c7c83a 	sub	r3,zero,r3
 4000c40:	1805883a 	mov	r2,r3
 4000c44:	dfc00117 	ldw	ra,4(sp)
 4000c48:	dc000017 	ldw	r16,0(sp)
 4000c4c:	dec00204 	addi	sp,sp,8
 4000c50:	f800283a 	ret
 4000c54:	0109c83a 	sub	r4,zero,r4
 4000c58:	04000044 	movi	r16,1
 4000c5c:	000d883a 	mov	r6,zero
 4000c60:	283ff20e 	bge	r5,zero,4000c2c <__divsi3+0x1c>
 4000c64:	014bc83a 	sub	r5,zero,r5
 4000c68:	8021003a 	cmpeq	r16,r16,zero
 4000c6c:	003fef06 	br	4000c2c <__divsi3+0x1c>

04000c70 <__modsi3>:
 4000c70:	deffff04 	addi	sp,sp,-4
 4000c74:	dfc00015 	stw	ra,0(sp)
 4000c78:	01800044 	movi	r6,1
 4000c7c:	2807883a 	mov	r3,r5
 4000c80:	20000416 	blt	r4,zero,4000c94 <__modsi3+0x24>
 4000c84:	28000c16 	blt	r5,zero,4000cb8 <__modsi3+0x48>
 4000c88:	dfc00017 	ldw	ra,0(sp)
 4000c8c:	dec00104 	addi	sp,sp,4
 4000c90:	4000b941 	jmpi	4000b94 <udivmodsi4>
 4000c94:	0109c83a 	sub	r4,zero,r4
 4000c98:	28000b16 	blt	r5,zero,4000cc8 <__modsi3+0x58>
 4000c9c:	180b883a 	mov	r5,r3
 4000ca0:	01800044 	movi	r6,1
 4000ca4:	4000b940 	call	4000b94 <udivmodsi4>
 4000ca8:	0085c83a 	sub	r2,zero,r2
 4000cac:	dfc00017 	ldw	ra,0(sp)
 4000cb0:	dec00104 	addi	sp,sp,4
 4000cb4:	f800283a 	ret
 4000cb8:	014bc83a 	sub	r5,zero,r5
 4000cbc:	dfc00017 	ldw	ra,0(sp)
 4000cc0:	dec00104 	addi	sp,sp,4
 4000cc4:	4000b941 	jmpi	4000b94 <udivmodsi4>
 4000cc8:	0147c83a 	sub	r3,zero,r5
 4000ccc:	003ff306 	br	4000c9c <__modsi3+0x2c>

04000cd0 <__udivsi3>:
 4000cd0:	000d883a 	mov	r6,zero
 4000cd4:	4000b941 	jmpi	4000b94 <udivmodsi4>

04000cd8 <__umodsi3>:
 4000cd8:	01800044 	movi	r6,1
 4000cdc:	4000b941 	jmpi	4000b94 <udivmodsi4>

04000ce0 <_puts_r>:
 4000ce0:	defff604 	addi	sp,sp,-40
 4000ce4:	dc400715 	stw	r17,28(sp)
 4000ce8:	2023883a 	mov	r17,r4
 4000cec:	2809883a 	mov	r4,r5
 4000cf0:	dfc00915 	stw	ra,36(sp)
 4000cf4:	dcc00815 	stw	r19,32(sp)
 4000cf8:	2827883a 	mov	r19,r5
 4000cfc:	4000d940 	call	4000d94 <strlen>
 4000d00:	89400217 	ldw	r5,8(r17)
 4000d04:	00c10034 	movhi	r3,1024
 4000d08:	18df3e04 	addi	r3,r3,31992
 4000d0c:	01c00044 	movi	r7,1
 4000d10:	12000044 	addi	r8,r2,1
 4000d14:	d8c00515 	stw	r3,20(sp)
 4000d18:	d9c00615 	stw	r7,24(sp)
 4000d1c:	d8c00304 	addi	r3,sp,12
 4000d20:	01c00084 	movi	r7,2
 4000d24:	8809883a 	mov	r4,r17
 4000d28:	d80d883a 	mov	r6,sp
 4000d2c:	d8c00015 	stw	r3,0(sp)
 4000d30:	dcc00315 	stw	r19,12(sp)
 4000d34:	da000215 	stw	r8,8(sp)
 4000d38:	d9c00115 	stw	r7,4(sp)
 4000d3c:	d8800415 	stw	r2,16(sp)
 4000d40:	4000e080 	call	4000e08 <__sfvwrite_r>
 4000d44:	00ffffc4 	movi	r3,-1
 4000d48:	10000626 	beq	r2,zero,4000d64 <_puts_r+0x84>
 4000d4c:	1805883a 	mov	r2,r3
 4000d50:	dfc00917 	ldw	ra,36(sp)
 4000d54:	dcc00817 	ldw	r19,32(sp)
 4000d58:	dc400717 	ldw	r17,28(sp)
 4000d5c:	dec00a04 	addi	sp,sp,40
 4000d60:	f800283a 	ret
 4000d64:	00c00284 	movi	r3,10
 4000d68:	1805883a 	mov	r2,r3
 4000d6c:	dfc00917 	ldw	ra,36(sp)
 4000d70:	dcc00817 	ldw	r19,32(sp)
 4000d74:	dc400717 	ldw	r17,28(sp)
 4000d78:	dec00a04 	addi	sp,sp,40
 4000d7c:	f800283a 	ret

04000d80 <puts>:
 4000d80:	00810074 	movhi	r2,1025
 4000d84:	10a6ef04 	addi	r2,r2,-25668
 4000d88:	200b883a 	mov	r5,r4
 4000d8c:	11000017 	ldw	r4,0(r2)
 4000d90:	4000ce01 	jmpi	4000ce0 <_puts_r>

04000d94 <strlen>:
 4000d94:	208000cc 	andi	r2,r4,3
 4000d98:	2011883a 	mov	r8,r4
 4000d9c:	1000161e 	bne	r2,zero,4000df8 <strlen+0x64>
 4000da0:	20c00017 	ldw	r3,0(r4)
 4000da4:	017fbff4 	movhi	r5,65279
 4000da8:	297fbfc4 	addi	r5,r5,-257
 4000dac:	01e02074 	movhi	r7,32897
 4000db0:	39e02004 	addi	r7,r7,-32640
 4000db4:	1945883a 	add	r2,r3,r5
 4000db8:	11c4703a 	and	r2,r2,r7
 4000dbc:	00c6303a 	nor	r3,zero,r3
 4000dc0:	1886703a 	and	r3,r3,r2
 4000dc4:	18000c1e 	bne	r3,zero,4000df8 <strlen+0x64>
 4000dc8:	280d883a 	mov	r6,r5
 4000dcc:	380b883a 	mov	r5,r7
 4000dd0:	21000104 	addi	r4,r4,4
 4000dd4:	20800017 	ldw	r2,0(r4)
 4000dd8:	1187883a 	add	r3,r2,r6
 4000ddc:	1946703a 	and	r3,r3,r5
 4000de0:	0084303a 	nor	r2,zero,r2
 4000de4:	10c4703a 	and	r2,r2,r3
 4000de8:	103ff926 	beq	r2,zero,4000dd0 <strlen+0x3c>
 4000dec:	20800007 	ldb	r2,0(r4)
 4000df0:	10000326 	beq	r2,zero,4000e00 <strlen+0x6c>
 4000df4:	21000044 	addi	r4,r4,1
 4000df8:	20800007 	ldb	r2,0(r4)
 4000dfc:	103ffd1e 	bne	r2,zero,4000df4 <strlen+0x60>
 4000e00:	2205c83a 	sub	r2,r4,r8
 4000e04:	f800283a 	ret

04000e08 <__sfvwrite_r>:
 4000e08:	30800217 	ldw	r2,8(r6)
 4000e0c:	defff504 	addi	sp,sp,-44
 4000e10:	df000915 	stw	fp,36(sp)
 4000e14:	dd800715 	stw	r22,28(sp)
 4000e18:	dc800315 	stw	r18,12(sp)
 4000e1c:	dfc00a15 	stw	ra,40(sp)
 4000e20:	ddc00815 	stw	r23,32(sp)
 4000e24:	dd400615 	stw	r21,24(sp)
 4000e28:	dd000515 	stw	r20,20(sp)
 4000e2c:	dcc00415 	stw	r19,16(sp)
 4000e30:	dc400215 	stw	r17,8(sp)
 4000e34:	dc000115 	stw	r16,4(sp)
 4000e38:	302d883a 	mov	r22,r6
 4000e3c:	2039883a 	mov	fp,r4
 4000e40:	2825883a 	mov	r18,r5
 4000e44:	10001c26 	beq	r2,zero,4000eb8 <__sfvwrite_r+0xb0>
 4000e48:	29c0030b 	ldhu	r7,12(r5)
 4000e4c:	3880020c 	andi	r2,r7,8
 4000e50:	10002726 	beq	r2,zero,4000ef0 <__sfvwrite_r+0xe8>
 4000e54:	28800417 	ldw	r2,16(r5)
 4000e58:	10002526 	beq	r2,zero,4000ef0 <__sfvwrite_r+0xe8>
 4000e5c:	3880008c 	andi	r2,r7,2
 4000e60:	b5400017 	ldw	r21,0(r22)
 4000e64:	10002826 	beq	r2,zero,4000f08 <__sfvwrite_r+0x100>
 4000e68:	0021883a 	mov	r16,zero
 4000e6c:	0023883a 	mov	r17,zero
 4000e70:	880d883a 	mov	r6,r17
 4000e74:	e009883a 	mov	r4,fp
 4000e78:	00810004 	movi	r2,1024
 4000e7c:	80006e26 	beq	r16,zero,4001038 <__sfvwrite_r+0x230>
 4000e80:	800f883a 	mov	r7,r16
 4000e84:	91400717 	ldw	r5,28(r18)
 4000e88:	1400012e 	bgeu	r2,r16,4000e90 <__sfvwrite_r+0x88>
 4000e8c:	100f883a 	mov	r7,r2
 4000e90:	90c00917 	ldw	r3,36(r18)
 4000e94:	183ee83a 	callr	r3
 4000e98:	1007883a 	mov	r3,r2
 4000e9c:	80a1c83a 	sub	r16,r16,r2
 4000ea0:	88a3883a 	add	r17,r17,r2
 4000ea4:	00806d0e 	bge	zero,r2,400105c <__sfvwrite_r+0x254>
 4000ea8:	b0800217 	ldw	r2,8(r22)
 4000eac:	10c5c83a 	sub	r2,r2,r3
 4000eb0:	b0800215 	stw	r2,8(r22)
 4000eb4:	103fee1e 	bne	r2,zero,4000e70 <__sfvwrite_r+0x68>
 4000eb8:	0009883a 	mov	r4,zero
 4000ebc:	2005883a 	mov	r2,r4
 4000ec0:	dfc00a17 	ldw	ra,40(sp)
 4000ec4:	df000917 	ldw	fp,36(sp)
 4000ec8:	ddc00817 	ldw	r23,32(sp)
 4000ecc:	dd800717 	ldw	r22,28(sp)
 4000ed0:	dd400617 	ldw	r21,24(sp)
 4000ed4:	dd000517 	ldw	r20,20(sp)
 4000ed8:	dcc00417 	ldw	r19,16(sp)
 4000edc:	dc800317 	ldw	r18,12(sp)
 4000ee0:	dc400217 	ldw	r17,8(sp)
 4000ee4:	dc000117 	ldw	r16,4(sp)
 4000ee8:	dec00b04 	addi	sp,sp,44
 4000eec:	f800283a 	ret
 4000ef0:	40022ac0 	call	40022ac <__swsetup_r>
 4000ef4:	1000e41e 	bne	r2,zero,4001288 <__sfvwrite_r+0x480>
 4000ef8:	91c0030b 	ldhu	r7,12(r18)
 4000efc:	b5400017 	ldw	r21,0(r22)
 4000f00:	3880008c 	andi	r2,r7,2
 4000f04:	103fd81e 	bne	r2,zero,4000e68 <__sfvwrite_r+0x60>
 4000f08:	3880004c 	andi	r2,r7,1
 4000f0c:	1005003a 	cmpeq	r2,r2,zero
 4000f10:	10005726 	beq	r2,zero,4001070 <__sfvwrite_r+0x268>
 4000f14:	0029883a 	mov	r20,zero
 4000f18:	002f883a 	mov	r23,zero
 4000f1c:	a0004226 	beq	r20,zero,4001028 <__sfvwrite_r+0x220>
 4000f20:	3880800c 	andi	r2,r7,512
 4000f24:	94000217 	ldw	r16,8(r18)
 4000f28:	10008b26 	beq	r2,zero,4001158 <__sfvwrite_r+0x350>
 4000f2c:	800d883a 	mov	r6,r16
 4000f30:	a400a536 	bltu	r20,r16,40011c8 <__sfvwrite_r+0x3c0>
 4000f34:	3881200c 	andi	r2,r7,1152
 4000f38:	10002726 	beq	r2,zero,4000fd8 <__sfvwrite_r+0x1d0>
 4000f3c:	90800517 	ldw	r2,20(r18)
 4000f40:	92000417 	ldw	r8,16(r18)
 4000f44:	91400017 	ldw	r5,0(r18)
 4000f48:	1087883a 	add	r3,r2,r2
 4000f4c:	1887883a 	add	r3,r3,r2
 4000f50:	1808d7fa 	srli	r4,r3,31
 4000f54:	2a21c83a 	sub	r16,r5,r8
 4000f58:	80800044 	addi	r2,r16,1
 4000f5c:	20c9883a 	add	r4,r4,r3
 4000f60:	2027d07a 	srai	r19,r4,1
 4000f64:	a085883a 	add	r2,r20,r2
 4000f68:	980d883a 	mov	r6,r19
 4000f6c:	9880022e 	bgeu	r19,r2,4000f78 <__sfvwrite_r+0x170>
 4000f70:	1027883a 	mov	r19,r2
 4000f74:	100d883a 	mov	r6,r2
 4000f78:	3881000c 	andi	r2,r7,1024
 4000f7c:	1000b826 	beq	r2,zero,4001260 <__sfvwrite_r+0x458>
 4000f80:	300b883a 	mov	r5,r6
 4000f84:	e009883a 	mov	r4,fp
 4000f88:	40012a40 	call	40012a4 <_malloc_r>
 4000f8c:	10003126 	beq	r2,zero,4001054 <__sfvwrite_r+0x24c>
 4000f90:	91400417 	ldw	r5,16(r18)
 4000f94:	1009883a 	mov	r4,r2
 4000f98:	800d883a 	mov	r6,r16
 4000f9c:	1023883a 	mov	r17,r2
 4000fa0:	4001ac80 	call	4001ac8 <memcpy>
 4000fa4:	90c0030b 	ldhu	r3,12(r18)
 4000fa8:	00beffc4 	movi	r2,-1025
 4000fac:	1886703a 	and	r3,r3,r2
 4000fb0:	18c02014 	ori	r3,r3,128
 4000fb4:	90c0030d 	sth	r3,12(r18)
 4000fb8:	9c07c83a 	sub	r3,r19,r16
 4000fbc:	8c05883a 	add	r2,r17,r16
 4000fc0:	a00d883a 	mov	r6,r20
 4000fc4:	a021883a 	mov	r16,r20
 4000fc8:	90800015 	stw	r2,0(r18)
 4000fcc:	90c00215 	stw	r3,8(r18)
 4000fd0:	94400415 	stw	r17,16(r18)
 4000fd4:	94c00515 	stw	r19,20(r18)
 4000fd8:	91000017 	ldw	r4,0(r18)
 4000fdc:	b80b883a 	mov	r5,r23
 4000fe0:	a023883a 	mov	r17,r20
 4000fe4:	4001b680 	call	4001b68 <memmove>
 4000fe8:	90c00217 	ldw	r3,8(r18)
 4000fec:	90800017 	ldw	r2,0(r18)
 4000ff0:	a027883a 	mov	r19,r20
 4000ff4:	1c07c83a 	sub	r3,r3,r16
 4000ff8:	1405883a 	add	r2,r2,r16
 4000ffc:	90c00215 	stw	r3,8(r18)
 4001000:	a021883a 	mov	r16,r20
 4001004:	90800015 	stw	r2,0(r18)
 4001008:	b0800217 	ldw	r2,8(r22)
 400100c:	1405c83a 	sub	r2,r2,r16
 4001010:	b0800215 	stw	r2,8(r22)
 4001014:	103fa826 	beq	r2,zero,4000eb8 <__sfvwrite_r+0xb0>
 4001018:	a469c83a 	sub	r20,r20,r17
 400101c:	91c0030b 	ldhu	r7,12(r18)
 4001020:	bcef883a 	add	r23,r23,r19
 4001024:	a03fbe1e 	bne	r20,zero,4000f20 <__sfvwrite_r+0x118>
 4001028:	adc00017 	ldw	r23,0(r21)
 400102c:	ad000117 	ldw	r20,4(r21)
 4001030:	ad400204 	addi	r21,r21,8
 4001034:	003fb906 	br	4000f1c <__sfvwrite_r+0x114>
 4001038:	ac400017 	ldw	r17,0(r21)
 400103c:	ac000117 	ldw	r16,4(r21)
 4001040:	ad400204 	addi	r21,r21,8
 4001044:	003f8a06 	br	4000e70 <__sfvwrite_r+0x68>
 4001048:	91400417 	ldw	r5,16(r18)
 400104c:	e009883a 	mov	r4,fp
 4001050:	4002a040 	call	4002a04 <_free_r>
 4001054:	00800304 	movi	r2,12
 4001058:	e0800015 	stw	r2,0(fp)
 400105c:	9080030b 	ldhu	r2,12(r18)
 4001060:	013fffc4 	movi	r4,-1
 4001064:	10801014 	ori	r2,r2,64
 4001068:	9080030d 	sth	r2,12(r18)
 400106c:	003f9306 	br	4000ebc <__sfvwrite_r+0xb4>
 4001070:	0027883a 	mov	r19,zero
 4001074:	002f883a 	mov	r23,zero
 4001078:	d8000015 	stw	zero,0(sp)
 400107c:	0029883a 	mov	r20,zero
 4001080:	98001e26 	beq	r19,zero,40010fc <__sfvwrite_r+0x2f4>
 4001084:	d8c00017 	ldw	r3,0(sp)
 4001088:	1804c03a 	cmpne	r2,r3,zero
 400108c:	10005e26 	beq	r2,zero,4001208 <__sfvwrite_r+0x400>
 4001090:	9821883a 	mov	r16,r19
 4001094:	a4c0012e 	bgeu	r20,r19,400109c <__sfvwrite_r+0x294>
 4001098:	a021883a 	mov	r16,r20
 400109c:	91000017 	ldw	r4,0(r18)
 40010a0:	90800417 	ldw	r2,16(r18)
 40010a4:	91800217 	ldw	r6,8(r18)
 40010a8:	91c00517 	ldw	r7,20(r18)
 40010ac:	1100022e 	bgeu	r2,r4,40010b8 <__sfvwrite_r+0x2b0>
 40010b0:	31e3883a 	add	r17,r6,r7
 40010b4:	8c001616 	blt	r17,r16,4001110 <__sfvwrite_r+0x308>
 40010b8:	81c03816 	blt	r16,r7,400119c <__sfvwrite_r+0x394>
 40010bc:	90c00917 	ldw	r3,36(r18)
 40010c0:	91400717 	ldw	r5,28(r18)
 40010c4:	e009883a 	mov	r4,fp
 40010c8:	b80d883a 	mov	r6,r23
 40010cc:	183ee83a 	callr	r3
 40010d0:	1023883a 	mov	r17,r2
 40010d4:	00bfe10e 	bge	zero,r2,400105c <__sfvwrite_r+0x254>
 40010d8:	a469c83a 	sub	r20,r20,r17
 40010dc:	a0001826 	beq	r20,zero,4001140 <__sfvwrite_r+0x338>
 40010e0:	b0800217 	ldw	r2,8(r22)
 40010e4:	1445c83a 	sub	r2,r2,r17
 40010e8:	b0800215 	stw	r2,8(r22)
 40010ec:	103f7226 	beq	r2,zero,4000eb8 <__sfvwrite_r+0xb0>
 40010f0:	9c67c83a 	sub	r19,r19,r17
 40010f4:	bc6f883a 	add	r23,r23,r17
 40010f8:	983fe21e 	bne	r19,zero,4001084 <__sfvwrite_r+0x27c>
 40010fc:	adc00017 	ldw	r23,0(r21)
 4001100:	acc00117 	ldw	r19,4(r21)
 4001104:	ad400204 	addi	r21,r21,8
 4001108:	d8000015 	stw	zero,0(sp)
 400110c:	003fdc06 	br	4001080 <__sfvwrite_r+0x278>
 4001110:	b80b883a 	mov	r5,r23
 4001114:	880d883a 	mov	r6,r17
 4001118:	4001b680 	call	4001b68 <memmove>
 400111c:	90c00017 	ldw	r3,0(r18)
 4001120:	e009883a 	mov	r4,fp
 4001124:	900b883a 	mov	r5,r18
 4001128:	1c47883a 	add	r3,r3,r17
 400112c:	90c00015 	stw	r3,0(r18)
 4001130:	40023e80 	call	40023e8 <_fflush_r>
 4001134:	103fc91e 	bne	r2,zero,400105c <__sfvwrite_r+0x254>
 4001138:	a469c83a 	sub	r20,r20,r17
 400113c:	a03fe81e 	bne	r20,zero,40010e0 <__sfvwrite_r+0x2d8>
 4001140:	e009883a 	mov	r4,fp
 4001144:	900b883a 	mov	r5,r18
 4001148:	40023e80 	call	40023e8 <_fflush_r>
 400114c:	103fc31e 	bne	r2,zero,400105c <__sfvwrite_r+0x254>
 4001150:	d8000015 	stw	zero,0(sp)
 4001154:	003fe206 	br	40010e0 <__sfvwrite_r+0x2d8>
 4001158:	91000017 	ldw	r4,0(r18)
 400115c:	90800417 	ldw	r2,16(r18)
 4001160:	1100022e 	bgeu	r2,r4,400116c <__sfvwrite_r+0x364>
 4001164:	8023883a 	mov	r17,r16
 4001168:	85003136 	bltu	r16,r20,4001230 <__sfvwrite_r+0x428>
 400116c:	91c00517 	ldw	r7,20(r18)
 4001170:	a1c01836 	bltu	r20,r7,40011d4 <__sfvwrite_r+0x3cc>
 4001174:	90c00917 	ldw	r3,36(r18)
 4001178:	91400717 	ldw	r5,28(r18)
 400117c:	e009883a 	mov	r4,fp
 4001180:	b80d883a 	mov	r6,r23
 4001184:	183ee83a 	callr	r3
 4001188:	1021883a 	mov	r16,r2
 400118c:	00bfb30e 	bge	zero,r2,400105c <__sfvwrite_r+0x254>
 4001190:	1023883a 	mov	r17,r2
 4001194:	1027883a 	mov	r19,r2
 4001198:	003f9b06 	br	4001008 <__sfvwrite_r+0x200>
 400119c:	b80b883a 	mov	r5,r23
 40011a0:	800d883a 	mov	r6,r16
 40011a4:	4001b680 	call	4001b68 <memmove>
 40011a8:	90c00217 	ldw	r3,8(r18)
 40011ac:	90800017 	ldw	r2,0(r18)
 40011b0:	8023883a 	mov	r17,r16
 40011b4:	1c07c83a 	sub	r3,r3,r16
 40011b8:	1405883a 	add	r2,r2,r16
 40011bc:	90c00215 	stw	r3,8(r18)
 40011c0:	90800015 	stw	r2,0(r18)
 40011c4:	003fc406 	br	40010d8 <__sfvwrite_r+0x2d0>
 40011c8:	a00d883a 	mov	r6,r20
 40011cc:	a021883a 	mov	r16,r20
 40011d0:	003f8106 	br	4000fd8 <__sfvwrite_r+0x1d0>
 40011d4:	b80b883a 	mov	r5,r23
 40011d8:	a00d883a 	mov	r6,r20
 40011dc:	4001b680 	call	4001b68 <memmove>
 40011e0:	90c00217 	ldw	r3,8(r18)
 40011e4:	90800017 	ldw	r2,0(r18)
 40011e8:	a021883a 	mov	r16,r20
 40011ec:	1d07c83a 	sub	r3,r3,r20
 40011f0:	1505883a 	add	r2,r2,r20
 40011f4:	a023883a 	mov	r17,r20
 40011f8:	a027883a 	mov	r19,r20
 40011fc:	90c00215 	stw	r3,8(r18)
 4001200:	90800015 	stw	r2,0(r18)
 4001204:	003f8006 	br	4001008 <__sfvwrite_r+0x200>
 4001208:	b809883a 	mov	r4,r23
 400120c:	01400284 	movi	r5,10
 4001210:	980d883a 	mov	r6,r19
 4001214:	40019e40 	call	40019e4 <memchr>
 4001218:	10001726 	beq	r2,zero,4001278 <__sfvwrite_r+0x470>
 400121c:	15c5c83a 	sub	r2,r2,r23
 4001220:	15000044 	addi	r20,r2,1
 4001224:	00800044 	movi	r2,1
 4001228:	d8800015 	stw	r2,0(sp)
 400122c:	003f9806 	br	4001090 <__sfvwrite_r+0x288>
 4001230:	b80b883a 	mov	r5,r23
 4001234:	800d883a 	mov	r6,r16
 4001238:	4001b680 	call	4001b68 <memmove>
 400123c:	90c00017 	ldw	r3,0(r18)
 4001240:	e009883a 	mov	r4,fp
 4001244:	900b883a 	mov	r5,r18
 4001248:	1c07883a 	add	r3,r3,r16
 400124c:	90c00015 	stw	r3,0(r18)
 4001250:	8027883a 	mov	r19,r16
 4001254:	40023e80 	call	40023e8 <_fflush_r>
 4001258:	103f6b26 	beq	r2,zero,4001008 <__sfvwrite_r+0x200>
 400125c:	003f7f06 	br	400105c <__sfvwrite_r+0x254>
 4001260:	400b883a 	mov	r5,r8
 4001264:	e009883a 	mov	r4,fp
 4001268:	4001c480 	call	4001c48 <_realloc_r>
 400126c:	103f7626 	beq	r2,zero,4001048 <__sfvwrite_r+0x240>
 4001270:	1023883a 	mov	r17,r2
 4001274:	003f5006 	br	4000fb8 <__sfvwrite_r+0x1b0>
 4001278:	00c00044 	movi	r3,1
 400127c:	9d000044 	addi	r20,r19,1
 4001280:	d8c00015 	stw	r3,0(sp)
 4001284:	003f8206 	br	4001090 <__sfvwrite_r+0x288>
 4001288:	9080030b 	ldhu	r2,12(r18)
 400128c:	00c00244 	movi	r3,9
 4001290:	013fffc4 	movi	r4,-1
 4001294:	10801014 	ori	r2,r2,64
 4001298:	9080030d 	sth	r2,12(r18)
 400129c:	e0c00015 	stw	r3,0(fp)
 40012a0:	003f0606 	br	4000ebc <__sfvwrite_r+0xb4>

040012a4 <_malloc_r>:
 40012a4:	defff604 	addi	sp,sp,-40
 40012a8:	28c002c4 	addi	r3,r5,11
 40012ac:	00800584 	movi	r2,22
 40012b0:	dc800215 	stw	r18,8(sp)
 40012b4:	dfc00915 	stw	ra,36(sp)
 40012b8:	df000815 	stw	fp,32(sp)
 40012bc:	ddc00715 	stw	r23,28(sp)
 40012c0:	dd800615 	stw	r22,24(sp)
 40012c4:	dd400515 	stw	r21,20(sp)
 40012c8:	dd000415 	stw	r20,16(sp)
 40012cc:	dcc00315 	stw	r19,12(sp)
 40012d0:	dc400115 	stw	r17,4(sp)
 40012d4:	dc000015 	stw	r16,0(sp)
 40012d8:	2025883a 	mov	r18,r4
 40012dc:	10c01236 	bltu	r2,r3,4001328 <_malloc_r+0x84>
 40012e0:	04400404 	movi	r17,16
 40012e4:	8940142e 	bgeu	r17,r5,4001338 <_malloc_r+0x94>
 40012e8:	00800304 	movi	r2,12
 40012ec:	0007883a 	mov	r3,zero
 40012f0:	90800015 	stw	r2,0(r18)
 40012f4:	1805883a 	mov	r2,r3
 40012f8:	dfc00917 	ldw	ra,36(sp)
 40012fc:	df000817 	ldw	fp,32(sp)
 4001300:	ddc00717 	ldw	r23,28(sp)
 4001304:	dd800617 	ldw	r22,24(sp)
 4001308:	dd400517 	ldw	r21,20(sp)
 400130c:	dd000417 	ldw	r20,16(sp)
 4001310:	dcc00317 	ldw	r19,12(sp)
 4001314:	dc800217 	ldw	r18,8(sp)
 4001318:	dc400117 	ldw	r17,4(sp)
 400131c:	dc000017 	ldw	r16,0(sp)
 4001320:	dec00a04 	addi	sp,sp,40
 4001324:	f800283a 	ret
 4001328:	00bffe04 	movi	r2,-8
 400132c:	18a2703a 	and	r17,r3,r2
 4001330:	883fed16 	blt	r17,zero,40012e8 <_malloc_r+0x44>
 4001334:	897fec36 	bltu	r17,r5,40012e8 <_malloc_r+0x44>
 4001338:	9009883a 	mov	r4,r18
 400133c:	4003e340 	call	4003e34 <__malloc_lock>
 4001340:	00807dc4 	movi	r2,503
 4001344:	14402b2e 	bgeu	r2,r17,40013f4 <_malloc_r+0x150>
 4001348:	8806d27a 	srli	r3,r17,9
 400134c:	18003f1e 	bne	r3,zero,400144c <_malloc_r+0x1a8>
 4001350:	880cd0fa 	srli	r6,r17,3
 4001354:	300490fa 	slli	r2,r6,3
 4001358:	02c10074 	movhi	r11,1025
 400135c:	5ae0f204 	addi	r11,r11,-31800
 4001360:	12cb883a 	add	r5,r2,r11
 4001364:	2c000317 	ldw	r16,12(r5)
 4001368:	580f883a 	mov	r7,r11
 400136c:	2c00041e 	bne	r5,r16,4001380 <_malloc_r+0xdc>
 4001370:	00000a06 	br	400139c <_malloc_r+0xf8>
 4001374:	1800860e 	bge	r3,zero,4001590 <_malloc_r+0x2ec>
 4001378:	84000317 	ldw	r16,12(r16)
 400137c:	2c000726 	beq	r5,r16,400139c <_malloc_r+0xf8>
 4001380:	80800117 	ldw	r2,4(r16)
 4001384:	00ffff04 	movi	r3,-4
 4001388:	10c8703a 	and	r4,r2,r3
 400138c:	2447c83a 	sub	r3,r4,r17
 4001390:	008003c4 	movi	r2,15
 4001394:	10fff70e 	bge	r2,r3,4001374 <_malloc_r+0xd0>
 4001398:	31bfffc4 	addi	r6,r6,-1
 400139c:	32400044 	addi	r9,r6,1
 40013a0:	02810074 	movhi	r10,1025
 40013a4:	52a0f404 	addi	r10,r10,-31792
 40013a8:	54000217 	ldw	r16,8(r10)
 40013ac:	8280a026 	beq	r16,r10,4001630 <_malloc_r+0x38c>
 40013b0:	80800117 	ldw	r2,4(r16)
 40013b4:	00ffff04 	movi	r3,-4
 40013b8:	10ca703a 	and	r5,r2,r3
 40013bc:	2c4dc83a 	sub	r6,r5,r17
 40013c0:	008003c4 	movi	r2,15
 40013c4:	11808316 	blt	r2,r6,40015d4 <_malloc_r+0x330>
 40013c8:	52800315 	stw	r10,12(r10)
 40013cc:	52800215 	stw	r10,8(r10)
 40013d0:	30002916 	blt	r6,zero,4001478 <_malloc_r+0x1d4>
 40013d4:	8147883a 	add	r3,r16,r5
 40013d8:	18800117 	ldw	r2,4(r3)
 40013dc:	9009883a 	mov	r4,r18
 40013e0:	10800054 	ori	r2,r2,1
 40013e4:	18800115 	stw	r2,4(r3)
 40013e8:	4003e540 	call	4003e54 <__malloc_unlock>
 40013ec:	80c00204 	addi	r3,r16,8
 40013f0:	003fc006 	br	40012f4 <_malloc_r+0x50>
 40013f4:	02c10074 	movhi	r11,1025
 40013f8:	5ae0f204 	addi	r11,r11,-31800
 40013fc:	8ac5883a 	add	r2,r17,r11
 4001400:	14000317 	ldw	r16,12(r2)
 4001404:	580f883a 	mov	r7,r11
 4001408:	8806d0fa 	srli	r3,r17,3
 400140c:	14006c26 	beq	r2,r16,40015c0 <_malloc_r+0x31c>
 4001410:	80c00117 	ldw	r3,4(r16)
 4001414:	00bfff04 	movi	r2,-4
 4001418:	81800317 	ldw	r6,12(r16)
 400141c:	1886703a 	and	r3,r3,r2
 4001420:	80c7883a 	add	r3,r16,r3
 4001424:	18800117 	ldw	r2,4(r3)
 4001428:	81400217 	ldw	r5,8(r16)
 400142c:	9009883a 	mov	r4,r18
 4001430:	10800054 	ori	r2,r2,1
 4001434:	18800115 	stw	r2,4(r3)
 4001438:	31400215 	stw	r5,8(r6)
 400143c:	29800315 	stw	r6,12(r5)
 4001440:	4003e540 	call	4003e54 <__malloc_unlock>
 4001444:	80c00204 	addi	r3,r16,8
 4001448:	003faa06 	br	40012f4 <_malloc_r+0x50>
 400144c:	00800104 	movi	r2,4
 4001450:	10c0052e 	bgeu	r2,r3,4001468 <_malloc_r+0x1c4>
 4001454:	00800504 	movi	r2,20
 4001458:	10c07836 	bltu	r2,r3,400163c <_malloc_r+0x398>
 400145c:	198016c4 	addi	r6,r3,91
 4001460:	300490fa 	slli	r2,r6,3
 4001464:	003fbc06 	br	4001358 <_malloc_r+0xb4>
 4001468:	8804d1ba 	srli	r2,r17,6
 400146c:	11800e04 	addi	r6,r2,56
 4001470:	300490fa 	slli	r2,r6,3
 4001474:	003fb806 	br	4001358 <_malloc_r+0xb4>
 4001478:	00807fc4 	movi	r2,511
 400147c:	1140bb36 	bltu	r2,r5,400176c <_malloc_r+0x4c8>
 4001480:	2806d0fa 	srli	r3,r5,3
 4001484:	573ffe04 	addi	fp,r10,-8
 4001488:	00800044 	movi	r2,1
 400148c:	180890fa 	slli	r4,r3,3
 4001490:	1807d0ba 	srai	r3,r3,2
 4001494:	e1c00117 	ldw	r7,4(fp)
 4001498:	5909883a 	add	r4,r11,r4
 400149c:	21400217 	ldw	r5,8(r4)
 40014a0:	10c4983a 	sll	r2,r2,r3
 40014a4:	81000315 	stw	r4,12(r16)
 40014a8:	81400215 	stw	r5,8(r16)
 40014ac:	388eb03a 	or	r7,r7,r2
 40014b0:	2c000315 	stw	r16,12(r5)
 40014b4:	24000215 	stw	r16,8(r4)
 40014b8:	e1c00115 	stw	r7,4(fp)
 40014bc:	4807883a 	mov	r3,r9
 40014c0:	4800cd16 	blt	r9,zero,40017f8 <_malloc_r+0x554>
 40014c4:	1807d0ba 	srai	r3,r3,2
 40014c8:	00800044 	movi	r2,1
 40014cc:	10c8983a 	sll	r4,r2,r3
 40014d0:	39004436 	bltu	r7,r4,40015e4 <_malloc_r+0x340>
 40014d4:	21c4703a 	and	r2,r4,r7
 40014d8:	10000a1e 	bne	r2,zero,4001504 <_malloc_r+0x260>
 40014dc:	2109883a 	add	r4,r4,r4
 40014e0:	00bfff04 	movi	r2,-4
 40014e4:	4884703a 	and	r2,r9,r2
 40014e8:	3906703a 	and	r3,r7,r4
 40014ec:	12400104 	addi	r9,r2,4
 40014f0:	1800041e 	bne	r3,zero,4001504 <_malloc_r+0x260>
 40014f4:	2109883a 	add	r4,r4,r4
 40014f8:	3904703a 	and	r2,r7,r4
 40014fc:	4a400104 	addi	r9,r9,4
 4001500:	103ffc26 	beq	r2,zero,40014f4 <_malloc_r+0x250>
 4001504:	480490fa 	slli	r2,r9,3
 4001508:	4819883a 	mov	r12,r9
 400150c:	023fff04 	movi	r8,-4
 4001510:	589b883a 	add	r13,r11,r2
 4001514:	6807883a 	mov	r3,r13
 4001518:	014003c4 	movi	r5,15
 400151c:	1c000317 	ldw	r16,12(r3)
 4001520:	1c00041e 	bne	r3,r16,4001534 <_malloc_r+0x290>
 4001524:	0000a706 	br	40017c4 <_malloc_r+0x520>
 4001528:	3000ab0e 	bge	r6,zero,40017d8 <_malloc_r+0x534>
 400152c:	84000317 	ldw	r16,12(r16)
 4001530:	1c00a426 	beq	r3,r16,40017c4 <_malloc_r+0x520>
 4001534:	80800117 	ldw	r2,4(r16)
 4001538:	1204703a 	and	r2,r2,r8
 400153c:	144dc83a 	sub	r6,r2,r17
 4001540:	29bff90e 	bge	r5,r6,4001528 <_malloc_r+0x284>
 4001544:	81000317 	ldw	r4,12(r16)
 4001548:	80c00217 	ldw	r3,8(r16)
 400154c:	89400054 	ori	r5,r17,1
 4001550:	8445883a 	add	r2,r16,r17
 4001554:	20c00215 	stw	r3,8(r4)
 4001558:	19000315 	stw	r4,12(r3)
 400155c:	81400115 	stw	r5,4(r16)
 4001560:	1187883a 	add	r3,r2,r6
 4001564:	31000054 	ori	r4,r6,1
 4001568:	50800315 	stw	r2,12(r10)
 400156c:	50800215 	stw	r2,8(r10)
 4001570:	19800015 	stw	r6,0(r3)
 4001574:	11000115 	stw	r4,4(r2)
 4001578:	12800215 	stw	r10,8(r2)
 400157c:	12800315 	stw	r10,12(r2)
 4001580:	9009883a 	mov	r4,r18
 4001584:	4003e540 	call	4003e54 <__malloc_unlock>
 4001588:	80c00204 	addi	r3,r16,8
 400158c:	003f5906 	br	40012f4 <_malloc_r+0x50>
 4001590:	8109883a 	add	r4,r16,r4
 4001594:	20800117 	ldw	r2,4(r4)
 4001598:	80c00217 	ldw	r3,8(r16)
 400159c:	81400317 	ldw	r5,12(r16)
 40015a0:	10800054 	ori	r2,r2,1
 40015a4:	20800115 	stw	r2,4(r4)
 40015a8:	28c00215 	stw	r3,8(r5)
 40015ac:	19400315 	stw	r5,12(r3)
 40015b0:	9009883a 	mov	r4,r18
 40015b4:	4003e540 	call	4003e54 <__malloc_unlock>
 40015b8:	80c00204 	addi	r3,r16,8
 40015bc:	003f4d06 	br	40012f4 <_malloc_r+0x50>
 40015c0:	80800204 	addi	r2,r16,8
 40015c4:	14000317 	ldw	r16,12(r2)
 40015c8:	143f911e 	bne	r2,r16,4001410 <_malloc_r+0x16c>
 40015cc:	1a400084 	addi	r9,r3,2
 40015d0:	003f7306 	br	40013a0 <_malloc_r+0xfc>
 40015d4:	88c00054 	ori	r3,r17,1
 40015d8:	8445883a 	add	r2,r16,r17
 40015dc:	80c00115 	stw	r3,4(r16)
 40015e0:	003fdf06 	br	4001560 <_malloc_r+0x2bc>
 40015e4:	e4000217 	ldw	r16,8(fp)
 40015e8:	00bfff04 	movi	r2,-4
 40015ec:	80c00117 	ldw	r3,4(r16)
 40015f0:	802d883a 	mov	r22,r16
 40015f4:	18aa703a 	and	r21,r3,r2
 40015f8:	ac401636 	bltu	r21,r17,4001654 <_malloc_r+0x3b0>
 40015fc:	ac49c83a 	sub	r4,r21,r17
 4001600:	008003c4 	movi	r2,15
 4001604:	1100130e 	bge	r2,r4,4001654 <_malloc_r+0x3b0>
 4001608:	88800054 	ori	r2,r17,1
 400160c:	8447883a 	add	r3,r16,r17
 4001610:	80800115 	stw	r2,4(r16)
 4001614:	20800054 	ori	r2,r4,1
 4001618:	18800115 	stw	r2,4(r3)
 400161c:	e0c00215 	stw	r3,8(fp)
 4001620:	9009883a 	mov	r4,r18
 4001624:	4003e540 	call	4003e54 <__malloc_unlock>
 4001628:	80c00204 	addi	r3,r16,8
 400162c:	003f3106 	br	40012f4 <_malloc_r+0x50>
 4001630:	39c00117 	ldw	r7,4(r7)
 4001634:	573ffe04 	addi	fp,r10,-8
 4001638:	003fa006 	br	40014bc <_malloc_r+0x218>
 400163c:	00801504 	movi	r2,84
 4001640:	10c06736 	bltu	r2,r3,40017e0 <_malloc_r+0x53c>
 4001644:	8804d33a 	srli	r2,r17,12
 4001648:	11801b84 	addi	r6,r2,110
 400164c:	300490fa 	slli	r2,r6,3
 4001650:	003f4106 	br	4001358 <_malloc_r+0xb4>
 4001654:	d0a71f17 	ldw	r2,-25476(gp)
 4001658:	d0e00317 	ldw	r3,-32756(gp)
 400165c:	053fffc4 	movi	r20,-1
 4001660:	10800404 	addi	r2,r2,16
 4001664:	88a7883a 	add	r19,r17,r2
 4001668:	1d000326 	beq	r3,r20,4001678 <_malloc_r+0x3d4>
 400166c:	98c3ffc4 	addi	r3,r19,4095
 4001670:	00bc0004 	movi	r2,-4096
 4001674:	18a6703a 	and	r19,r3,r2
 4001678:	9009883a 	mov	r4,r18
 400167c:	980b883a 	mov	r5,r19
 4001680:	400223c0 	call	400223c <_sbrk_r>
 4001684:	1009883a 	mov	r4,r2
 4001688:	15000426 	beq	r2,r20,400169c <_malloc_r+0x3f8>
 400168c:	854b883a 	add	r5,r16,r21
 4001690:	1029883a 	mov	r20,r2
 4001694:	11405a2e 	bgeu	r2,r5,4001800 <_malloc_r+0x55c>
 4001698:	87000c26 	beq	r16,fp,40016cc <_malloc_r+0x428>
 400169c:	e4000217 	ldw	r16,8(fp)
 40016a0:	80c00117 	ldw	r3,4(r16)
 40016a4:	00bfff04 	movi	r2,-4
 40016a8:	1884703a 	and	r2,r3,r2
 40016ac:	14400336 	bltu	r2,r17,40016bc <_malloc_r+0x418>
 40016b0:	1449c83a 	sub	r4,r2,r17
 40016b4:	008003c4 	movi	r2,15
 40016b8:	113fd316 	blt	r2,r4,4001608 <_malloc_r+0x364>
 40016bc:	9009883a 	mov	r4,r18
 40016c0:	4003e540 	call	4003e54 <__malloc_unlock>
 40016c4:	0007883a 	mov	r3,zero
 40016c8:	003f0a06 	br	40012f4 <_malloc_r+0x50>
 40016cc:	05c10074 	movhi	r23,1025
 40016d0:	bdee1804 	addi	r23,r23,-18336
 40016d4:	b8800017 	ldw	r2,0(r23)
 40016d8:	988d883a 	add	r6,r19,r2
 40016dc:	b9800015 	stw	r6,0(r23)
 40016e0:	d0e00317 	ldw	r3,-32756(gp)
 40016e4:	00bfffc4 	movi	r2,-1
 40016e8:	18808e26 	beq	r3,r2,4001924 <_malloc_r+0x680>
 40016ec:	2145c83a 	sub	r2,r4,r5
 40016f0:	3085883a 	add	r2,r6,r2
 40016f4:	b8800015 	stw	r2,0(r23)
 40016f8:	20c001cc 	andi	r3,r4,7
 40016fc:	18005f1e 	bne	r3,zero,400187c <_malloc_r+0x5d8>
 4001700:	000b883a 	mov	r5,zero
 4001704:	a4c5883a 	add	r2,r20,r19
 4001708:	1083ffcc 	andi	r2,r2,4095
 400170c:	00c40004 	movi	r3,4096
 4001710:	1887c83a 	sub	r3,r3,r2
 4001714:	28e7883a 	add	r19,r5,r3
 4001718:	9009883a 	mov	r4,r18
 400171c:	980b883a 	mov	r5,r19
 4001720:	400223c0 	call	400223c <_sbrk_r>
 4001724:	1007883a 	mov	r3,r2
 4001728:	00bfffc4 	movi	r2,-1
 400172c:	18807a26 	beq	r3,r2,4001918 <_malloc_r+0x674>
 4001730:	1d05c83a 	sub	r2,r3,r20
 4001734:	9885883a 	add	r2,r19,r2
 4001738:	10c00054 	ori	r3,r2,1
 400173c:	b8800017 	ldw	r2,0(r23)
 4001740:	a021883a 	mov	r16,r20
 4001744:	a0c00115 	stw	r3,4(r20)
 4001748:	9885883a 	add	r2,r19,r2
 400174c:	b8800015 	stw	r2,0(r23)
 4001750:	e5000215 	stw	r20,8(fp)
 4001754:	b7003626 	beq	r22,fp,4001830 <_malloc_r+0x58c>
 4001758:	018003c4 	movi	r6,15
 400175c:	35404b36 	bltu	r6,r21,400188c <_malloc_r+0x5e8>
 4001760:	00800044 	movi	r2,1
 4001764:	a0800115 	stw	r2,4(r20)
 4001768:	003fcd06 	br	40016a0 <_malloc_r+0x3fc>
 400176c:	2808d27a 	srli	r4,r5,9
 4001770:	2000371e 	bne	r4,zero,4001850 <_malloc_r+0x5ac>
 4001774:	2808d0fa 	srli	r4,r5,3
 4001778:	200690fa 	slli	r3,r4,3
 400177c:	1ad1883a 	add	r8,r3,r11
 4001780:	41800217 	ldw	r6,8(r8)
 4001784:	41805b26 	beq	r8,r6,40018f4 <_malloc_r+0x650>
 4001788:	30800117 	ldw	r2,4(r6)
 400178c:	00ffff04 	movi	r3,-4
 4001790:	10c4703a 	and	r2,r2,r3
 4001794:	2880022e 	bgeu	r5,r2,40017a0 <_malloc_r+0x4fc>
 4001798:	31800217 	ldw	r6,8(r6)
 400179c:	41bffa1e 	bne	r8,r6,4001788 <_malloc_r+0x4e4>
 40017a0:	32000317 	ldw	r8,12(r6)
 40017a4:	39c00117 	ldw	r7,4(r7)
 40017a8:	82000315 	stw	r8,12(r16)
 40017ac:	81800215 	stw	r6,8(r16)
 40017b0:	07010074 	movhi	fp,1025
 40017b4:	e720f204 	addi	fp,fp,-31800
 40017b8:	34000315 	stw	r16,12(r6)
 40017bc:	44000215 	stw	r16,8(r8)
 40017c0:	003f3e06 	br	40014bc <_malloc_r+0x218>
 40017c4:	63000044 	addi	r12,r12,1
 40017c8:	608000cc 	andi	r2,r12,3
 40017cc:	10005d26 	beq	r2,zero,4001944 <_malloc_r+0x6a0>
 40017d0:	18c00204 	addi	r3,r3,8
 40017d4:	003f5106 	br	400151c <_malloc_r+0x278>
 40017d8:	8089883a 	add	r4,r16,r2
 40017dc:	003f6d06 	br	4001594 <_malloc_r+0x2f0>
 40017e0:	00805504 	movi	r2,340
 40017e4:	10c02036 	bltu	r2,r3,4001868 <_malloc_r+0x5c4>
 40017e8:	8804d3fa 	srli	r2,r17,15
 40017ec:	11801dc4 	addi	r6,r2,119
 40017f0:	300490fa 	slli	r2,r6,3
 40017f4:	003ed806 	br	4001358 <_malloc_r+0xb4>
 40017f8:	48c000c4 	addi	r3,r9,3
 40017fc:	003f3106 	br	40014c4 <_malloc_r+0x220>
 4001800:	05c10074 	movhi	r23,1025
 4001804:	bdee1804 	addi	r23,r23,-18336
 4001808:	b8800017 	ldw	r2,0(r23)
 400180c:	988d883a 	add	r6,r19,r2
 4001810:	b9800015 	stw	r6,0(r23)
 4001814:	293fb21e 	bne	r5,r4,40016e0 <_malloc_r+0x43c>
 4001818:	2083ffcc 	andi	r2,r4,4095
 400181c:	103fb01e 	bne	r2,zero,40016e0 <_malloc_r+0x43c>
 4001820:	e4000217 	ldw	r16,8(fp)
 4001824:	9d45883a 	add	r2,r19,r21
 4001828:	10800054 	ori	r2,r2,1
 400182c:	80800115 	stw	r2,4(r16)
 4001830:	b8c00017 	ldw	r3,0(r23)
 4001834:	d0a72017 	ldw	r2,-25472(gp)
 4001838:	10c0012e 	bgeu	r2,r3,4001840 <_malloc_r+0x59c>
 400183c:	d0e72015 	stw	r3,-25472(gp)
 4001840:	d0a72117 	ldw	r2,-25468(gp)
 4001844:	10ff962e 	bgeu	r2,r3,40016a0 <_malloc_r+0x3fc>
 4001848:	d0e72115 	stw	r3,-25468(gp)
 400184c:	003f9406 	br	40016a0 <_malloc_r+0x3fc>
 4001850:	00800104 	movi	r2,4
 4001854:	11001e36 	bltu	r2,r4,40018d0 <_malloc_r+0x62c>
 4001858:	2804d1ba 	srli	r2,r5,6
 400185c:	11000e04 	addi	r4,r2,56
 4001860:	200690fa 	slli	r3,r4,3
 4001864:	003fc506 	br	400177c <_malloc_r+0x4d8>
 4001868:	00815504 	movi	r2,1364
 400186c:	10c01d2e 	bgeu	r2,r3,40018e4 <_malloc_r+0x640>
 4001870:	01801f84 	movi	r6,126
 4001874:	0080fc04 	movi	r2,1008
 4001878:	003eb706 	br	4001358 <_malloc_r+0xb4>
 400187c:	00800204 	movi	r2,8
 4001880:	10cbc83a 	sub	r5,r2,r3
 4001884:	2169883a 	add	r20,r4,r5
 4001888:	003f9e06 	br	4001704 <_malloc_r+0x460>
 400188c:	00bffe04 	movi	r2,-8
 4001890:	a93ffd04 	addi	r4,r21,-12
 4001894:	2088703a 	and	r4,r4,r2
 4001898:	b10b883a 	add	r5,r22,r4
 400189c:	00c00144 	movi	r3,5
 40018a0:	28c00215 	stw	r3,8(r5)
 40018a4:	28c00115 	stw	r3,4(r5)
 40018a8:	b0800117 	ldw	r2,4(r22)
 40018ac:	1080004c 	andi	r2,r2,1
 40018b0:	2084b03a 	or	r2,r4,r2
 40018b4:	b0800115 	stw	r2,4(r22)
 40018b8:	313fdd2e 	bgeu	r6,r4,4001830 <_malloc_r+0x58c>
 40018bc:	b1400204 	addi	r5,r22,8
 40018c0:	9009883a 	mov	r4,r18
 40018c4:	4002a040 	call	4002a04 <_free_r>
 40018c8:	e4000217 	ldw	r16,8(fp)
 40018cc:	003fd806 	br	4001830 <_malloc_r+0x58c>
 40018d0:	00800504 	movi	r2,20
 40018d4:	11001536 	bltu	r2,r4,400192c <_malloc_r+0x688>
 40018d8:	210016c4 	addi	r4,r4,91
 40018dc:	200690fa 	slli	r3,r4,3
 40018e0:	003fa606 	br	400177c <_malloc_r+0x4d8>
 40018e4:	8804d4ba 	srli	r2,r17,18
 40018e8:	11801f04 	addi	r6,r2,124
 40018ec:	300490fa 	slli	r2,r6,3
 40018f0:	003e9906 	br	4001358 <_malloc_r+0xb4>
 40018f4:	2009d0ba 	srai	r4,r4,2
 40018f8:	01410074 	movhi	r5,1025
 40018fc:	2960f204 	addi	r5,r5,-31800
 4001900:	00c00044 	movi	r3,1
 4001904:	28800117 	ldw	r2,4(r5)
 4001908:	1906983a 	sll	r3,r3,r4
 400190c:	10c4b03a 	or	r2,r2,r3
 4001910:	28800115 	stw	r2,4(r5)
 4001914:	003fa306 	br	40017a4 <_malloc_r+0x500>
 4001918:	0027883a 	mov	r19,zero
 400191c:	00c00044 	movi	r3,1
 4001920:	003f8606 	br	400173c <_malloc_r+0x498>
 4001924:	d1200315 	stw	r4,-32756(gp)
 4001928:	003f7306 	br	40016f8 <_malloc_r+0x454>
 400192c:	00801504 	movi	r2,84
 4001930:	11001936 	bltu	r2,r4,4001998 <_malloc_r+0x6f4>
 4001934:	2804d33a 	srli	r2,r5,12
 4001938:	11001b84 	addi	r4,r2,110
 400193c:	200690fa 	slli	r3,r4,3
 4001940:	003f8e06 	br	400177c <_malloc_r+0x4d8>
 4001944:	480b883a 	mov	r5,r9
 4001948:	6807883a 	mov	r3,r13
 400194c:	288000cc 	andi	r2,r5,3
 4001950:	18fffe04 	addi	r3,r3,-8
 4001954:	297fffc4 	addi	r5,r5,-1
 4001958:	10001526 	beq	r2,zero,40019b0 <_malloc_r+0x70c>
 400195c:	18800217 	ldw	r2,8(r3)
 4001960:	10fffa26 	beq	r2,r3,400194c <_malloc_r+0x6a8>
 4001964:	2109883a 	add	r4,r4,r4
 4001968:	393f1e36 	bltu	r7,r4,40015e4 <_malloc_r+0x340>
 400196c:	203f1d26 	beq	r4,zero,40015e4 <_malloc_r+0x340>
 4001970:	21c4703a 	and	r2,r4,r7
 4001974:	10000226 	beq	r2,zero,4001980 <_malloc_r+0x6dc>
 4001978:	6013883a 	mov	r9,r12
 400197c:	003ee106 	br	4001504 <_malloc_r+0x260>
 4001980:	2109883a 	add	r4,r4,r4
 4001984:	3904703a 	and	r2,r7,r4
 4001988:	63000104 	addi	r12,r12,4
 400198c:	103ffc26 	beq	r2,zero,4001980 <_malloc_r+0x6dc>
 4001990:	6013883a 	mov	r9,r12
 4001994:	003edb06 	br	4001504 <_malloc_r+0x260>
 4001998:	00805504 	movi	r2,340
 400199c:	11000836 	bltu	r2,r4,40019c0 <_malloc_r+0x71c>
 40019a0:	2804d3fa 	srli	r2,r5,15
 40019a4:	11001dc4 	addi	r4,r2,119
 40019a8:	200690fa 	slli	r3,r4,3
 40019ac:	003f7306 	br	400177c <_malloc_r+0x4d8>
 40019b0:	0104303a 	nor	r2,zero,r4
 40019b4:	388e703a 	and	r7,r7,r2
 40019b8:	e1c00115 	stw	r7,4(fp)
 40019bc:	003fe906 	br	4001964 <_malloc_r+0x6c0>
 40019c0:	00815504 	movi	r2,1364
 40019c4:	1100032e 	bgeu	r2,r4,40019d4 <_malloc_r+0x730>
 40019c8:	01001f84 	movi	r4,126
 40019cc:	00c0fc04 	movi	r3,1008
 40019d0:	003f6a06 	br	400177c <_malloc_r+0x4d8>
 40019d4:	2804d4ba 	srli	r2,r5,18
 40019d8:	11001f04 	addi	r4,r2,124
 40019dc:	200690fa 	slli	r3,r4,3
 40019e0:	003f6606 	br	400177c <_malloc_r+0x4d8>

040019e4 <memchr>:
 40019e4:	008000c4 	movi	r2,3
 40019e8:	29403fcc 	andi	r5,r5,255
 40019ec:	2007883a 	mov	r3,r4
 40019f0:	1180022e 	bgeu	r2,r6,40019fc <memchr+0x18>
 40019f4:	2084703a 	and	r2,r4,r2
 40019f8:	10000b26 	beq	r2,zero,4001a28 <memchr+0x44>
 40019fc:	313fffc4 	addi	r4,r6,-1
 4001a00:	3000051e 	bne	r6,zero,4001a18 <memchr+0x34>
 4001a04:	00002c06 	br	4001ab8 <memchr+0xd4>
 4001a08:	213fffc4 	addi	r4,r4,-1
 4001a0c:	00bfffc4 	movi	r2,-1
 4001a10:	18c00044 	addi	r3,r3,1
 4001a14:	20802826 	beq	r4,r2,4001ab8 <memchr+0xd4>
 4001a18:	18800003 	ldbu	r2,0(r3)
 4001a1c:	28bffa1e 	bne	r5,r2,4001a08 <memchr+0x24>
 4001a20:	1805883a 	mov	r2,r3
 4001a24:	f800283a 	ret
 4001a28:	0011883a 	mov	r8,zero
 4001a2c:	0007883a 	mov	r3,zero
 4001a30:	01c00104 	movi	r7,4
 4001a34:	4004923a 	slli	r2,r8,8
 4001a38:	18c00044 	addi	r3,r3,1
 4001a3c:	1151883a 	add	r8,r2,r5
 4001a40:	19fffc1e 	bne	r3,r7,4001a34 <memchr+0x50>
 4001a44:	02bfbff4 	movhi	r10,65279
 4001a48:	52bfbfc4 	addi	r10,r10,-257
 4001a4c:	02602074 	movhi	r9,32897
 4001a50:	4a602004 	addi	r9,r9,-32640
 4001a54:	02c000c4 	movi	r11,3
 4001a58:	20800017 	ldw	r2,0(r4)
 4001a5c:	31bfff04 	addi	r6,r6,-4
 4001a60:	200f883a 	mov	r7,r4
 4001a64:	1204f03a 	xor	r2,r2,r8
 4001a68:	1287883a 	add	r3,r2,r10
 4001a6c:	1a46703a 	and	r3,r3,r9
 4001a70:	0084303a 	nor	r2,zero,r2
 4001a74:	10c4703a 	and	r2,r2,r3
 4001a78:	10000b26 	beq	r2,zero,4001aa8 <memchr+0xc4>
 4001a7c:	20800003 	ldbu	r2,0(r4)
 4001a80:	28800f26 	beq	r5,r2,4001ac0 <memchr+0xdc>
 4001a84:	20800043 	ldbu	r2,1(r4)
 4001a88:	21c00044 	addi	r7,r4,1
 4001a8c:	28800c26 	beq	r5,r2,4001ac0 <memchr+0xdc>
 4001a90:	20800083 	ldbu	r2,2(r4)
 4001a94:	21c00084 	addi	r7,r4,2
 4001a98:	28800926 	beq	r5,r2,4001ac0 <memchr+0xdc>
 4001a9c:	208000c3 	ldbu	r2,3(r4)
 4001aa0:	21c000c4 	addi	r7,r4,3
 4001aa4:	28800626 	beq	r5,r2,4001ac0 <memchr+0xdc>
 4001aa8:	21000104 	addi	r4,r4,4
 4001aac:	59bfea36 	bltu	r11,r6,4001a58 <memchr+0x74>
 4001ab0:	2007883a 	mov	r3,r4
 4001ab4:	003fd106 	br	40019fc <memchr+0x18>
 4001ab8:	0005883a 	mov	r2,zero
 4001abc:	f800283a 	ret
 4001ac0:	3805883a 	mov	r2,r7
 4001ac4:	f800283a 	ret

04001ac8 <memcpy>:
 4001ac8:	01c003c4 	movi	r7,15
 4001acc:	2007883a 	mov	r3,r4
 4001ad0:	3980032e 	bgeu	r7,r6,4001ae0 <memcpy+0x18>
 4001ad4:	2904b03a 	or	r2,r5,r4
 4001ad8:	108000cc 	andi	r2,r2,3
 4001adc:	10000926 	beq	r2,zero,4001b04 <memcpy+0x3c>
 4001ae0:	30000626 	beq	r6,zero,4001afc <memcpy+0x34>
 4001ae4:	30cd883a 	add	r6,r6,r3
 4001ae8:	28800003 	ldbu	r2,0(r5)
 4001aec:	29400044 	addi	r5,r5,1
 4001af0:	18800005 	stb	r2,0(r3)
 4001af4:	18c00044 	addi	r3,r3,1
 4001af8:	30fffb1e 	bne	r6,r3,4001ae8 <memcpy+0x20>
 4001afc:	2005883a 	mov	r2,r4
 4001b00:	f800283a 	ret
 4001b04:	3811883a 	mov	r8,r7
 4001b08:	200f883a 	mov	r7,r4
 4001b0c:	28c00017 	ldw	r3,0(r5)
 4001b10:	31bffc04 	addi	r6,r6,-16
 4001b14:	38c00015 	stw	r3,0(r7)
 4001b18:	28800117 	ldw	r2,4(r5)
 4001b1c:	38800115 	stw	r2,4(r7)
 4001b20:	28c00217 	ldw	r3,8(r5)
 4001b24:	38c00215 	stw	r3,8(r7)
 4001b28:	28800317 	ldw	r2,12(r5)
 4001b2c:	29400404 	addi	r5,r5,16
 4001b30:	38800315 	stw	r2,12(r7)
 4001b34:	39c00404 	addi	r7,r7,16
 4001b38:	41bff436 	bltu	r8,r6,4001b0c <memcpy+0x44>
 4001b3c:	008000c4 	movi	r2,3
 4001b40:	1180072e 	bgeu	r2,r6,4001b60 <memcpy+0x98>
 4001b44:	1007883a 	mov	r3,r2
 4001b48:	28800017 	ldw	r2,0(r5)
 4001b4c:	31bfff04 	addi	r6,r6,-4
 4001b50:	29400104 	addi	r5,r5,4
 4001b54:	38800015 	stw	r2,0(r7)
 4001b58:	39c00104 	addi	r7,r7,4
 4001b5c:	19bffa36 	bltu	r3,r6,4001b48 <memcpy+0x80>
 4001b60:	3807883a 	mov	r3,r7
 4001b64:	003fde06 	br	4001ae0 <memcpy+0x18>

04001b68 <memmove>:
 4001b68:	2807883a 	mov	r3,r5
 4001b6c:	2011883a 	mov	r8,r4
 4001b70:	29000c2e 	bgeu	r5,r4,4001ba4 <memmove+0x3c>
 4001b74:	298f883a 	add	r7,r5,r6
 4001b78:	21c00a2e 	bgeu	r4,r7,4001ba4 <memmove+0x3c>
 4001b7c:	30000726 	beq	r6,zero,4001b9c <memmove+0x34>
 4001b80:	2187883a 	add	r3,r4,r6
 4001b84:	198dc83a 	sub	r6,r3,r6
 4001b88:	39ffffc4 	addi	r7,r7,-1
 4001b8c:	38800003 	ldbu	r2,0(r7)
 4001b90:	18ffffc4 	addi	r3,r3,-1
 4001b94:	18800005 	stb	r2,0(r3)
 4001b98:	19bffb1e 	bne	r3,r6,4001b88 <memmove+0x20>
 4001b9c:	2005883a 	mov	r2,r4
 4001ba0:	f800283a 	ret
 4001ba4:	01c003c4 	movi	r7,15
 4001ba8:	39800a36 	bltu	r7,r6,4001bd4 <memmove+0x6c>
 4001bac:	303ffb26 	beq	r6,zero,4001b9c <memmove+0x34>
 4001bb0:	400f883a 	mov	r7,r8
 4001bb4:	320d883a 	add	r6,r6,r8
 4001bb8:	28800003 	ldbu	r2,0(r5)
 4001bbc:	29400044 	addi	r5,r5,1
 4001bc0:	38800005 	stb	r2,0(r7)
 4001bc4:	39c00044 	addi	r7,r7,1
 4001bc8:	39bffb1e 	bne	r7,r6,4001bb8 <memmove+0x50>
 4001bcc:	2005883a 	mov	r2,r4
 4001bd0:	f800283a 	ret
 4001bd4:	1904b03a 	or	r2,r3,r4
 4001bd8:	108000cc 	andi	r2,r2,3
 4001bdc:	103ff31e 	bne	r2,zero,4001bac <memmove+0x44>
 4001be0:	3811883a 	mov	r8,r7
 4001be4:	180b883a 	mov	r5,r3
 4001be8:	200f883a 	mov	r7,r4
 4001bec:	28c00017 	ldw	r3,0(r5)
 4001bf0:	31bffc04 	addi	r6,r6,-16
 4001bf4:	38c00015 	stw	r3,0(r7)
 4001bf8:	28800117 	ldw	r2,4(r5)
 4001bfc:	38800115 	stw	r2,4(r7)
 4001c00:	28c00217 	ldw	r3,8(r5)
 4001c04:	38c00215 	stw	r3,8(r7)
 4001c08:	28800317 	ldw	r2,12(r5)
 4001c0c:	29400404 	addi	r5,r5,16
 4001c10:	38800315 	stw	r2,12(r7)
 4001c14:	39c00404 	addi	r7,r7,16
 4001c18:	41bff436 	bltu	r8,r6,4001bec <memmove+0x84>
 4001c1c:	008000c4 	movi	r2,3
 4001c20:	1180072e 	bgeu	r2,r6,4001c40 <memmove+0xd8>
 4001c24:	1007883a 	mov	r3,r2
 4001c28:	28800017 	ldw	r2,0(r5)
 4001c2c:	31bfff04 	addi	r6,r6,-4
 4001c30:	29400104 	addi	r5,r5,4
 4001c34:	38800015 	stw	r2,0(r7)
 4001c38:	39c00104 	addi	r7,r7,4
 4001c3c:	19bffa36 	bltu	r3,r6,4001c28 <memmove+0xc0>
 4001c40:	3811883a 	mov	r8,r7
 4001c44:	003fd906 	br	4001bac <memmove+0x44>

04001c48 <_realloc_r>:
 4001c48:	defff404 	addi	sp,sp,-48
 4001c4c:	dd800815 	stw	r22,32(sp)
 4001c50:	dc800415 	stw	r18,16(sp)
 4001c54:	dc400315 	stw	r17,12(sp)
 4001c58:	dfc00b15 	stw	ra,44(sp)
 4001c5c:	df000a15 	stw	fp,40(sp)
 4001c60:	ddc00915 	stw	r23,36(sp)
 4001c64:	dd400715 	stw	r21,28(sp)
 4001c68:	dd000615 	stw	r20,24(sp)
 4001c6c:	dcc00515 	stw	r19,20(sp)
 4001c70:	dc000215 	stw	r16,8(sp)
 4001c74:	2825883a 	mov	r18,r5
 4001c78:	3023883a 	mov	r17,r6
 4001c7c:	202d883a 	mov	r22,r4
 4001c80:	2800c926 	beq	r5,zero,4001fa8 <_realloc_r+0x360>
 4001c84:	4003e340 	call	4003e34 <__malloc_lock>
 4001c88:	943ffe04 	addi	r16,r18,-8
 4001c8c:	88c002c4 	addi	r3,r17,11
 4001c90:	00800584 	movi	r2,22
 4001c94:	82000117 	ldw	r8,4(r16)
 4001c98:	10c01b2e 	bgeu	r2,r3,4001d08 <_realloc_r+0xc0>
 4001c9c:	00bffe04 	movi	r2,-8
 4001ca0:	188e703a 	and	r7,r3,r2
 4001ca4:	3839883a 	mov	fp,r7
 4001ca8:	38001a16 	blt	r7,zero,4001d14 <_realloc_r+0xcc>
 4001cac:	e4401936 	bltu	fp,r17,4001d14 <_realloc_r+0xcc>
 4001cb0:	013fff04 	movi	r4,-4
 4001cb4:	4126703a 	and	r19,r8,r4
 4001cb8:	99c02616 	blt	r19,r7,4001d54 <_realloc_r+0x10c>
 4001cbc:	802b883a 	mov	r21,r16
 4001cc0:	9829883a 	mov	r20,r19
 4001cc4:	84000204 	addi	r16,r16,8
 4001cc8:	a80f883a 	mov	r7,r21
 4001ccc:	a70dc83a 	sub	r6,r20,fp
 4001cd0:	008003c4 	movi	r2,15
 4001cd4:	1180c136 	bltu	r2,r6,4001fdc <_realloc_r+0x394>
 4001cd8:	38800117 	ldw	r2,4(r7)
 4001cdc:	a549883a 	add	r4,r20,r21
 4001ce0:	1080004c 	andi	r2,r2,1
 4001ce4:	a084b03a 	or	r2,r20,r2
 4001ce8:	38800115 	stw	r2,4(r7)
 4001cec:	20c00117 	ldw	r3,4(r4)
 4001cf0:	18c00054 	ori	r3,r3,1
 4001cf4:	20c00115 	stw	r3,4(r4)
 4001cf8:	b009883a 	mov	r4,r22
 4001cfc:	4003e540 	call	4003e54 <__malloc_unlock>
 4001d00:	8023883a 	mov	r17,r16
 4001d04:	00000606 	br	4001d20 <_realloc_r+0xd8>
 4001d08:	01c00404 	movi	r7,16
 4001d0c:	3839883a 	mov	fp,r7
 4001d10:	e47fe72e 	bgeu	fp,r17,4001cb0 <_realloc_r+0x68>
 4001d14:	00800304 	movi	r2,12
 4001d18:	0023883a 	mov	r17,zero
 4001d1c:	b0800015 	stw	r2,0(r22)
 4001d20:	8805883a 	mov	r2,r17
 4001d24:	dfc00b17 	ldw	ra,44(sp)
 4001d28:	df000a17 	ldw	fp,40(sp)
 4001d2c:	ddc00917 	ldw	r23,36(sp)
 4001d30:	dd800817 	ldw	r22,32(sp)
 4001d34:	dd400717 	ldw	r21,28(sp)
 4001d38:	dd000617 	ldw	r20,24(sp)
 4001d3c:	dcc00517 	ldw	r19,20(sp)
 4001d40:	dc800417 	ldw	r18,16(sp)
 4001d44:	dc400317 	ldw	r17,12(sp)
 4001d48:	dc000217 	ldw	r16,8(sp)
 4001d4c:	dec00c04 	addi	sp,sp,48
 4001d50:	f800283a 	ret
 4001d54:	00810074 	movhi	r2,1025
 4001d58:	10a0f204 	addi	r2,r2,-31800
 4001d5c:	12400217 	ldw	r9,8(r2)
 4001d60:	84cd883a 	add	r6,r16,r19
 4001d64:	802b883a 	mov	r21,r16
 4001d68:	3240b926 	beq	r6,r9,4002050 <_realloc_r+0x408>
 4001d6c:	31400117 	ldw	r5,4(r6)
 4001d70:	00bfff84 	movi	r2,-2
 4001d74:	2884703a 	and	r2,r5,r2
 4001d78:	1185883a 	add	r2,r2,r6
 4001d7c:	10c00117 	ldw	r3,4(r2)
 4001d80:	18c0004c 	andi	r3,r3,1
 4001d84:	1807003a 	cmpeq	r3,r3,zero
 4001d88:	1800a326 	beq	r3,zero,4002018 <_realloc_r+0x3d0>
 4001d8c:	2908703a 	and	r4,r5,r4
 4001d90:	9929883a 	add	r20,r19,r4
 4001d94:	a1c0a30e 	bge	r20,r7,4002024 <_realloc_r+0x3dc>
 4001d98:	4080004c 	andi	r2,r8,1
 4001d9c:	1000551e 	bne	r2,zero,4001ef4 <_realloc_r+0x2ac>
 4001da0:	80800017 	ldw	r2,0(r16)
 4001da4:	80afc83a 	sub	r23,r16,r2
 4001da8:	b8c00117 	ldw	r3,4(r23)
 4001dac:	00bfff04 	movi	r2,-4
 4001db0:	1884703a 	and	r2,r3,r2
 4001db4:	30002e26 	beq	r6,zero,4001e70 <_realloc_r+0x228>
 4001db8:	3240b926 	beq	r6,r9,40020a0 <_realloc_r+0x458>
 4001dbc:	98a9883a 	add	r20,r19,r2
 4001dc0:	2509883a 	add	r4,r4,r20
 4001dc4:	d9000015 	stw	r4,0(sp)
 4001dc8:	21c02a16 	blt	r4,r7,4001e74 <_realloc_r+0x22c>
 4001dcc:	30800317 	ldw	r2,12(r6)
 4001dd0:	30c00217 	ldw	r3,8(r6)
 4001dd4:	01400904 	movi	r5,36
 4001dd8:	99bfff04 	addi	r6,r19,-4
 4001ddc:	18800315 	stw	r2,12(r3)
 4001de0:	10c00215 	stw	r3,8(r2)
 4001de4:	b9000317 	ldw	r4,12(r23)
 4001de8:	b8800217 	ldw	r2,8(r23)
 4001dec:	b82b883a 	mov	r21,r23
 4001df0:	bc000204 	addi	r16,r23,8
 4001df4:	20800215 	stw	r2,8(r4)
 4001df8:	11000315 	stw	r4,12(r2)
 4001dfc:	2980e436 	bltu	r5,r6,4002190 <_realloc_r+0x548>
 4001e00:	008004c4 	movi	r2,19
 4001e04:	9009883a 	mov	r4,r18
 4001e08:	8011883a 	mov	r8,r16
 4001e0c:	11800f2e 	bgeu	r2,r6,4001e4c <_realloc_r+0x204>
 4001e10:	90800017 	ldw	r2,0(r18)
 4001e14:	ba000404 	addi	r8,r23,16
 4001e18:	91000204 	addi	r4,r18,8
 4001e1c:	b8800215 	stw	r2,8(r23)
 4001e20:	90c00117 	ldw	r3,4(r18)
 4001e24:	008006c4 	movi	r2,27
 4001e28:	b8c00315 	stw	r3,12(r23)
 4001e2c:	1180072e 	bgeu	r2,r6,4001e4c <_realloc_r+0x204>
 4001e30:	90c00217 	ldw	r3,8(r18)
 4001e34:	ba000604 	addi	r8,r23,24
 4001e38:	91000404 	addi	r4,r18,16
 4001e3c:	b8c00415 	stw	r3,16(r23)
 4001e40:	90800317 	ldw	r2,12(r18)
 4001e44:	b8800515 	stw	r2,20(r23)
 4001e48:	3140e726 	beq	r6,r5,40021e8 <_realloc_r+0x5a0>
 4001e4c:	20800017 	ldw	r2,0(r4)
 4001e50:	dd000017 	ldw	r20,0(sp)
 4001e54:	b80f883a 	mov	r7,r23
 4001e58:	40800015 	stw	r2,0(r8)
 4001e5c:	20c00117 	ldw	r3,4(r4)
 4001e60:	40c00115 	stw	r3,4(r8)
 4001e64:	20800217 	ldw	r2,8(r4)
 4001e68:	40800215 	stw	r2,8(r8)
 4001e6c:	003f9706 	br	4001ccc <_realloc_r+0x84>
 4001e70:	98a9883a 	add	r20,r19,r2
 4001e74:	a1c01f16 	blt	r20,r7,4001ef4 <_realloc_r+0x2ac>
 4001e78:	b8c00317 	ldw	r3,12(r23)
 4001e7c:	b8800217 	ldw	r2,8(r23)
 4001e80:	99bfff04 	addi	r6,r19,-4
 4001e84:	01400904 	movi	r5,36
 4001e88:	b82b883a 	mov	r21,r23
 4001e8c:	18800215 	stw	r2,8(r3)
 4001e90:	10c00315 	stw	r3,12(r2)
 4001e94:	bc000204 	addi	r16,r23,8
 4001e98:	2980c336 	bltu	r5,r6,40021a8 <_realloc_r+0x560>
 4001e9c:	008004c4 	movi	r2,19
 4001ea0:	9009883a 	mov	r4,r18
 4001ea4:	8011883a 	mov	r8,r16
 4001ea8:	11800f2e 	bgeu	r2,r6,4001ee8 <_realloc_r+0x2a0>
 4001eac:	90800017 	ldw	r2,0(r18)
 4001eb0:	ba000404 	addi	r8,r23,16
 4001eb4:	91000204 	addi	r4,r18,8
 4001eb8:	b8800215 	stw	r2,8(r23)
 4001ebc:	90c00117 	ldw	r3,4(r18)
 4001ec0:	008006c4 	movi	r2,27
 4001ec4:	b8c00315 	stw	r3,12(r23)
 4001ec8:	1180072e 	bgeu	r2,r6,4001ee8 <_realloc_r+0x2a0>
 4001ecc:	90c00217 	ldw	r3,8(r18)
 4001ed0:	ba000604 	addi	r8,r23,24
 4001ed4:	91000404 	addi	r4,r18,16
 4001ed8:	b8c00415 	stw	r3,16(r23)
 4001edc:	90800317 	ldw	r2,12(r18)
 4001ee0:	b8800515 	stw	r2,20(r23)
 4001ee4:	3140c726 	beq	r6,r5,4002204 <_realloc_r+0x5bc>
 4001ee8:	20800017 	ldw	r2,0(r4)
 4001eec:	b80f883a 	mov	r7,r23
 4001ef0:	003fd906 	br	4001e58 <_realloc_r+0x210>
 4001ef4:	880b883a 	mov	r5,r17
 4001ef8:	b009883a 	mov	r4,r22
 4001efc:	40012a40 	call	40012a4 <_malloc_r>
 4001f00:	1023883a 	mov	r17,r2
 4001f04:	10002526 	beq	r2,zero,4001f9c <_realloc_r+0x354>
 4001f08:	80800117 	ldw	r2,4(r16)
 4001f0c:	00ffff84 	movi	r3,-2
 4001f10:	893ffe04 	addi	r4,r17,-8
 4001f14:	10c4703a 	and	r2,r2,r3
 4001f18:	8085883a 	add	r2,r16,r2
 4001f1c:	20809526 	beq	r4,r2,4002174 <_realloc_r+0x52c>
 4001f20:	99bfff04 	addi	r6,r19,-4
 4001f24:	01c00904 	movi	r7,36
 4001f28:	39804536 	bltu	r7,r6,4002040 <_realloc_r+0x3f8>
 4001f2c:	008004c4 	movi	r2,19
 4001f30:	9009883a 	mov	r4,r18
 4001f34:	880b883a 	mov	r5,r17
 4001f38:	11800f2e 	bgeu	r2,r6,4001f78 <_realloc_r+0x330>
 4001f3c:	90800017 	ldw	r2,0(r18)
 4001f40:	89400204 	addi	r5,r17,8
 4001f44:	91000204 	addi	r4,r18,8
 4001f48:	88800015 	stw	r2,0(r17)
 4001f4c:	90c00117 	ldw	r3,4(r18)
 4001f50:	008006c4 	movi	r2,27
 4001f54:	88c00115 	stw	r3,4(r17)
 4001f58:	1180072e 	bgeu	r2,r6,4001f78 <_realloc_r+0x330>
 4001f5c:	90c00217 	ldw	r3,8(r18)
 4001f60:	89400404 	addi	r5,r17,16
 4001f64:	91000404 	addi	r4,r18,16
 4001f68:	88c00215 	stw	r3,8(r17)
 4001f6c:	90800317 	ldw	r2,12(r18)
 4001f70:	88800315 	stw	r2,12(r17)
 4001f74:	31c09126 	beq	r6,r7,40021bc <_realloc_r+0x574>
 4001f78:	20800017 	ldw	r2,0(r4)
 4001f7c:	28800015 	stw	r2,0(r5)
 4001f80:	20c00117 	ldw	r3,4(r4)
 4001f84:	28c00115 	stw	r3,4(r5)
 4001f88:	20800217 	ldw	r2,8(r4)
 4001f8c:	28800215 	stw	r2,8(r5)
 4001f90:	900b883a 	mov	r5,r18
 4001f94:	b009883a 	mov	r4,r22
 4001f98:	4002a040 	call	4002a04 <_free_r>
 4001f9c:	b009883a 	mov	r4,r22
 4001fa0:	4003e540 	call	4003e54 <__malloc_unlock>
 4001fa4:	003f5e06 	br	4001d20 <_realloc_r+0xd8>
 4001fa8:	300b883a 	mov	r5,r6
 4001fac:	dfc00b17 	ldw	ra,44(sp)
 4001fb0:	df000a17 	ldw	fp,40(sp)
 4001fb4:	ddc00917 	ldw	r23,36(sp)
 4001fb8:	dd800817 	ldw	r22,32(sp)
 4001fbc:	dd400717 	ldw	r21,28(sp)
 4001fc0:	dd000617 	ldw	r20,24(sp)
 4001fc4:	dcc00517 	ldw	r19,20(sp)
 4001fc8:	dc800417 	ldw	r18,16(sp)
 4001fcc:	dc400317 	ldw	r17,12(sp)
 4001fd0:	dc000217 	ldw	r16,8(sp)
 4001fd4:	dec00c04 	addi	sp,sp,48
 4001fd8:	40012a41 	jmpi	40012a4 <_malloc_r>
 4001fdc:	38800117 	ldw	r2,4(r7)
 4001fe0:	e54b883a 	add	r5,fp,r21
 4001fe4:	31000054 	ori	r4,r6,1
 4001fe8:	1080004c 	andi	r2,r2,1
 4001fec:	1704b03a 	or	r2,r2,fp
 4001ff0:	38800115 	stw	r2,4(r7)
 4001ff4:	29000115 	stw	r4,4(r5)
 4001ff8:	2987883a 	add	r3,r5,r6
 4001ffc:	18800117 	ldw	r2,4(r3)
 4002000:	29400204 	addi	r5,r5,8
 4002004:	b009883a 	mov	r4,r22
 4002008:	10800054 	ori	r2,r2,1
 400200c:	18800115 	stw	r2,4(r3)
 4002010:	4002a040 	call	4002a04 <_free_r>
 4002014:	003f3806 	br	4001cf8 <_realloc_r+0xb0>
 4002018:	000d883a 	mov	r6,zero
 400201c:	0009883a 	mov	r4,zero
 4002020:	003f5d06 	br	4001d98 <_realloc_r+0x150>
 4002024:	30c00217 	ldw	r3,8(r6)
 4002028:	30800317 	ldw	r2,12(r6)
 400202c:	800f883a 	mov	r7,r16
 4002030:	84000204 	addi	r16,r16,8
 4002034:	10c00215 	stw	r3,8(r2)
 4002038:	18800315 	stw	r2,12(r3)
 400203c:	003f2306 	br	4001ccc <_realloc_r+0x84>
 4002040:	8809883a 	mov	r4,r17
 4002044:	900b883a 	mov	r5,r18
 4002048:	4001b680 	call	4001b68 <memmove>
 400204c:	003fd006 	br	4001f90 <_realloc_r+0x348>
 4002050:	30800117 	ldw	r2,4(r6)
 4002054:	e0c00404 	addi	r3,fp,16
 4002058:	1108703a 	and	r4,r2,r4
 400205c:	9905883a 	add	r2,r19,r4
 4002060:	10ff4d16 	blt	r2,r3,4001d98 <_realloc_r+0x150>
 4002064:	1705c83a 	sub	r2,r2,fp
 4002068:	870b883a 	add	r5,r16,fp
 400206c:	10800054 	ori	r2,r2,1
 4002070:	28800115 	stw	r2,4(r5)
 4002074:	80c00117 	ldw	r3,4(r16)
 4002078:	00810074 	movhi	r2,1025
 400207c:	10a0f204 	addi	r2,r2,-31800
 4002080:	b009883a 	mov	r4,r22
 4002084:	18c0004c 	andi	r3,r3,1
 4002088:	e0c6b03a 	or	r3,fp,r3
 400208c:	11400215 	stw	r5,8(r2)
 4002090:	80c00115 	stw	r3,4(r16)
 4002094:	4003e540 	call	4003e54 <__malloc_unlock>
 4002098:	84400204 	addi	r17,r16,8
 400209c:	003f2006 	br	4001d20 <_realloc_r+0xd8>
 40020a0:	98a9883a 	add	r20,r19,r2
 40020a4:	2509883a 	add	r4,r4,r20
 40020a8:	e0800404 	addi	r2,fp,16
 40020ac:	d9000115 	stw	r4,4(sp)
 40020b0:	20bf7016 	blt	r4,r2,4001e74 <_realloc_r+0x22c>
 40020b4:	b8c00317 	ldw	r3,12(r23)
 40020b8:	b8800217 	ldw	r2,8(r23)
 40020bc:	99bfff04 	addi	r6,r19,-4
 40020c0:	01400904 	movi	r5,36
 40020c4:	18800215 	stw	r2,8(r3)
 40020c8:	10c00315 	stw	r3,12(r2)
 40020cc:	bc400204 	addi	r17,r23,8
 40020d0:	29804136 	bltu	r5,r6,40021d8 <_realloc_r+0x590>
 40020d4:	008004c4 	movi	r2,19
 40020d8:	9009883a 	mov	r4,r18
 40020dc:	880f883a 	mov	r7,r17
 40020e0:	11800f2e 	bgeu	r2,r6,4002120 <_realloc_r+0x4d8>
 40020e4:	90800017 	ldw	r2,0(r18)
 40020e8:	b9c00404 	addi	r7,r23,16
 40020ec:	91000204 	addi	r4,r18,8
 40020f0:	b8800215 	stw	r2,8(r23)
 40020f4:	90c00117 	ldw	r3,4(r18)
 40020f8:	008006c4 	movi	r2,27
 40020fc:	b8c00315 	stw	r3,12(r23)
 4002100:	1180072e 	bgeu	r2,r6,4002120 <_realloc_r+0x4d8>
 4002104:	90c00217 	ldw	r3,8(r18)
 4002108:	b9c00604 	addi	r7,r23,24
 400210c:	91000404 	addi	r4,r18,16
 4002110:	b8c00415 	stw	r3,16(r23)
 4002114:	90800317 	ldw	r2,12(r18)
 4002118:	b8800515 	stw	r2,20(r23)
 400211c:	31404026 	beq	r6,r5,4002220 <_realloc_r+0x5d8>
 4002120:	20800017 	ldw	r2,0(r4)
 4002124:	38800015 	stw	r2,0(r7)
 4002128:	20c00117 	ldw	r3,4(r4)
 400212c:	38c00115 	stw	r3,4(r7)
 4002130:	20800217 	ldw	r2,8(r4)
 4002134:	38800215 	stw	r2,8(r7)
 4002138:	d8c00117 	ldw	r3,4(sp)
 400213c:	bf0b883a 	add	r5,r23,fp
 4002140:	b009883a 	mov	r4,r22
 4002144:	1f05c83a 	sub	r2,r3,fp
 4002148:	10800054 	ori	r2,r2,1
 400214c:	28800115 	stw	r2,4(r5)
 4002150:	b8c00117 	ldw	r3,4(r23)
 4002154:	00810074 	movhi	r2,1025
 4002158:	10a0f204 	addi	r2,r2,-31800
 400215c:	11400215 	stw	r5,8(r2)
 4002160:	18c0004c 	andi	r3,r3,1
 4002164:	e0c6b03a 	or	r3,fp,r3
 4002168:	b8c00115 	stw	r3,4(r23)
 400216c:	4003e540 	call	4003e54 <__malloc_unlock>
 4002170:	003eeb06 	br	4001d20 <_realloc_r+0xd8>
 4002174:	20800117 	ldw	r2,4(r4)
 4002178:	00ffff04 	movi	r3,-4
 400217c:	800f883a 	mov	r7,r16
 4002180:	10c4703a 	and	r2,r2,r3
 4002184:	98a9883a 	add	r20,r19,r2
 4002188:	84000204 	addi	r16,r16,8
 400218c:	003ecf06 	br	4001ccc <_realloc_r+0x84>
 4002190:	900b883a 	mov	r5,r18
 4002194:	8009883a 	mov	r4,r16
 4002198:	4001b680 	call	4001b68 <memmove>
 400219c:	dd000017 	ldw	r20,0(sp)
 40021a0:	b80f883a 	mov	r7,r23
 40021a4:	003ec906 	br	4001ccc <_realloc_r+0x84>
 40021a8:	900b883a 	mov	r5,r18
 40021ac:	8009883a 	mov	r4,r16
 40021b0:	4001b680 	call	4001b68 <memmove>
 40021b4:	b80f883a 	mov	r7,r23
 40021b8:	003ec406 	br	4001ccc <_realloc_r+0x84>
 40021bc:	90c00417 	ldw	r3,16(r18)
 40021c0:	89400604 	addi	r5,r17,24
 40021c4:	91000604 	addi	r4,r18,24
 40021c8:	88c00415 	stw	r3,16(r17)
 40021cc:	90800517 	ldw	r2,20(r18)
 40021d0:	88800515 	stw	r2,20(r17)
 40021d4:	003f6806 	br	4001f78 <_realloc_r+0x330>
 40021d8:	900b883a 	mov	r5,r18
 40021dc:	8809883a 	mov	r4,r17
 40021e0:	4001b680 	call	4001b68 <memmove>
 40021e4:	003fd406 	br	4002138 <_realloc_r+0x4f0>
 40021e8:	90c00417 	ldw	r3,16(r18)
 40021ec:	91000604 	addi	r4,r18,24
 40021f0:	ba000804 	addi	r8,r23,32
 40021f4:	b8c00615 	stw	r3,24(r23)
 40021f8:	90800517 	ldw	r2,20(r18)
 40021fc:	b8800715 	stw	r2,28(r23)
 4002200:	003f1206 	br	4001e4c <_realloc_r+0x204>
 4002204:	90c00417 	ldw	r3,16(r18)
 4002208:	91000604 	addi	r4,r18,24
 400220c:	ba000804 	addi	r8,r23,32
 4002210:	b8c00615 	stw	r3,24(r23)
 4002214:	90800517 	ldw	r2,20(r18)
 4002218:	b8800715 	stw	r2,28(r23)
 400221c:	003f3206 	br	4001ee8 <_realloc_r+0x2a0>
 4002220:	90c00417 	ldw	r3,16(r18)
 4002224:	91000604 	addi	r4,r18,24
 4002228:	b9c00804 	addi	r7,r23,32
 400222c:	b8c00615 	stw	r3,24(r23)
 4002230:	90800517 	ldw	r2,20(r18)
 4002234:	b8800715 	stw	r2,28(r23)
 4002238:	003fb906 	br	4002120 <_realloc_r+0x4d8>

0400223c <_sbrk_r>:
 400223c:	defffd04 	addi	sp,sp,-12
 4002240:	dc000015 	stw	r16,0(sp)
 4002244:	04010074 	movhi	r16,1025
 4002248:	842e1104 	addi	r16,r16,-18364
 400224c:	dc400115 	stw	r17,4(sp)
 4002250:	80000015 	stw	zero,0(r16)
 4002254:	2023883a 	mov	r17,r4
 4002258:	2809883a 	mov	r4,r5
 400225c:	dfc00215 	stw	ra,8(sp)
 4002260:	40040540 	call	4004054 <sbrk>
 4002264:	1007883a 	mov	r3,r2
 4002268:	00bfffc4 	movi	r2,-1
 400226c:	18800626 	beq	r3,r2,4002288 <_sbrk_r+0x4c>
 4002270:	1805883a 	mov	r2,r3
 4002274:	dfc00217 	ldw	ra,8(sp)
 4002278:	dc400117 	ldw	r17,4(sp)
 400227c:	dc000017 	ldw	r16,0(sp)
 4002280:	dec00304 	addi	sp,sp,12
 4002284:	f800283a 	ret
 4002288:	80800017 	ldw	r2,0(r16)
 400228c:	103ff826 	beq	r2,zero,4002270 <_sbrk_r+0x34>
 4002290:	88800015 	stw	r2,0(r17)
 4002294:	1805883a 	mov	r2,r3
 4002298:	dfc00217 	ldw	ra,8(sp)
 400229c:	dc400117 	ldw	r17,4(sp)
 40022a0:	dc000017 	ldw	r16,0(sp)
 40022a4:	dec00304 	addi	sp,sp,12
 40022a8:	f800283a 	ret

040022ac <__swsetup_r>:
 40022ac:	00810074 	movhi	r2,1025
 40022b0:	10a6ef04 	addi	r2,r2,-25668
 40022b4:	10c00017 	ldw	r3,0(r2)
 40022b8:	defffd04 	addi	sp,sp,-12
 40022bc:	dc400115 	stw	r17,4(sp)
 40022c0:	dc000015 	stw	r16,0(sp)
 40022c4:	dfc00215 	stw	ra,8(sp)
 40022c8:	2023883a 	mov	r17,r4
 40022cc:	2821883a 	mov	r16,r5
 40022d0:	18000226 	beq	r3,zero,40022dc <__swsetup_r+0x30>
 40022d4:	18800e17 	ldw	r2,56(r3)
 40022d8:	10001f26 	beq	r2,zero,4002358 <__swsetup_r+0xac>
 40022dc:	8100030b 	ldhu	r4,12(r16)
 40022e0:	2080020c 	andi	r2,r4,8
 40022e4:	10002826 	beq	r2,zero,4002388 <__swsetup_r+0xdc>
 40022e8:	81400417 	ldw	r5,16(r16)
 40022ec:	28001d26 	beq	r5,zero,4002364 <__swsetup_r+0xb8>
 40022f0:	2080004c 	andi	r2,r4,1
 40022f4:	1005003a 	cmpeq	r2,r2,zero
 40022f8:	10000b26 	beq	r2,zero,4002328 <__swsetup_r+0x7c>
 40022fc:	2080008c 	andi	r2,r4,2
 4002300:	10001226 	beq	r2,zero,400234c <__swsetup_r+0xa0>
 4002304:	0005883a 	mov	r2,zero
 4002308:	80800215 	stw	r2,8(r16)
 400230c:	28000b26 	beq	r5,zero,400233c <__swsetup_r+0x90>
 4002310:	0005883a 	mov	r2,zero
 4002314:	dfc00217 	ldw	ra,8(sp)
 4002318:	dc400117 	ldw	r17,4(sp)
 400231c:	dc000017 	ldw	r16,0(sp)
 4002320:	dec00304 	addi	sp,sp,12
 4002324:	f800283a 	ret
 4002328:	80800517 	ldw	r2,20(r16)
 400232c:	80000215 	stw	zero,8(r16)
 4002330:	0085c83a 	sub	r2,zero,r2
 4002334:	80800615 	stw	r2,24(r16)
 4002338:	283ff51e 	bne	r5,zero,4002310 <__swsetup_r+0x64>
 400233c:	2080200c 	andi	r2,r4,128
 4002340:	103ff326 	beq	r2,zero,4002310 <__swsetup_r+0x64>
 4002344:	00bfffc4 	movi	r2,-1
 4002348:	003ff206 	br	4002314 <__swsetup_r+0x68>
 400234c:	80800517 	ldw	r2,20(r16)
 4002350:	80800215 	stw	r2,8(r16)
 4002354:	003fed06 	br	400230c <__swsetup_r+0x60>
 4002358:	1809883a 	mov	r4,r3
 400235c:	40026800 	call	4002680 <__sinit>
 4002360:	003fde06 	br	40022dc <__swsetup_r+0x30>
 4002364:	20c0a00c 	andi	r3,r4,640
 4002368:	00808004 	movi	r2,512
 400236c:	18bfe026 	beq	r3,r2,40022f0 <__swsetup_r+0x44>
 4002370:	8809883a 	mov	r4,r17
 4002374:	800b883a 	mov	r5,r16
 4002378:	4002e980 	call	4002e98 <__smakebuf_r>
 400237c:	8100030b 	ldhu	r4,12(r16)
 4002380:	81400417 	ldw	r5,16(r16)
 4002384:	003fda06 	br	40022f0 <__swsetup_r+0x44>
 4002388:	2080040c 	andi	r2,r4,16
 400238c:	103fed26 	beq	r2,zero,4002344 <__swsetup_r+0x98>
 4002390:	2080010c 	andi	r2,r4,4
 4002394:	10001226 	beq	r2,zero,40023e0 <__swsetup_r+0x134>
 4002398:	81400c17 	ldw	r5,48(r16)
 400239c:	28000526 	beq	r5,zero,40023b4 <__swsetup_r+0x108>
 40023a0:	80801004 	addi	r2,r16,64
 40023a4:	28800226 	beq	r5,r2,40023b0 <__swsetup_r+0x104>
 40023a8:	8809883a 	mov	r4,r17
 40023ac:	4002a040 	call	4002a04 <_free_r>
 40023b0:	80000c15 	stw	zero,48(r16)
 40023b4:	8080030b 	ldhu	r2,12(r16)
 40023b8:	81400417 	ldw	r5,16(r16)
 40023bc:	80000115 	stw	zero,4(r16)
 40023c0:	10bff6cc 	andi	r2,r2,65499
 40023c4:	8080030d 	sth	r2,12(r16)
 40023c8:	81400015 	stw	r5,0(r16)
 40023cc:	8080030b 	ldhu	r2,12(r16)
 40023d0:	10800214 	ori	r2,r2,8
 40023d4:	113fffcc 	andi	r4,r2,65535
 40023d8:	8080030d 	sth	r2,12(r16)
 40023dc:	003fc306 	br	40022ec <__swsetup_r+0x40>
 40023e0:	81400417 	ldw	r5,16(r16)
 40023e4:	003ff906 	br	40023cc <__swsetup_r+0x120>

040023e8 <_fflush_r>:
 40023e8:	defffb04 	addi	sp,sp,-20
 40023ec:	dcc00315 	stw	r19,12(sp)
 40023f0:	dc800215 	stw	r18,8(sp)
 40023f4:	dfc00415 	stw	ra,16(sp)
 40023f8:	dc400115 	stw	r17,4(sp)
 40023fc:	dc000015 	stw	r16,0(sp)
 4002400:	2027883a 	mov	r19,r4
 4002404:	2825883a 	mov	r18,r5
 4002408:	20000226 	beq	r4,zero,4002414 <_fflush_r+0x2c>
 400240c:	20800e17 	ldw	r2,56(r4)
 4002410:	10005626 	beq	r2,zero,400256c <_fflush_r+0x184>
 4002414:	9100030b 	ldhu	r4,12(r18)
 4002418:	20ffffcc 	andi	r3,r4,65535
 400241c:	18e0001c 	xori	r3,r3,32768
 4002420:	18e00004 	addi	r3,r3,-32768
 4002424:	1880020c 	andi	r2,r3,8
 4002428:	1000261e 	bne	r2,zero,40024c4 <_fflush_r+0xdc>
 400242c:	90c00117 	ldw	r3,4(r18)
 4002430:	20820014 	ori	r2,r4,2048
 4002434:	9080030d 	sth	r2,12(r18)
 4002438:	1009883a 	mov	r4,r2
 400243c:	00c0400e 	bge	zero,r3,4002540 <_fflush_r+0x158>
 4002440:	92000a17 	ldw	r8,40(r18)
 4002444:	40004026 	beq	r8,zero,4002548 <_fflush_r+0x160>
 4002448:	2084000c 	andi	r2,r4,4096
 400244c:	10005326 	beq	r2,zero,400259c <_fflush_r+0x1b4>
 4002450:	94001417 	ldw	r16,80(r18)
 4002454:	9080030b 	ldhu	r2,12(r18)
 4002458:	1080010c 	andi	r2,r2,4
 400245c:	1000481e 	bne	r2,zero,4002580 <_fflush_r+0x198>
 4002460:	91400717 	ldw	r5,28(r18)
 4002464:	9809883a 	mov	r4,r19
 4002468:	800d883a 	mov	r6,r16
 400246c:	000f883a 	mov	r7,zero
 4002470:	403ee83a 	callr	r8
 4002474:	8080261e 	bne	r16,r2,4002510 <_fflush_r+0x128>
 4002478:	9080030b 	ldhu	r2,12(r18)
 400247c:	91000417 	ldw	r4,16(r18)
 4002480:	90000115 	stw	zero,4(r18)
 4002484:	10bdffcc 	andi	r2,r2,63487
 4002488:	10ffffcc 	andi	r3,r2,65535
 400248c:	18c4000c 	andi	r3,r3,4096
 4002490:	9080030d 	sth	r2,12(r18)
 4002494:	91000015 	stw	r4,0(r18)
 4002498:	18002b26 	beq	r3,zero,4002548 <_fflush_r+0x160>
 400249c:	0007883a 	mov	r3,zero
 40024a0:	1805883a 	mov	r2,r3
 40024a4:	94001415 	stw	r16,80(r18)
 40024a8:	dfc00417 	ldw	ra,16(sp)
 40024ac:	dcc00317 	ldw	r19,12(sp)
 40024b0:	dc800217 	ldw	r18,8(sp)
 40024b4:	dc400117 	ldw	r17,4(sp)
 40024b8:	dc000017 	ldw	r16,0(sp)
 40024bc:	dec00504 	addi	sp,sp,20
 40024c0:	f800283a 	ret
 40024c4:	94400417 	ldw	r17,16(r18)
 40024c8:	88001f26 	beq	r17,zero,4002548 <_fflush_r+0x160>
 40024cc:	90800017 	ldw	r2,0(r18)
 40024d0:	18c000cc 	andi	r3,r3,3
 40024d4:	94400015 	stw	r17,0(r18)
 40024d8:	1461c83a 	sub	r16,r2,r17
 40024dc:	18002526 	beq	r3,zero,4002574 <_fflush_r+0x18c>
 40024e0:	0005883a 	mov	r2,zero
 40024e4:	90800215 	stw	r2,8(r18)
 40024e8:	0400170e 	bge	zero,r16,4002548 <_fflush_r+0x160>
 40024ec:	90c00917 	ldw	r3,36(r18)
 40024f0:	91400717 	ldw	r5,28(r18)
 40024f4:	880d883a 	mov	r6,r17
 40024f8:	800f883a 	mov	r7,r16
 40024fc:	9809883a 	mov	r4,r19
 4002500:	183ee83a 	callr	r3
 4002504:	88a3883a 	add	r17,r17,r2
 4002508:	80a1c83a 	sub	r16,r16,r2
 400250c:	00bff616 	blt	zero,r2,40024e8 <_fflush_r+0x100>
 4002510:	9080030b 	ldhu	r2,12(r18)
 4002514:	00ffffc4 	movi	r3,-1
 4002518:	10801014 	ori	r2,r2,64
 400251c:	9080030d 	sth	r2,12(r18)
 4002520:	1805883a 	mov	r2,r3
 4002524:	dfc00417 	ldw	ra,16(sp)
 4002528:	dcc00317 	ldw	r19,12(sp)
 400252c:	dc800217 	ldw	r18,8(sp)
 4002530:	dc400117 	ldw	r17,4(sp)
 4002534:	dc000017 	ldw	r16,0(sp)
 4002538:	dec00504 	addi	sp,sp,20
 400253c:	f800283a 	ret
 4002540:	90800f17 	ldw	r2,60(r18)
 4002544:	00bfbe16 	blt	zero,r2,4002440 <_fflush_r+0x58>
 4002548:	0007883a 	mov	r3,zero
 400254c:	1805883a 	mov	r2,r3
 4002550:	dfc00417 	ldw	ra,16(sp)
 4002554:	dcc00317 	ldw	r19,12(sp)
 4002558:	dc800217 	ldw	r18,8(sp)
 400255c:	dc400117 	ldw	r17,4(sp)
 4002560:	dc000017 	ldw	r16,0(sp)
 4002564:	dec00504 	addi	sp,sp,20
 4002568:	f800283a 	ret
 400256c:	40026800 	call	4002680 <__sinit>
 4002570:	003fa806 	br	4002414 <_fflush_r+0x2c>
 4002574:	90800517 	ldw	r2,20(r18)
 4002578:	90800215 	stw	r2,8(r18)
 400257c:	003fda06 	br	40024e8 <_fflush_r+0x100>
 4002580:	90800117 	ldw	r2,4(r18)
 4002584:	90c00c17 	ldw	r3,48(r18)
 4002588:	80a1c83a 	sub	r16,r16,r2
 400258c:	183fb426 	beq	r3,zero,4002460 <_fflush_r+0x78>
 4002590:	90800f17 	ldw	r2,60(r18)
 4002594:	80a1c83a 	sub	r16,r16,r2
 4002598:	003fb106 	br	4002460 <_fflush_r+0x78>
 400259c:	91400717 	ldw	r5,28(r18)
 40025a0:	9809883a 	mov	r4,r19
 40025a4:	000d883a 	mov	r6,zero
 40025a8:	01c00044 	movi	r7,1
 40025ac:	403ee83a 	callr	r8
 40025b0:	1021883a 	mov	r16,r2
 40025b4:	00bfffc4 	movi	r2,-1
 40025b8:	80800226 	beq	r16,r2,40025c4 <_fflush_r+0x1dc>
 40025bc:	92000a17 	ldw	r8,40(r18)
 40025c0:	003fa406 	br	4002454 <_fflush_r+0x6c>
 40025c4:	98c00017 	ldw	r3,0(r19)
 40025c8:	00800744 	movi	r2,29
 40025cc:	18bfde26 	beq	r3,r2,4002548 <_fflush_r+0x160>
 40025d0:	9080030b 	ldhu	r2,12(r18)
 40025d4:	8007883a 	mov	r3,r16
 40025d8:	10801014 	ori	r2,r2,64
 40025dc:	9080030d 	sth	r2,12(r18)
 40025e0:	003fcf06 	br	4002520 <_fflush_r+0x138>

040025e4 <fflush>:
 40025e4:	01410034 	movhi	r5,1024
 40025e8:	2948fa04 	addi	r5,r5,9192
 40025ec:	2007883a 	mov	r3,r4
 40025f0:	20000526 	beq	r4,zero,4002608 <fflush+0x24>
 40025f4:	00810074 	movhi	r2,1025
 40025f8:	10a6ef04 	addi	r2,r2,-25668
 40025fc:	11000017 	ldw	r4,0(r2)
 4002600:	180b883a 	mov	r5,r3
 4002604:	40023e81 	jmpi	40023e8 <_fflush_r>
 4002608:	00810074 	movhi	r2,1025
 400260c:	10a6f004 	addi	r2,r2,-25664
 4002610:	11000017 	ldw	r4,0(r2)
 4002614:	4002d181 	jmpi	4002d18 <_fwalk_reent>

04002618 <std>:
 4002618:	00810034 	movhi	r2,1024
 400261c:	108c3104 	addi	r2,r2,12484
 4002620:	20800b15 	stw	r2,44(r4)
 4002624:	00810034 	movhi	r2,1024
 4002628:	108c6c04 	addi	r2,r2,12720
 400262c:	20800815 	stw	r2,32(r4)
 4002630:	00c10034 	movhi	r3,1024
 4002634:	18cc4d04 	addi	r3,r3,12596
 4002638:	00810034 	movhi	r2,1024
 400263c:	108c3304 	addi	r2,r2,12492
 4002640:	2140030d 	sth	r5,12(r4)
 4002644:	2180038d 	sth	r6,14(r4)
 4002648:	20c00915 	stw	r3,36(r4)
 400264c:	20800a15 	stw	r2,40(r4)
 4002650:	20000015 	stw	zero,0(r4)
 4002654:	20000115 	stw	zero,4(r4)
 4002658:	20000215 	stw	zero,8(r4)
 400265c:	20000415 	stw	zero,16(r4)
 4002660:	20000515 	stw	zero,20(r4)
 4002664:	20000615 	stw	zero,24(r4)
 4002668:	21000715 	stw	r4,28(r4)
 400266c:	f800283a 	ret

04002670 <__sfp_lock_acquire>:
 4002670:	f800283a 	ret

04002674 <__sfp_lock_release>:
 4002674:	f800283a 	ret

04002678 <__sinit_lock_acquire>:
 4002678:	f800283a 	ret

0400267c <__sinit_lock_release>:
 400267c:	f800283a 	ret

04002680 <__sinit>:
 4002680:	20800e17 	ldw	r2,56(r4)
 4002684:	defffd04 	addi	sp,sp,-12
 4002688:	dc400115 	stw	r17,4(sp)
 400268c:	dc000015 	stw	r16,0(sp)
 4002690:	dfc00215 	stw	ra,8(sp)
 4002694:	04400044 	movi	r17,1
 4002698:	01400104 	movi	r5,4
 400269c:	000d883a 	mov	r6,zero
 40026a0:	2021883a 	mov	r16,r4
 40026a4:	2200bb04 	addi	r8,r4,748
 40026a8:	200f883a 	mov	r7,r4
 40026ac:	10000526 	beq	r2,zero,40026c4 <__sinit+0x44>
 40026b0:	dfc00217 	ldw	ra,8(sp)
 40026b4:	dc400117 	ldw	r17,4(sp)
 40026b8:	dc000017 	ldw	r16,0(sp)
 40026bc:	dec00304 	addi	sp,sp,12
 40026c0:	f800283a 	ret
 40026c4:	21000117 	ldw	r4,4(r4)
 40026c8:	00810034 	movhi	r2,1024
 40026cc:	1089d904 	addi	r2,r2,10084
 40026d0:	00c000c4 	movi	r3,3
 40026d4:	80800f15 	stw	r2,60(r16)
 40026d8:	80c0b915 	stw	r3,740(r16)
 40026dc:	8200ba15 	stw	r8,744(r16)
 40026e0:	84400e15 	stw	r17,56(r16)
 40026e4:	8000b815 	stw	zero,736(r16)
 40026e8:	40026180 	call	4002618 <std>
 40026ec:	81000217 	ldw	r4,8(r16)
 40026f0:	880d883a 	mov	r6,r17
 40026f4:	800f883a 	mov	r7,r16
 40026f8:	01400284 	movi	r5,10
 40026fc:	40026180 	call	4002618 <std>
 4002700:	81000317 	ldw	r4,12(r16)
 4002704:	800f883a 	mov	r7,r16
 4002708:	01400484 	movi	r5,18
 400270c:	01800084 	movi	r6,2
 4002710:	dfc00217 	ldw	ra,8(sp)
 4002714:	dc400117 	ldw	r17,4(sp)
 4002718:	dc000017 	ldw	r16,0(sp)
 400271c:	dec00304 	addi	sp,sp,12
 4002720:	40026181 	jmpi	4002618 <std>

04002724 <__fp_lock>:
 4002724:	0005883a 	mov	r2,zero
 4002728:	f800283a 	ret

0400272c <__fp_unlock>:
 400272c:	0005883a 	mov	r2,zero
 4002730:	f800283a 	ret

04002734 <__fp_unlock_all>:
 4002734:	00810074 	movhi	r2,1025
 4002738:	10a6ef04 	addi	r2,r2,-25668
 400273c:	11000017 	ldw	r4,0(r2)
 4002740:	01410034 	movhi	r5,1024
 4002744:	2949cb04 	addi	r5,r5,10028
 4002748:	4002de01 	jmpi	4002de0 <_fwalk>

0400274c <__fp_lock_all>:
 400274c:	00810074 	movhi	r2,1025
 4002750:	10a6ef04 	addi	r2,r2,-25668
 4002754:	11000017 	ldw	r4,0(r2)
 4002758:	01410034 	movhi	r5,1024
 400275c:	2949c904 	addi	r5,r5,10020
 4002760:	4002de01 	jmpi	4002de0 <_fwalk>

04002764 <_cleanup_r>:
 4002764:	01410034 	movhi	r5,1024
 4002768:	294d0204 	addi	r5,r5,13320
 400276c:	4002de01 	jmpi	4002de0 <_fwalk>

04002770 <_cleanup>:
 4002770:	00810074 	movhi	r2,1025
 4002774:	10a6f004 	addi	r2,r2,-25664
 4002778:	11000017 	ldw	r4,0(r2)
 400277c:	40027641 	jmpi	4002764 <_cleanup_r>

04002780 <__sfmoreglue>:
 4002780:	defffc04 	addi	sp,sp,-16
 4002784:	dc400115 	stw	r17,4(sp)
 4002788:	2c401724 	muli	r17,r5,92
 400278c:	dc800215 	stw	r18,8(sp)
 4002790:	2825883a 	mov	r18,r5
 4002794:	89400304 	addi	r5,r17,12
 4002798:	dc000015 	stw	r16,0(sp)
 400279c:	dfc00315 	stw	ra,12(sp)
 40027a0:	40012a40 	call	40012a4 <_malloc_r>
 40027a4:	0021883a 	mov	r16,zero
 40027a8:	880d883a 	mov	r6,r17
 40027ac:	000b883a 	mov	r5,zero
 40027b0:	10000626 	beq	r2,zero,40027cc <__sfmoreglue+0x4c>
 40027b4:	11000304 	addi	r4,r2,12
 40027b8:	14800115 	stw	r18,4(r2)
 40027bc:	10000015 	stw	zero,0(r2)
 40027c0:	11000215 	stw	r4,8(r2)
 40027c4:	1021883a 	mov	r16,r2
 40027c8:	400302c0 	call	400302c <memset>
 40027cc:	8005883a 	mov	r2,r16
 40027d0:	dfc00317 	ldw	ra,12(sp)
 40027d4:	dc800217 	ldw	r18,8(sp)
 40027d8:	dc400117 	ldw	r17,4(sp)
 40027dc:	dc000017 	ldw	r16,0(sp)
 40027e0:	dec00404 	addi	sp,sp,16
 40027e4:	f800283a 	ret

040027e8 <__sfp>:
 40027e8:	defffd04 	addi	sp,sp,-12
 40027ec:	00810074 	movhi	r2,1025
 40027f0:	10a6f004 	addi	r2,r2,-25664
 40027f4:	dc000015 	stw	r16,0(sp)
 40027f8:	14000017 	ldw	r16,0(r2)
 40027fc:	dc400115 	stw	r17,4(sp)
 4002800:	dfc00215 	stw	ra,8(sp)
 4002804:	80800e17 	ldw	r2,56(r16)
 4002808:	2023883a 	mov	r17,r4
 400280c:	10002626 	beq	r2,zero,40028a8 <__sfp+0xc0>
 4002810:	8400b804 	addi	r16,r16,736
 4002814:	80800117 	ldw	r2,4(r16)
 4002818:	81000217 	ldw	r4,8(r16)
 400281c:	10ffffc4 	addi	r3,r2,-1
 4002820:	18000916 	blt	r3,zero,4002848 <__sfp+0x60>
 4002824:	2080030f 	ldh	r2,12(r4)
 4002828:	10000b26 	beq	r2,zero,4002858 <__sfp+0x70>
 400282c:	017fffc4 	movi	r5,-1
 4002830:	00000206 	br	400283c <__sfp+0x54>
 4002834:	2080030f 	ldh	r2,12(r4)
 4002838:	10000726 	beq	r2,zero,4002858 <__sfp+0x70>
 400283c:	18ffffc4 	addi	r3,r3,-1
 4002840:	21001704 	addi	r4,r4,92
 4002844:	197ffb1e 	bne	r3,r5,4002834 <__sfp+0x4c>
 4002848:	80800017 	ldw	r2,0(r16)
 400284c:	10001926 	beq	r2,zero,40028b4 <__sfp+0xcc>
 4002850:	1021883a 	mov	r16,r2
 4002854:	003fef06 	br	4002814 <__sfp+0x2c>
 4002858:	00bfffc4 	movi	r2,-1
 400285c:	00c00044 	movi	r3,1
 4002860:	2080038d 	sth	r2,14(r4)
 4002864:	20c0030d 	sth	r3,12(r4)
 4002868:	20000015 	stw	zero,0(r4)
 400286c:	20000215 	stw	zero,8(r4)
 4002870:	20000115 	stw	zero,4(r4)
 4002874:	20000415 	stw	zero,16(r4)
 4002878:	20000515 	stw	zero,20(r4)
 400287c:	20000615 	stw	zero,24(r4)
 4002880:	20000c15 	stw	zero,48(r4)
 4002884:	20000d15 	stw	zero,52(r4)
 4002888:	20001115 	stw	zero,68(r4)
 400288c:	20001215 	stw	zero,72(r4)
 4002890:	2005883a 	mov	r2,r4
 4002894:	dfc00217 	ldw	ra,8(sp)
 4002898:	dc400117 	ldw	r17,4(sp)
 400289c:	dc000017 	ldw	r16,0(sp)
 40028a0:	dec00304 	addi	sp,sp,12
 40028a4:	f800283a 	ret
 40028a8:	8009883a 	mov	r4,r16
 40028ac:	40026800 	call	4002680 <__sinit>
 40028b0:	003fd706 	br	4002810 <__sfp+0x28>
 40028b4:	8809883a 	mov	r4,r17
 40028b8:	01400104 	movi	r5,4
 40028bc:	40027800 	call	4002780 <__sfmoreglue>
 40028c0:	80800015 	stw	r2,0(r16)
 40028c4:	103fe21e 	bne	r2,zero,4002850 <__sfp+0x68>
 40028c8:	00800304 	movi	r2,12
 40028cc:	0009883a 	mov	r4,zero
 40028d0:	88800015 	stw	r2,0(r17)
 40028d4:	003fee06 	br	4002890 <__sfp+0xa8>

040028d8 <_malloc_trim_r>:
 40028d8:	defffb04 	addi	sp,sp,-20
 40028dc:	dcc00315 	stw	r19,12(sp)
 40028e0:	04c10074 	movhi	r19,1025
 40028e4:	9ce0f204 	addi	r19,r19,-31800
 40028e8:	dc800215 	stw	r18,8(sp)
 40028ec:	dc400115 	stw	r17,4(sp)
 40028f0:	dc000015 	stw	r16,0(sp)
 40028f4:	2823883a 	mov	r17,r5
 40028f8:	2025883a 	mov	r18,r4
 40028fc:	dfc00415 	stw	ra,16(sp)
 4002900:	4003e340 	call	4003e34 <__malloc_lock>
 4002904:	98800217 	ldw	r2,8(r19)
 4002908:	9009883a 	mov	r4,r18
 400290c:	000b883a 	mov	r5,zero
 4002910:	10c00117 	ldw	r3,4(r2)
 4002914:	00bfff04 	movi	r2,-4
 4002918:	18a0703a 	and	r16,r3,r2
 400291c:	8463c83a 	sub	r17,r16,r17
 4002920:	8c43fbc4 	addi	r17,r17,4079
 4002924:	8822d33a 	srli	r17,r17,12
 4002928:	0083ffc4 	movi	r2,4095
 400292c:	8c7fffc4 	addi	r17,r17,-1
 4002930:	8822933a 	slli	r17,r17,12
 4002934:	1440060e 	bge	r2,r17,4002950 <_malloc_trim_r+0x78>
 4002938:	400223c0 	call	400223c <_sbrk_r>
 400293c:	98c00217 	ldw	r3,8(r19)
 4002940:	9009883a 	mov	r4,r18
 4002944:	044bc83a 	sub	r5,zero,r17
 4002948:	80c7883a 	add	r3,r16,r3
 400294c:	10c00926 	beq	r2,r3,4002974 <_malloc_trim_r+0x9c>
 4002950:	4003e540 	call	4003e54 <__malloc_unlock>
 4002954:	0005883a 	mov	r2,zero
 4002958:	dfc00417 	ldw	ra,16(sp)
 400295c:	dcc00317 	ldw	r19,12(sp)
 4002960:	dc800217 	ldw	r18,8(sp)
 4002964:	dc400117 	ldw	r17,4(sp)
 4002968:	dc000017 	ldw	r16,0(sp)
 400296c:	dec00504 	addi	sp,sp,20
 4002970:	f800283a 	ret
 4002974:	9009883a 	mov	r4,r18
 4002978:	400223c0 	call	400223c <_sbrk_r>
 400297c:	844dc83a 	sub	r6,r16,r17
 4002980:	00ffffc4 	movi	r3,-1
 4002984:	9009883a 	mov	r4,r18
 4002988:	000b883a 	mov	r5,zero
 400298c:	01c10074 	movhi	r7,1025
 4002990:	39ee1804 	addi	r7,r7,-18336
 4002994:	31800054 	ori	r6,r6,1
 4002998:	10c00926 	beq	r2,r3,40029c0 <_malloc_trim_r+0xe8>
 400299c:	38800017 	ldw	r2,0(r7)
 40029a0:	98c00217 	ldw	r3,8(r19)
 40029a4:	9009883a 	mov	r4,r18
 40029a8:	1445c83a 	sub	r2,r2,r17
 40029ac:	38800015 	stw	r2,0(r7)
 40029b0:	19800115 	stw	r6,4(r3)
 40029b4:	4003e540 	call	4003e54 <__malloc_unlock>
 40029b8:	00800044 	movi	r2,1
 40029bc:	003fe606 	br	4002958 <_malloc_trim_r+0x80>
 40029c0:	400223c0 	call	400223c <_sbrk_r>
 40029c4:	99800217 	ldw	r6,8(r19)
 40029c8:	100f883a 	mov	r7,r2
 40029cc:	9009883a 	mov	r4,r18
 40029d0:	1187c83a 	sub	r3,r2,r6
 40029d4:	008003c4 	movi	r2,15
 40029d8:	19400054 	ori	r5,r3,1
 40029dc:	10ffdc0e 	bge	r2,r3,4002950 <_malloc_trim_r+0x78>
 40029e0:	00810074 	movhi	r2,1025
 40029e4:	10a6f204 	addi	r2,r2,-25656
 40029e8:	10c00017 	ldw	r3,0(r2)
 40029ec:	00810074 	movhi	r2,1025
 40029f0:	10ae1804 	addi	r2,r2,-18336
 40029f4:	31400115 	stw	r5,4(r6)
 40029f8:	38c7c83a 	sub	r3,r7,r3
 40029fc:	10c00015 	stw	r3,0(r2)
 4002a00:	003fd306 	br	4002950 <_malloc_trim_r+0x78>

04002a04 <_free_r>:
 4002a04:	defffd04 	addi	sp,sp,-12
 4002a08:	dc400115 	stw	r17,4(sp)
 4002a0c:	dc000015 	stw	r16,0(sp)
 4002a10:	dfc00215 	stw	ra,8(sp)
 4002a14:	2821883a 	mov	r16,r5
 4002a18:	2023883a 	mov	r17,r4
 4002a1c:	28005a26 	beq	r5,zero,4002b88 <_free_r+0x184>
 4002a20:	4003e340 	call	4003e34 <__malloc_lock>
 4002a24:	823ffe04 	addi	r8,r16,-8
 4002a28:	41400117 	ldw	r5,4(r8)
 4002a2c:	00bfff84 	movi	r2,-2
 4002a30:	02810074 	movhi	r10,1025
 4002a34:	52a0f204 	addi	r10,r10,-31800
 4002a38:	288e703a 	and	r7,r5,r2
 4002a3c:	41cd883a 	add	r6,r8,r7
 4002a40:	30c00117 	ldw	r3,4(r6)
 4002a44:	51000217 	ldw	r4,8(r10)
 4002a48:	00bfff04 	movi	r2,-4
 4002a4c:	1892703a 	and	r9,r3,r2
 4002a50:	5017883a 	mov	r11,r10
 4002a54:	31006726 	beq	r6,r4,4002bf4 <_free_r+0x1f0>
 4002a58:	2880004c 	andi	r2,r5,1
 4002a5c:	1005003a 	cmpeq	r2,r2,zero
 4002a60:	32400115 	stw	r9,4(r6)
 4002a64:	10001a1e 	bne	r2,zero,4002ad0 <_free_r+0xcc>
 4002a68:	000b883a 	mov	r5,zero
 4002a6c:	3247883a 	add	r3,r6,r9
 4002a70:	18800117 	ldw	r2,4(r3)
 4002a74:	1080004c 	andi	r2,r2,1
 4002a78:	1000231e 	bne	r2,zero,4002b08 <_free_r+0x104>
 4002a7c:	280ac03a 	cmpne	r5,r5,zero
 4002a80:	3a4f883a 	add	r7,r7,r9
 4002a84:	2800451e 	bne	r5,zero,4002b9c <_free_r+0x198>
 4002a88:	31000217 	ldw	r4,8(r6)
 4002a8c:	00810074 	movhi	r2,1025
 4002a90:	10a0f404 	addi	r2,r2,-31792
 4002a94:	20807b26 	beq	r4,r2,4002c84 <_free_r+0x280>
 4002a98:	30800317 	ldw	r2,12(r6)
 4002a9c:	3a07883a 	add	r3,r7,r8
 4002aa0:	19c00015 	stw	r7,0(r3)
 4002aa4:	11000215 	stw	r4,8(r2)
 4002aa8:	20800315 	stw	r2,12(r4)
 4002aac:	38800054 	ori	r2,r7,1
 4002ab0:	40800115 	stw	r2,4(r8)
 4002ab4:	28001a26 	beq	r5,zero,4002b20 <_free_r+0x11c>
 4002ab8:	8809883a 	mov	r4,r17
 4002abc:	dfc00217 	ldw	ra,8(sp)
 4002ac0:	dc400117 	ldw	r17,4(sp)
 4002ac4:	dc000017 	ldw	r16,0(sp)
 4002ac8:	dec00304 	addi	sp,sp,12
 4002acc:	4003e541 	jmpi	4003e54 <__malloc_unlock>
 4002ad0:	80bffe17 	ldw	r2,-8(r16)
 4002ad4:	50c00204 	addi	r3,r10,8
 4002ad8:	4091c83a 	sub	r8,r8,r2
 4002adc:	41000217 	ldw	r4,8(r8)
 4002ae0:	388f883a 	add	r7,r7,r2
 4002ae4:	20c06126 	beq	r4,r3,4002c6c <_free_r+0x268>
 4002ae8:	40800317 	ldw	r2,12(r8)
 4002aec:	3247883a 	add	r3,r6,r9
 4002af0:	000b883a 	mov	r5,zero
 4002af4:	11000215 	stw	r4,8(r2)
 4002af8:	20800315 	stw	r2,12(r4)
 4002afc:	18800117 	ldw	r2,4(r3)
 4002b00:	1080004c 	andi	r2,r2,1
 4002b04:	103fdd26 	beq	r2,zero,4002a7c <_free_r+0x78>
 4002b08:	38800054 	ori	r2,r7,1
 4002b0c:	3a07883a 	add	r3,r7,r8
 4002b10:	280ac03a 	cmpne	r5,r5,zero
 4002b14:	40800115 	stw	r2,4(r8)
 4002b18:	19c00015 	stw	r7,0(r3)
 4002b1c:	283fe61e 	bne	r5,zero,4002ab8 <_free_r+0xb4>
 4002b20:	00807fc4 	movi	r2,511
 4002b24:	11c01f2e 	bgeu	r2,r7,4002ba4 <_free_r+0x1a0>
 4002b28:	3806d27a 	srli	r3,r7,9
 4002b2c:	1800481e 	bne	r3,zero,4002c50 <_free_r+0x24c>
 4002b30:	3804d0fa 	srli	r2,r7,3
 4002b34:	100690fa 	slli	r3,r2,3
 4002b38:	1acd883a 	add	r6,r3,r11
 4002b3c:	31400217 	ldw	r5,8(r6)
 4002b40:	31405926 	beq	r6,r5,4002ca8 <_free_r+0x2a4>
 4002b44:	28800117 	ldw	r2,4(r5)
 4002b48:	00ffff04 	movi	r3,-4
 4002b4c:	10c4703a 	and	r2,r2,r3
 4002b50:	3880022e 	bgeu	r7,r2,4002b5c <_free_r+0x158>
 4002b54:	29400217 	ldw	r5,8(r5)
 4002b58:	317ffa1e 	bne	r6,r5,4002b44 <_free_r+0x140>
 4002b5c:	29800317 	ldw	r6,12(r5)
 4002b60:	41800315 	stw	r6,12(r8)
 4002b64:	41400215 	stw	r5,8(r8)
 4002b68:	8809883a 	mov	r4,r17
 4002b6c:	2a000315 	stw	r8,12(r5)
 4002b70:	32000215 	stw	r8,8(r6)
 4002b74:	dfc00217 	ldw	ra,8(sp)
 4002b78:	dc400117 	ldw	r17,4(sp)
 4002b7c:	dc000017 	ldw	r16,0(sp)
 4002b80:	dec00304 	addi	sp,sp,12
 4002b84:	4003e541 	jmpi	4003e54 <__malloc_unlock>
 4002b88:	dfc00217 	ldw	ra,8(sp)
 4002b8c:	dc400117 	ldw	r17,4(sp)
 4002b90:	dc000017 	ldw	r16,0(sp)
 4002b94:	dec00304 	addi	sp,sp,12
 4002b98:	f800283a 	ret
 4002b9c:	31000217 	ldw	r4,8(r6)
 4002ba0:	003fbd06 	br	4002a98 <_free_r+0x94>
 4002ba4:	3806d0fa 	srli	r3,r7,3
 4002ba8:	00800044 	movi	r2,1
 4002bac:	51400117 	ldw	r5,4(r10)
 4002bb0:	180890fa 	slli	r4,r3,3
 4002bb4:	1807d0ba 	srai	r3,r3,2
 4002bb8:	22c9883a 	add	r4,r4,r11
 4002bbc:	21800217 	ldw	r6,8(r4)
 4002bc0:	10c4983a 	sll	r2,r2,r3
 4002bc4:	41000315 	stw	r4,12(r8)
 4002bc8:	41800215 	stw	r6,8(r8)
 4002bcc:	288ab03a 	or	r5,r5,r2
 4002bd0:	22000215 	stw	r8,8(r4)
 4002bd4:	8809883a 	mov	r4,r17
 4002bd8:	51400115 	stw	r5,4(r10)
 4002bdc:	32000315 	stw	r8,12(r6)
 4002be0:	dfc00217 	ldw	ra,8(sp)
 4002be4:	dc400117 	ldw	r17,4(sp)
 4002be8:	dc000017 	ldw	r16,0(sp)
 4002bec:	dec00304 	addi	sp,sp,12
 4002bf0:	4003e541 	jmpi	4003e54 <__malloc_unlock>
 4002bf4:	2880004c 	andi	r2,r5,1
 4002bf8:	3a4d883a 	add	r6,r7,r9
 4002bfc:	1000071e 	bne	r2,zero,4002c1c <_free_r+0x218>
 4002c00:	80bffe17 	ldw	r2,-8(r16)
 4002c04:	4091c83a 	sub	r8,r8,r2
 4002c08:	41000317 	ldw	r4,12(r8)
 4002c0c:	40c00217 	ldw	r3,8(r8)
 4002c10:	308d883a 	add	r6,r6,r2
 4002c14:	20c00215 	stw	r3,8(r4)
 4002c18:	19000315 	stw	r4,12(r3)
 4002c1c:	00810074 	movhi	r2,1025
 4002c20:	10a6f104 	addi	r2,r2,-25660
 4002c24:	11000017 	ldw	r4,0(r2)
 4002c28:	30c00054 	ori	r3,r6,1
 4002c2c:	52000215 	stw	r8,8(r10)
 4002c30:	40c00115 	stw	r3,4(r8)
 4002c34:	313fa036 	bltu	r6,r4,4002ab8 <_free_r+0xb4>
 4002c38:	00810074 	movhi	r2,1025
 4002c3c:	10ae0e04 	addi	r2,r2,-18376
 4002c40:	11400017 	ldw	r5,0(r2)
 4002c44:	8809883a 	mov	r4,r17
 4002c48:	40028d80 	call	40028d8 <_malloc_trim_r>
 4002c4c:	003f9a06 	br	4002ab8 <_free_r+0xb4>
 4002c50:	00800104 	movi	r2,4
 4002c54:	10c0072e 	bgeu	r2,r3,4002c74 <_free_r+0x270>
 4002c58:	00800504 	movi	r2,20
 4002c5c:	10c01936 	bltu	r2,r3,4002cc4 <_free_r+0x2c0>
 4002c60:	188016c4 	addi	r2,r3,91
 4002c64:	100690fa 	slli	r3,r2,3
 4002c68:	003fb306 	br	4002b38 <_free_r+0x134>
 4002c6c:	01400044 	movi	r5,1
 4002c70:	003f7e06 	br	4002a6c <_free_r+0x68>
 4002c74:	3804d1ba 	srli	r2,r7,6
 4002c78:	10800e04 	addi	r2,r2,56
 4002c7c:	100690fa 	slli	r3,r2,3
 4002c80:	003fad06 	br	4002b38 <_free_r+0x134>
 4002c84:	22000315 	stw	r8,12(r4)
 4002c88:	22000215 	stw	r8,8(r4)
 4002c8c:	3a05883a 	add	r2,r7,r8
 4002c90:	38c00054 	ori	r3,r7,1
 4002c94:	11c00015 	stw	r7,0(r2)
 4002c98:	41000215 	stw	r4,8(r8)
 4002c9c:	40c00115 	stw	r3,4(r8)
 4002ca0:	41000315 	stw	r4,12(r8)
 4002ca4:	003f8406 	br	4002ab8 <_free_r+0xb4>
 4002ca8:	1005d0ba 	srai	r2,r2,2
 4002cac:	00c00044 	movi	r3,1
 4002cb0:	51000117 	ldw	r4,4(r10)
 4002cb4:	1886983a 	sll	r3,r3,r2
 4002cb8:	20c8b03a 	or	r4,r4,r3
 4002cbc:	51000115 	stw	r4,4(r10)
 4002cc0:	003fa706 	br	4002b60 <_free_r+0x15c>
 4002cc4:	00801504 	movi	r2,84
 4002cc8:	10c00436 	bltu	r2,r3,4002cdc <_free_r+0x2d8>
 4002ccc:	3804d33a 	srli	r2,r7,12
 4002cd0:	10801b84 	addi	r2,r2,110
 4002cd4:	100690fa 	slli	r3,r2,3
 4002cd8:	003f9706 	br	4002b38 <_free_r+0x134>
 4002cdc:	00805504 	movi	r2,340
 4002ce0:	10c00436 	bltu	r2,r3,4002cf4 <_free_r+0x2f0>
 4002ce4:	3804d3fa 	srli	r2,r7,15
 4002ce8:	10801dc4 	addi	r2,r2,119
 4002cec:	100690fa 	slli	r3,r2,3
 4002cf0:	003f9106 	br	4002b38 <_free_r+0x134>
 4002cf4:	00815504 	movi	r2,1364
 4002cf8:	10c0032e 	bgeu	r2,r3,4002d08 <_free_r+0x304>
 4002cfc:	00801f84 	movi	r2,126
 4002d00:	00c0fc04 	movi	r3,1008
 4002d04:	003f8c06 	br	4002b38 <_free_r+0x134>
 4002d08:	3804d4ba 	srli	r2,r7,18
 4002d0c:	10801f04 	addi	r2,r2,124
 4002d10:	100690fa 	slli	r3,r2,3
 4002d14:	003f8806 	br	4002b38 <_free_r+0x134>

04002d18 <_fwalk_reent>:
 4002d18:	defff704 	addi	sp,sp,-36
 4002d1c:	dcc00315 	stw	r19,12(sp)
 4002d20:	24c0b804 	addi	r19,r4,736
 4002d24:	dd800615 	stw	r22,24(sp)
 4002d28:	dd400515 	stw	r21,20(sp)
 4002d2c:	dfc00815 	stw	ra,32(sp)
 4002d30:	ddc00715 	stw	r23,28(sp)
 4002d34:	dd000415 	stw	r20,16(sp)
 4002d38:	dc800215 	stw	r18,8(sp)
 4002d3c:	dc400115 	stw	r17,4(sp)
 4002d40:	dc000015 	stw	r16,0(sp)
 4002d44:	202b883a 	mov	r21,r4
 4002d48:	282d883a 	mov	r22,r5
 4002d4c:	40026700 	call	4002670 <__sfp_lock_acquire>
 4002d50:	98002126 	beq	r19,zero,4002dd8 <_fwalk_reent+0xc0>
 4002d54:	002f883a 	mov	r23,zero
 4002d58:	9c800117 	ldw	r18,4(r19)
 4002d5c:	9c000217 	ldw	r16,8(r19)
 4002d60:	90bfffc4 	addi	r2,r18,-1
 4002d64:	10000d16 	blt	r2,zero,4002d9c <_fwalk_reent+0x84>
 4002d68:	0023883a 	mov	r17,zero
 4002d6c:	053fffc4 	movi	r20,-1
 4002d70:	8080030f 	ldh	r2,12(r16)
 4002d74:	8c400044 	addi	r17,r17,1
 4002d78:	10000626 	beq	r2,zero,4002d94 <_fwalk_reent+0x7c>
 4002d7c:	8080038f 	ldh	r2,14(r16)
 4002d80:	800b883a 	mov	r5,r16
 4002d84:	a809883a 	mov	r4,r21
 4002d88:	15000226 	beq	r2,r20,4002d94 <_fwalk_reent+0x7c>
 4002d8c:	b03ee83a 	callr	r22
 4002d90:	b8aeb03a 	or	r23,r23,r2
 4002d94:	84001704 	addi	r16,r16,92
 4002d98:	947ff51e 	bne	r18,r17,4002d70 <_fwalk_reent+0x58>
 4002d9c:	9cc00017 	ldw	r19,0(r19)
 4002da0:	983fed1e 	bne	r19,zero,4002d58 <_fwalk_reent+0x40>
 4002da4:	40026740 	call	4002674 <__sfp_lock_release>
 4002da8:	b805883a 	mov	r2,r23
 4002dac:	dfc00817 	ldw	ra,32(sp)
 4002db0:	ddc00717 	ldw	r23,28(sp)
 4002db4:	dd800617 	ldw	r22,24(sp)
 4002db8:	dd400517 	ldw	r21,20(sp)
 4002dbc:	dd000417 	ldw	r20,16(sp)
 4002dc0:	dcc00317 	ldw	r19,12(sp)
 4002dc4:	dc800217 	ldw	r18,8(sp)
 4002dc8:	dc400117 	ldw	r17,4(sp)
 4002dcc:	dc000017 	ldw	r16,0(sp)
 4002dd0:	dec00904 	addi	sp,sp,36
 4002dd4:	f800283a 	ret
 4002dd8:	002f883a 	mov	r23,zero
 4002ddc:	003ff106 	br	4002da4 <_fwalk_reent+0x8c>

04002de0 <_fwalk>:
 4002de0:	defff804 	addi	sp,sp,-32
 4002de4:	dcc00315 	stw	r19,12(sp)
 4002de8:	24c0b804 	addi	r19,r4,736
 4002dec:	dd400515 	stw	r21,20(sp)
 4002df0:	dfc00715 	stw	ra,28(sp)
 4002df4:	dd800615 	stw	r22,24(sp)
 4002df8:	dd000415 	stw	r20,16(sp)
 4002dfc:	dc800215 	stw	r18,8(sp)
 4002e00:	dc400115 	stw	r17,4(sp)
 4002e04:	dc000015 	stw	r16,0(sp)
 4002e08:	282b883a 	mov	r21,r5
 4002e0c:	40026700 	call	4002670 <__sfp_lock_acquire>
 4002e10:	98001f26 	beq	r19,zero,4002e90 <_fwalk+0xb0>
 4002e14:	002d883a 	mov	r22,zero
 4002e18:	9c800117 	ldw	r18,4(r19)
 4002e1c:	9c000217 	ldw	r16,8(r19)
 4002e20:	90bfffc4 	addi	r2,r18,-1
 4002e24:	10000c16 	blt	r2,zero,4002e58 <_fwalk+0x78>
 4002e28:	0023883a 	mov	r17,zero
 4002e2c:	053fffc4 	movi	r20,-1
 4002e30:	8080030f 	ldh	r2,12(r16)
 4002e34:	8c400044 	addi	r17,r17,1
 4002e38:	10000526 	beq	r2,zero,4002e50 <_fwalk+0x70>
 4002e3c:	8080038f 	ldh	r2,14(r16)
 4002e40:	8009883a 	mov	r4,r16
 4002e44:	15000226 	beq	r2,r20,4002e50 <_fwalk+0x70>
 4002e48:	a83ee83a 	callr	r21
 4002e4c:	b0acb03a 	or	r22,r22,r2
 4002e50:	84001704 	addi	r16,r16,92
 4002e54:	947ff61e 	bne	r18,r17,4002e30 <_fwalk+0x50>
 4002e58:	9cc00017 	ldw	r19,0(r19)
 4002e5c:	983fee1e 	bne	r19,zero,4002e18 <_fwalk+0x38>
 4002e60:	40026740 	call	4002674 <__sfp_lock_release>
 4002e64:	b005883a 	mov	r2,r22
 4002e68:	dfc00717 	ldw	ra,28(sp)
 4002e6c:	dd800617 	ldw	r22,24(sp)
 4002e70:	dd400517 	ldw	r21,20(sp)
 4002e74:	dd000417 	ldw	r20,16(sp)
 4002e78:	dcc00317 	ldw	r19,12(sp)
 4002e7c:	dc800217 	ldw	r18,8(sp)
 4002e80:	dc400117 	ldw	r17,4(sp)
 4002e84:	dc000017 	ldw	r16,0(sp)
 4002e88:	dec00804 	addi	sp,sp,32
 4002e8c:	f800283a 	ret
 4002e90:	002d883a 	mov	r22,zero
 4002e94:	003ff206 	br	4002e60 <_fwalk+0x80>

04002e98 <__smakebuf_r>:
 4002e98:	2880030b 	ldhu	r2,12(r5)
 4002e9c:	deffed04 	addi	sp,sp,-76
 4002ea0:	dc401015 	stw	r17,64(sp)
 4002ea4:	1080008c 	andi	r2,r2,2
 4002ea8:	dc000f15 	stw	r16,60(sp)
 4002eac:	dfc01215 	stw	ra,72(sp)
 4002eb0:	dc801115 	stw	r18,68(sp)
 4002eb4:	2821883a 	mov	r16,r5
 4002eb8:	2023883a 	mov	r17,r4
 4002ebc:	10000b26 	beq	r2,zero,4002eec <__smakebuf_r+0x54>
 4002ec0:	28c010c4 	addi	r3,r5,67
 4002ec4:	00800044 	movi	r2,1
 4002ec8:	28800515 	stw	r2,20(r5)
 4002ecc:	28c00415 	stw	r3,16(r5)
 4002ed0:	28c00015 	stw	r3,0(r5)
 4002ed4:	dfc01217 	ldw	ra,72(sp)
 4002ed8:	dc801117 	ldw	r18,68(sp)
 4002edc:	dc401017 	ldw	r17,64(sp)
 4002ee0:	dc000f17 	ldw	r16,60(sp)
 4002ee4:	dec01304 	addi	sp,sp,76
 4002ee8:	f800283a 	ret
 4002eec:	2940038f 	ldh	r5,14(r5)
 4002ef0:	28002116 	blt	r5,zero,4002f78 <__smakebuf_r+0xe0>
 4002ef4:	d80d883a 	mov	r6,sp
 4002ef8:	400341c0 	call	400341c <_fstat_r>
 4002efc:	10001e16 	blt	r2,zero,4002f78 <__smakebuf_r+0xe0>
 4002f00:	d8800117 	ldw	r2,4(sp)
 4002f04:	00e00014 	movui	r3,32768
 4002f08:	113c000c 	andi	r4,r2,61440
 4002f0c:	20c03126 	beq	r4,r3,4002fd4 <__smakebuf_r+0x13c>
 4002f10:	8080030b 	ldhu	r2,12(r16)
 4002f14:	00c80004 	movi	r3,8192
 4002f18:	10820014 	ori	r2,r2,2048
 4002f1c:	8080030d 	sth	r2,12(r16)
 4002f20:	20c01e26 	beq	r4,r3,4002f9c <__smakebuf_r+0x104>
 4002f24:	04810004 	movi	r18,1024
 4002f28:	8809883a 	mov	r4,r17
 4002f2c:	900b883a 	mov	r5,r18
 4002f30:	40012a40 	call	40012a4 <_malloc_r>
 4002f34:	1009883a 	mov	r4,r2
 4002f38:	10003126 	beq	r2,zero,4003000 <__smakebuf_r+0x168>
 4002f3c:	80c0030b 	ldhu	r3,12(r16)
 4002f40:	00810034 	movhi	r2,1024
 4002f44:	1089d904 	addi	r2,r2,10084
 4002f48:	88800f15 	stw	r2,60(r17)
 4002f4c:	18c02014 	ori	r3,r3,128
 4002f50:	84800515 	stw	r18,20(r16)
 4002f54:	80c0030d 	sth	r3,12(r16)
 4002f58:	81000415 	stw	r4,16(r16)
 4002f5c:	81000015 	stw	r4,0(r16)
 4002f60:	dfc01217 	ldw	ra,72(sp)
 4002f64:	dc801117 	ldw	r18,68(sp)
 4002f68:	dc401017 	ldw	r17,64(sp)
 4002f6c:	dc000f17 	ldw	r16,60(sp)
 4002f70:	dec01304 	addi	sp,sp,76
 4002f74:	f800283a 	ret
 4002f78:	80c0030b 	ldhu	r3,12(r16)
 4002f7c:	1880200c 	andi	r2,r3,128
 4002f80:	10000426 	beq	r2,zero,4002f94 <__smakebuf_r+0xfc>
 4002f84:	04801004 	movi	r18,64
 4002f88:	18820014 	ori	r2,r3,2048
 4002f8c:	8080030d 	sth	r2,12(r16)
 4002f90:	003fe506 	br	4002f28 <__smakebuf_r+0x90>
 4002f94:	04810004 	movi	r18,1024
 4002f98:	003ffb06 	br	4002f88 <__smakebuf_r+0xf0>
 4002f9c:	8140038f 	ldh	r5,14(r16)
 4002fa0:	8809883a 	mov	r4,r17
 4002fa4:	40034900 	call	4003490 <_isatty_r>
 4002fa8:	103fde26 	beq	r2,zero,4002f24 <__smakebuf_r+0x8c>
 4002fac:	8080030b 	ldhu	r2,12(r16)
 4002fb0:	80c010c4 	addi	r3,r16,67
 4002fb4:	04810004 	movi	r18,1024
 4002fb8:	10800054 	ori	r2,r2,1
 4002fbc:	8080030d 	sth	r2,12(r16)
 4002fc0:	00800044 	movi	r2,1
 4002fc4:	80c00415 	stw	r3,16(r16)
 4002fc8:	80800515 	stw	r2,20(r16)
 4002fcc:	80c00015 	stw	r3,0(r16)
 4002fd0:	003fd506 	br	4002f28 <__smakebuf_r+0x90>
 4002fd4:	80c00a17 	ldw	r3,40(r16)
 4002fd8:	00810034 	movhi	r2,1024
 4002fdc:	108c3304 	addi	r2,r2,12492
 4002fe0:	18bfcb1e 	bne	r3,r2,4002f10 <__smakebuf_r+0x78>
 4002fe4:	8080030b 	ldhu	r2,12(r16)
 4002fe8:	00c10004 	movi	r3,1024
 4002fec:	1825883a 	mov	r18,r3
 4002ff0:	10c4b03a 	or	r2,r2,r3
 4002ff4:	8080030d 	sth	r2,12(r16)
 4002ff8:	80c01315 	stw	r3,76(r16)
 4002ffc:	003fca06 	br	4002f28 <__smakebuf_r+0x90>
 4003000:	8100030b 	ldhu	r4,12(r16)
 4003004:	2080800c 	andi	r2,r4,512
 4003008:	103fb21e 	bne	r2,zero,4002ed4 <__smakebuf_r+0x3c>
 400300c:	80c010c4 	addi	r3,r16,67
 4003010:	21000094 	ori	r4,r4,2
 4003014:	00800044 	movi	r2,1
 4003018:	80800515 	stw	r2,20(r16)
 400301c:	8100030d 	sth	r4,12(r16)
 4003020:	80c00415 	stw	r3,16(r16)
 4003024:	80c00015 	stw	r3,0(r16)
 4003028:	003faa06 	br	4002ed4 <__smakebuf_r+0x3c>

0400302c <memset>:
 400302c:	008000c4 	movi	r2,3
 4003030:	29403fcc 	andi	r5,r5,255
 4003034:	2007883a 	mov	r3,r4
 4003038:	1180022e 	bgeu	r2,r6,4003044 <memset+0x18>
 400303c:	2084703a 	and	r2,r4,r2
 4003040:	10000826 	beq	r2,zero,4003064 <memset+0x38>
 4003044:	30000526 	beq	r6,zero,400305c <memset+0x30>
 4003048:	2805883a 	mov	r2,r5
 400304c:	30cd883a 	add	r6,r6,r3
 4003050:	18800005 	stb	r2,0(r3)
 4003054:	18c00044 	addi	r3,r3,1
 4003058:	19bffd1e 	bne	r3,r6,4003050 <memset+0x24>
 400305c:	2005883a 	mov	r2,r4
 4003060:	f800283a 	ret
 4003064:	2804923a 	slli	r2,r5,8
 4003068:	020003c4 	movi	r8,15
 400306c:	200f883a 	mov	r7,r4
 4003070:	2884b03a 	or	r2,r5,r2
 4003074:	1006943a 	slli	r3,r2,16
 4003078:	10c6b03a 	or	r3,r2,r3
 400307c:	41800a2e 	bgeu	r8,r6,40030a8 <memset+0x7c>
 4003080:	4005883a 	mov	r2,r8
 4003084:	31bffc04 	addi	r6,r6,-16
 4003088:	38c00015 	stw	r3,0(r7)
 400308c:	38c00115 	stw	r3,4(r7)
 4003090:	38c00215 	stw	r3,8(r7)
 4003094:	38c00315 	stw	r3,12(r7)
 4003098:	39c00404 	addi	r7,r7,16
 400309c:	11bff936 	bltu	r2,r6,4003084 <memset+0x58>
 40030a0:	008000c4 	movi	r2,3
 40030a4:	1180052e 	bgeu	r2,r6,40030bc <memset+0x90>
 40030a8:	31bfff04 	addi	r6,r6,-4
 40030ac:	008000c4 	movi	r2,3
 40030b0:	38c00015 	stw	r3,0(r7)
 40030b4:	39c00104 	addi	r7,r7,4
 40030b8:	11bffb36 	bltu	r2,r6,40030a8 <memset+0x7c>
 40030bc:	3807883a 	mov	r3,r7
 40030c0:	003fe006 	br	4003044 <memset+0x18>

040030c4 <__sclose>:
 40030c4:	2940038f 	ldh	r5,14(r5)
 40030c8:	40032881 	jmpi	4003288 <_close_r>

040030cc <__sseek>:
 40030cc:	defffe04 	addi	sp,sp,-8
 40030d0:	dc000015 	stw	r16,0(sp)
 40030d4:	2821883a 	mov	r16,r5
 40030d8:	2940038f 	ldh	r5,14(r5)
 40030dc:	dfc00115 	stw	ra,4(sp)
 40030e0:	40035000 	call	4003500 <_lseek_r>
 40030e4:	1007883a 	mov	r3,r2
 40030e8:	00bfffc4 	movi	r2,-1
 40030ec:	18800926 	beq	r3,r2,4003114 <__sseek+0x48>
 40030f0:	8080030b 	ldhu	r2,12(r16)
 40030f4:	80c01415 	stw	r3,80(r16)
 40030f8:	10840014 	ori	r2,r2,4096
 40030fc:	8080030d 	sth	r2,12(r16)
 4003100:	1805883a 	mov	r2,r3
 4003104:	dfc00117 	ldw	ra,4(sp)
 4003108:	dc000017 	ldw	r16,0(sp)
 400310c:	dec00204 	addi	sp,sp,8
 4003110:	f800283a 	ret
 4003114:	8080030b 	ldhu	r2,12(r16)
 4003118:	10bbffcc 	andi	r2,r2,61439
 400311c:	8080030d 	sth	r2,12(r16)
 4003120:	1805883a 	mov	r2,r3
 4003124:	dfc00117 	ldw	ra,4(sp)
 4003128:	dc000017 	ldw	r16,0(sp)
 400312c:	dec00204 	addi	sp,sp,8
 4003130:	f800283a 	ret

04003134 <__swrite>:
 4003134:	2880030b 	ldhu	r2,12(r5)
 4003138:	defffb04 	addi	sp,sp,-20
 400313c:	dcc00315 	stw	r19,12(sp)
 4003140:	1080400c 	andi	r2,r2,256
 4003144:	dc800215 	stw	r18,8(sp)
 4003148:	dc400115 	stw	r17,4(sp)
 400314c:	dc000015 	stw	r16,0(sp)
 4003150:	3027883a 	mov	r19,r6
 4003154:	3825883a 	mov	r18,r7
 4003158:	dfc00415 	stw	ra,16(sp)
 400315c:	2821883a 	mov	r16,r5
 4003160:	000d883a 	mov	r6,zero
 4003164:	01c00084 	movi	r7,2
 4003168:	2023883a 	mov	r17,r4
 400316c:	10000226 	beq	r2,zero,4003178 <__swrite+0x44>
 4003170:	2940038f 	ldh	r5,14(r5)
 4003174:	40035000 	call	4003500 <_lseek_r>
 4003178:	8080030b 	ldhu	r2,12(r16)
 400317c:	8140038f 	ldh	r5,14(r16)
 4003180:	8809883a 	mov	r4,r17
 4003184:	10bbffcc 	andi	r2,r2,61439
 4003188:	980d883a 	mov	r6,r19
 400318c:	900f883a 	mov	r7,r18
 4003190:	8080030d 	sth	r2,12(r16)
 4003194:	dfc00417 	ldw	ra,16(sp)
 4003198:	dcc00317 	ldw	r19,12(sp)
 400319c:	dc800217 	ldw	r18,8(sp)
 40031a0:	dc400117 	ldw	r17,4(sp)
 40031a4:	dc000017 	ldw	r16,0(sp)
 40031a8:	dec00504 	addi	sp,sp,20
 40031ac:	40032101 	jmpi	4003210 <_write_r>

040031b0 <__sread>:
 40031b0:	defffe04 	addi	sp,sp,-8
 40031b4:	dc000015 	stw	r16,0(sp)
 40031b8:	2821883a 	mov	r16,r5
 40031bc:	2940038f 	ldh	r5,14(r5)
 40031c0:	dfc00115 	stw	ra,4(sp)
 40031c4:	40035780 	call	4003578 <_read_r>
 40031c8:	1007883a 	mov	r3,r2
 40031cc:	10000816 	blt	r2,zero,40031f0 <__sread+0x40>
 40031d0:	80801417 	ldw	r2,80(r16)
 40031d4:	10c5883a 	add	r2,r2,r3
 40031d8:	80801415 	stw	r2,80(r16)
 40031dc:	1805883a 	mov	r2,r3
 40031e0:	dfc00117 	ldw	ra,4(sp)
 40031e4:	dc000017 	ldw	r16,0(sp)
 40031e8:	dec00204 	addi	sp,sp,8
 40031ec:	f800283a 	ret
 40031f0:	8080030b 	ldhu	r2,12(r16)
 40031f4:	10bbffcc 	andi	r2,r2,61439
 40031f8:	8080030d 	sth	r2,12(r16)
 40031fc:	1805883a 	mov	r2,r3
 4003200:	dfc00117 	ldw	ra,4(sp)
 4003204:	dc000017 	ldw	r16,0(sp)
 4003208:	dec00204 	addi	sp,sp,8
 400320c:	f800283a 	ret

04003210 <_write_r>:
 4003210:	defffd04 	addi	sp,sp,-12
 4003214:	dc000015 	stw	r16,0(sp)
 4003218:	04010074 	movhi	r16,1025
 400321c:	842e1104 	addi	r16,r16,-18364
 4003220:	dc400115 	stw	r17,4(sp)
 4003224:	80000015 	stw	zero,0(r16)
 4003228:	2023883a 	mov	r17,r4
 400322c:	2809883a 	mov	r4,r5
 4003230:	300b883a 	mov	r5,r6
 4003234:	380d883a 	mov	r6,r7
 4003238:	dfc00215 	stw	ra,8(sp)
 400323c:	40041400 	call	4004140 <write>
 4003240:	1007883a 	mov	r3,r2
 4003244:	00bfffc4 	movi	r2,-1
 4003248:	18800626 	beq	r3,r2,4003264 <_write_r+0x54>
 400324c:	1805883a 	mov	r2,r3
 4003250:	dfc00217 	ldw	ra,8(sp)
 4003254:	dc400117 	ldw	r17,4(sp)
 4003258:	dc000017 	ldw	r16,0(sp)
 400325c:	dec00304 	addi	sp,sp,12
 4003260:	f800283a 	ret
 4003264:	80800017 	ldw	r2,0(r16)
 4003268:	103ff826 	beq	r2,zero,400324c <_write_r+0x3c>
 400326c:	88800015 	stw	r2,0(r17)
 4003270:	1805883a 	mov	r2,r3
 4003274:	dfc00217 	ldw	ra,8(sp)
 4003278:	dc400117 	ldw	r17,4(sp)
 400327c:	dc000017 	ldw	r16,0(sp)
 4003280:	dec00304 	addi	sp,sp,12
 4003284:	f800283a 	ret

04003288 <_close_r>:
 4003288:	defffd04 	addi	sp,sp,-12
 400328c:	dc000015 	stw	r16,0(sp)
 4003290:	04010074 	movhi	r16,1025
 4003294:	842e1104 	addi	r16,r16,-18364
 4003298:	dc400115 	stw	r17,4(sp)
 400329c:	80000015 	stw	zero,0(r16)
 40032a0:	2023883a 	mov	r17,r4
 40032a4:	2809883a 	mov	r4,r5
 40032a8:	dfc00215 	stw	ra,8(sp)
 40032ac:	40035f00 	call	40035f0 <close>
 40032b0:	1007883a 	mov	r3,r2
 40032b4:	00bfffc4 	movi	r2,-1
 40032b8:	18800626 	beq	r3,r2,40032d4 <_close_r+0x4c>
 40032bc:	1805883a 	mov	r2,r3
 40032c0:	dfc00217 	ldw	ra,8(sp)
 40032c4:	dc400117 	ldw	r17,4(sp)
 40032c8:	dc000017 	ldw	r16,0(sp)
 40032cc:	dec00304 	addi	sp,sp,12
 40032d0:	f800283a 	ret
 40032d4:	80800017 	ldw	r2,0(r16)
 40032d8:	103ff826 	beq	r2,zero,40032bc <_close_r+0x34>
 40032dc:	88800015 	stw	r2,0(r17)
 40032e0:	1805883a 	mov	r2,r3
 40032e4:	dfc00217 	ldw	ra,8(sp)
 40032e8:	dc400117 	ldw	r17,4(sp)
 40032ec:	dc000017 	ldw	r16,0(sp)
 40032f0:	dec00304 	addi	sp,sp,12
 40032f4:	f800283a 	ret

040032f8 <_fclose_r>:
 40032f8:	defffc04 	addi	sp,sp,-16
 40032fc:	dc400115 	stw	r17,4(sp)
 4003300:	dc000015 	stw	r16,0(sp)
 4003304:	dfc00315 	stw	ra,12(sp)
 4003308:	dc800215 	stw	r18,8(sp)
 400330c:	2821883a 	mov	r16,r5
 4003310:	2023883a 	mov	r17,r4
 4003314:	28002926 	beq	r5,zero,40033bc <_fclose_r+0xc4>
 4003318:	40026700 	call	4002670 <__sfp_lock_acquire>
 400331c:	88000226 	beq	r17,zero,4003328 <_fclose_r+0x30>
 4003320:	88800e17 	ldw	r2,56(r17)
 4003324:	10002d26 	beq	r2,zero,40033dc <_fclose_r+0xe4>
 4003328:	8080030f 	ldh	r2,12(r16)
 400332c:	10002226 	beq	r2,zero,40033b8 <_fclose_r+0xc0>
 4003330:	8809883a 	mov	r4,r17
 4003334:	800b883a 	mov	r5,r16
 4003338:	40023e80 	call	40023e8 <_fflush_r>
 400333c:	1025883a 	mov	r18,r2
 4003340:	80800b17 	ldw	r2,44(r16)
 4003344:	10000426 	beq	r2,zero,4003358 <_fclose_r+0x60>
 4003348:	81400717 	ldw	r5,28(r16)
 400334c:	8809883a 	mov	r4,r17
 4003350:	103ee83a 	callr	r2
 4003354:	10002a16 	blt	r2,zero,4003400 <_fclose_r+0x108>
 4003358:	8080030b 	ldhu	r2,12(r16)
 400335c:	1080200c 	andi	r2,r2,128
 4003360:	1000231e 	bne	r2,zero,40033f0 <_fclose_r+0xf8>
 4003364:	81400c17 	ldw	r5,48(r16)
 4003368:	28000526 	beq	r5,zero,4003380 <_fclose_r+0x88>
 400336c:	80801004 	addi	r2,r16,64
 4003370:	28800226 	beq	r5,r2,400337c <_fclose_r+0x84>
 4003374:	8809883a 	mov	r4,r17
 4003378:	4002a040 	call	4002a04 <_free_r>
 400337c:	80000c15 	stw	zero,48(r16)
 4003380:	81401117 	ldw	r5,68(r16)
 4003384:	28000326 	beq	r5,zero,4003394 <_fclose_r+0x9c>
 4003388:	8809883a 	mov	r4,r17
 400338c:	4002a040 	call	4002a04 <_free_r>
 4003390:	80001115 	stw	zero,68(r16)
 4003394:	8000030d 	sth	zero,12(r16)
 4003398:	40026740 	call	4002674 <__sfp_lock_release>
 400339c:	9005883a 	mov	r2,r18
 40033a0:	dfc00317 	ldw	ra,12(sp)
 40033a4:	dc800217 	ldw	r18,8(sp)
 40033a8:	dc400117 	ldw	r17,4(sp)
 40033ac:	dc000017 	ldw	r16,0(sp)
 40033b0:	dec00404 	addi	sp,sp,16
 40033b4:	f800283a 	ret
 40033b8:	40026740 	call	4002674 <__sfp_lock_release>
 40033bc:	0025883a 	mov	r18,zero
 40033c0:	9005883a 	mov	r2,r18
 40033c4:	dfc00317 	ldw	ra,12(sp)
 40033c8:	dc800217 	ldw	r18,8(sp)
 40033cc:	dc400117 	ldw	r17,4(sp)
 40033d0:	dc000017 	ldw	r16,0(sp)
 40033d4:	dec00404 	addi	sp,sp,16
 40033d8:	f800283a 	ret
 40033dc:	8809883a 	mov	r4,r17
 40033e0:	40026800 	call	4002680 <__sinit>
 40033e4:	8080030f 	ldh	r2,12(r16)
 40033e8:	103fd11e 	bne	r2,zero,4003330 <_fclose_r+0x38>
 40033ec:	003ff206 	br	40033b8 <_fclose_r+0xc0>
 40033f0:	81400417 	ldw	r5,16(r16)
 40033f4:	8809883a 	mov	r4,r17
 40033f8:	4002a040 	call	4002a04 <_free_r>
 40033fc:	003fd906 	br	4003364 <_fclose_r+0x6c>
 4003400:	04bfffc4 	movi	r18,-1
 4003404:	003fd406 	br	4003358 <_fclose_r+0x60>

04003408 <fclose>:
 4003408:	00810074 	movhi	r2,1025
 400340c:	10a6ef04 	addi	r2,r2,-25668
 4003410:	200b883a 	mov	r5,r4
 4003414:	11000017 	ldw	r4,0(r2)
 4003418:	40032f81 	jmpi	40032f8 <_fclose_r>

0400341c <_fstat_r>:
 400341c:	defffd04 	addi	sp,sp,-12
 4003420:	dc000015 	stw	r16,0(sp)
 4003424:	04010074 	movhi	r16,1025
 4003428:	842e1104 	addi	r16,r16,-18364
 400342c:	dc400115 	stw	r17,4(sp)
 4003430:	80000015 	stw	zero,0(r16)
 4003434:	2023883a 	mov	r17,r4
 4003438:	2809883a 	mov	r4,r5
 400343c:	300b883a 	mov	r5,r6
 4003440:	dfc00215 	stw	ra,8(sp)
 4003444:	40037780 	call	4003778 <fstat>
 4003448:	1007883a 	mov	r3,r2
 400344c:	00bfffc4 	movi	r2,-1
 4003450:	18800626 	beq	r3,r2,400346c <_fstat_r+0x50>
 4003454:	1805883a 	mov	r2,r3
 4003458:	dfc00217 	ldw	ra,8(sp)
 400345c:	dc400117 	ldw	r17,4(sp)
 4003460:	dc000017 	ldw	r16,0(sp)
 4003464:	dec00304 	addi	sp,sp,12
 4003468:	f800283a 	ret
 400346c:	80800017 	ldw	r2,0(r16)
 4003470:	103ff826 	beq	r2,zero,4003454 <_fstat_r+0x38>
 4003474:	88800015 	stw	r2,0(r17)
 4003478:	1805883a 	mov	r2,r3
 400347c:	dfc00217 	ldw	ra,8(sp)
 4003480:	dc400117 	ldw	r17,4(sp)
 4003484:	dc000017 	ldw	r16,0(sp)
 4003488:	dec00304 	addi	sp,sp,12
 400348c:	f800283a 	ret

04003490 <_isatty_r>:
 4003490:	defffd04 	addi	sp,sp,-12
 4003494:	dc000015 	stw	r16,0(sp)
 4003498:	04010074 	movhi	r16,1025
 400349c:	842e1104 	addi	r16,r16,-18364
 40034a0:	dc400115 	stw	r17,4(sp)
 40034a4:	80000015 	stw	zero,0(r16)
 40034a8:	2023883a 	mov	r17,r4
 40034ac:	2809883a 	mov	r4,r5
 40034b0:	dfc00215 	stw	ra,8(sp)
 40034b4:	4003a6c0 	call	4003a6c <isatty>
 40034b8:	1007883a 	mov	r3,r2
 40034bc:	00bfffc4 	movi	r2,-1
 40034c0:	18800626 	beq	r3,r2,40034dc <_isatty_r+0x4c>
 40034c4:	1805883a 	mov	r2,r3
 40034c8:	dfc00217 	ldw	ra,8(sp)
 40034cc:	dc400117 	ldw	r17,4(sp)
 40034d0:	dc000017 	ldw	r16,0(sp)
 40034d4:	dec00304 	addi	sp,sp,12
 40034d8:	f800283a 	ret
 40034dc:	80800017 	ldw	r2,0(r16)
 40034e0:	103ff826 	beq	r2,zero,40034c4 <_isatty_r+0x34>
 40034e4:	88800015 	stw	r2,0(r17)
 40034e8:	1805883a 	mov	r2,r3
 40034ec:	dfc00217 	ldw	ra,8(sp)
 40034f0:	dc400117 	ldw	r17,4(sp)
 40034f4:	dc000017 	ldw	r16,0(sp)
 40034f8:	dec00304 	addi	sp,sp,12
 40034fc:	f800283a 	ret

04003500 <_lseek_r>:
 4003500:	defffd04 	addi	sp,sp,-12
 4003504:	dc000015 	stw	r16,0(sp)
 4003508:	04010074 	movhi	r16,1025
 400350c:	842e1104 	addi	r16,r16,-18364
 4003510:	dc400115 	stw	r17,4(sp)
 4003514:	80000015 	stw	zero,0(r16)
 4003518:	2023883a 	mov	r17,r4
 400351c:	2809883a 	mov	r4,r5
 4003520:	300b883a 	mov	r5,r6
 4003524:	380d883a 	mov	r6,r7
 4003528:	dfc00215 	stw	ra,8(sp)
 400352c:	4003c780 	call	4003c78 <lseek>
 4003530:	1007883a 	mov	r3,r2
 4003534:	00bfffc4 	movi	r2,-1
 4003538:	18800626 	beq	r3,r2,4003554 <_lseek_r+0x54>
 400353c:	1805883a 	mov	r2,r3
 4003540:	dfc00217 	ldw	ra,8(sp)
 4003544:	dc400117 	ldw	r17,4(sp)
 4003548:	dc000017 	ldw	r16,0(sp)
 400354c:	dec00304 	addi	sp,sp,12
 4003550:	f800283a 	ret
 4003554:	80800017 	ldw	r2,0(r16)
 4003558:	103ff826 	beq	r2,zero,400353c <_lseek_r+0x3c>
 400355c:	88800015 	stw	r2,0(r17)
 4003560:	1805883a 	mov	r2,r3
 4003564:	dfc00217 	ldw	ra,8(sp)
 4003568:	dc400117 	ldw	r17,4(sp)
 400356c:	dc000017 	ldw	r16,0(sp)
 4003570:	dec00304 	addi	sp,sp,12
 4003574:	f800283a 	ret

04003578 <_read_r>:
 4003578:	defffd04 	addi	sp,sp,-12
 400357c:	dc000015 	stw	r16,0(sp)
 4003580:	04010074 	movhi	r16,1025
 4003584:	842e1104 	addi	r16,r16,-18364
 4003588:	dc400115 	stw	r17,4(sp)
 400358c:	80000015 	stw	zero,0(r16)
 4003590:	2023883a 	mov	r17,r4
 4003594:	2809883a 	mov	r4,r5
 4003598:	300b883a 	mov	r5,r6
 400359c:	380d883a 	mov	r6,r7
 40035a0:	dfc00215 	stw	ra,8(sp)
 40035a4:	4003e740 	call	4003e74 <read>
 40035a8:	1007883a 	mov	r3,r2
 40035ac:	00bfffc4 	movi	r2,-1
 40035b0:	18800626 	beq	r3,r2,40035cc <_read_r+0x54>
 40035b4:	1805883a 	mov	r2,r3
 40035b8:	dfc00217 	ldw	ra,8(sp)
 40035bc:	dc400117 	ldw	r17,4(sp)
 40035c0:	dc000017 	ldw	r16,0(sp)
 40035c4:	dec00304 	addi	sp,sp,12
 40035c8:	f800283a 	ret
 40035cc:	80800017 	ldw	r2,0(r16)
 40035d0:	103ff826 	beq	r2,zero,40035b4 <_read_r+0x3c>
 40035d4:	88800015 	stw	r2,0(r17)
 40035d8:	1805883a 	mov	r2,r3
 40035dc:	dfc00217 	ldw	ra,8(sp)
 40035e0:	dc400117 	ldw	r17,4(sp)
 40035e4:	dc000017 	ldw	r16,0(sp)
 40035e8:	dec00304 	addi	sp,sp,12
 40035ec:	f800283a 	ret

040035f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40035f0:	defff804 	addi	sp,sp,-32
 40035f4:	dfc00715 	stw	ra,28(sp)
 40035f8:	df000615 	stw	fp,24(sp)
 40035fc:	df000604 	addi	fp,sp,24
 4003600:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4003604:	e0bffc17 	ldw	r2,-16(fp)
 4003608:	1004803a 	cmplt	r2,r2,zero
 400360c:	1000081e 	bne	r2,zero,4003630 <close+0x40>
 4003610:	e0bffc17 	ldw	r2,-16(fp)
 4003614:	10800324 	muli	r2,r2,12
 4003618:	1007883a 	mov	r3,r2
 400361c:	00810074 	movhi	r2,1025
 4003620:	10a1fe04 	addi	r2,r2,-30728
 4003624:	1887883a 	add	r3,r3,r2
 4003628:	e0ffff15 	stw	r3,-4(fp)
 400362c:	00000106 	br	4003634 <close+0x44>
 4003630:	e03fff15 	stw	zero,-4(fp)
 4003634:	e0bfff17 	ldw	r2,-4(fp)
 4003638:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 400363c:	e0bffb17 	ldw	r2,-20(fp)
 4003640:	1005003a 	cmpeq	r2,r2,zero
 4003644:	10001d1e 	bne	r2,zero,40036bc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4003648:	e0bffb17 	ldw	r2,-20(fp)
 400364c:	10800017 	ldw	r2,0(r2)
 4003650:	10800417 	ldw	r2,16(r2)
 4003654:	1005003a 	cmpeq	r2,r2,zero
 4003658:	1000071e 	bne	r2,zero,4003678 <close+0x88>
 400365c:	e0bffb17 	ldw	r2,-20(fp)
 4003660:	10800017 	ldw	r2,0(r2)
 4003664:	10800417 	ldw	r2,16(r2)
 4003668:	e13ffb17 	ldw	r4,-20(fp)
 400366c:	103ee83a 	callr	r2
 4003670:	e0bffe15 	stw	r2,-8(fp)
 4003674:	00000106 	br	400367c <close+0x8c>
 4003678:	e03ffe15 	stw	zero,-8(fp)
 400367c:	e0bffe17 	ldw	r2,-8(fp)
 4003680:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4003684:	e13ffc17 	ldw	r4,-16(fp)
 4003688:	4003ff40 	call	4003ff4 <alt_release_fd>
    if (rval < 0)
 400368c:	e0bffa17 	ldw	r2,-24(fp)
 4003690:	1004403a 	cmpge	r2,r2,zero
 4003694:	1000071e 	bne	r2,zero,40036b4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 4003698:	40036ec0 	call	40036ec <alt_get_errno>
 400369c:	e0fffa17 	ldw	r3,-24(fp)
 40036a0:	00c7c83a 	sub	r3,zero,r3
 40036a4:	10c00015 	stw	r3,0(r2)
      return -1;
 40036a8:	00bfffc4 	movi	r2,-1
 40036ac:	e0bffd15 	stw	r2,-12(fp)
 40036b0:	00000806 	br	40036d4 <close+0xe4>
    }
    return 0;
 40036b4:	e03ffd15 	stw	zero,-12(fp)
 40036b8:	00000606 	br	40036d4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40036bc:	40036ec0 	call	40036ec <alt_get_errno>
 40036c0:	1007883a 	mov	r3,r2
 40036c4:	00801444 	movi	r2,81
 40036c8:	18800015 	stw	r2,0(r3)
    return -1;
 40036cc:	00bfffc4 	movi	r2,-1
 40036d0:	e0bffd15 	stw	r2,-12(fp)
 40036d4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 40036d8:	e037883a 	mov	sp,fp
 40036dc:	dfc00117 	ldw	ra,4(sp)
 40036e0:	df000017 	ldw	fp,0(sp)
 40036e4:	dec00204 	addi	sp,sp,8
 40036e8:	f800283a 	ret

040036ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40036ec:	defffd04 	addi	sp,sp,-12
 40036f0:	dfc00215 	stw	ra,8(sp)
 40036f4:	df000115 	stw	fp,4(sp)
 40036f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40036fc:	00810074 	movhi	r2,1025
 4003700:	10a6f804 	addi	r2,r2,-25632
 4003704:	10800017 	ldw	r2,0(r2)
 4003708:	1005003a 	cmpeq	r2,r2,zero
 400370c:	1000061e 	bne	r2,zero,4003728 <alt_get_errno+0x3c>
 4003710:	00810074 	movhi	r2,1025
 4003714:	10a6f804 	addi	r2,r2,-25632
 4003718:	10800017 	ldw	r2,0(r2)
 400371c:	103ee83a 	callr	r2
 4003720:	e0bfff15 	stw	r2,-4(fp)
 4003724:	00000306 	br	4003734 <alt_get_errno+0x48>
 4003728:	00810074 	movhi	r2,1025
 400372c:	10ae1104 	addi	r2,r2,-18364
 4003730:	e0bfff15 	stw	r2,-4(fp)
 4003734:	e0bfff17 	ldw	r2,-4(fp)
}
 4003738:	e037883a 	mov	sp,fp
 400373c:	dfc00117 	ldw	ra,4(sp)
 4003740:	df000017 	ldw	fp,0(sp)
 4003744:	dec00204 	addi	sp,sp,8
 4003748:	f800283a 	ret

0400374c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400374c:	defffc04 	addi	sp,sp,-16
 4003750:	df000315 	stw	fp,12(sp)
 4003754:	df000304 	addi	fp,sp,12
 4003758:	e13ffd15 	stw	r4,-12(fp)
 400375c:	e17ffe15 	stw	r5,-8(fp)
 4003760:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4003764:	e0bfff17 	ldw	r2,-4(fp)
}
 4003768:	e037883a 	mov	sp,fp
 400376c:	df000017 	ldw	fp,0(sp)
 4003770:	dec00104 	addi	sp,sp,4
 4003774:	f800283a 	ret

04003778 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4003778:	defff904 	addi	sp,sp,-28
 400377c:	dfc00615 	stw	ra,24(sp)
 4003780:	df000515 	stw	fp,20(sp)
 4003784:	df000504 	addi	fp,sp,20
 4003788:	e13ffc15 	stw	r4,-16(fp)
 400378c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003790:	e0bffc17 	ldw	r2,-16(fp)
 4003794:	1004803a 	cmplt	r2,r2,zero
 4003798:	1000081e 	bne	r2,zero,40037bc <fstat+0x44>
 400379c:	e0bffc17 	ldw	r2,-16(fp)
 40037a0:	10800324 	muli	r2,r2,12
 40037a4:	1007883a 	mov	r3,r2
 40037a8:	00810074 	movhi	r2,1025
 40037ac:	10a1fe04 	addi	r2,r2,-30728
 40037b0:	1887883a 	add	r3,r3,r2
 40037b4:	e0ffff15 	stw	r3,-4(fp)
 40037b8:	00000106 	br	40037c0 <fstat+0x48>
 40037bc:	e03fff15 	stw	zero,-4(fp)
 40037c0:	e0bfff17 	ldw	r2,-4(fp)
 40037c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40037c8:	e0bffb17 	ldw	r2,-20(fp)
 40037cc:	1005003a 	cmpeq	r2,r2,zero
 40037d0:	1000121e 	bne	r2,zero,400381c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40037d4:	e0bffb17 	ldw	r2,-20(fp)
 40037d8:	10800017 	ldw	r2,0(r2)
 40037dc:	10800817 	ldw	r2,32(r2)
 40037e0:	1005003a 	cmpeq	r2,r2,zero
 40037e4:	1000081e 	bne	r2,zero,4003808 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 40037e8:	e0bffb17 	ldw	r2,-20(fp)
 40037ec:	10800017 	ldw	r2,0(r2)
 40037f0:	10800817 	ldw	r2,32(r2)
 40037f4:	e13ffb17 	ldw	r4,-20(fp)
 40037f8:	e17ffd17 	ldw	r5,-12(fp)
 40037fc:	103ee83a 	callr	r2
 4003800:	e0bffe15 	stw	r2,-8(fp)
 4003804:	00000b06 	br	4003834 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4003808:	e0fffd17 	ldw	r3,-12(fp)
 400380c:	00880004 	movi	r2,8192
 4003810:	18800115 	stw	r2,4(r3)
      return 0;
 4003814:	e03ffe15 	stw	zero,-8(fp)
 4003818:	00000606 	br	4003834 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400381c:	400384c0 	call	400384c <alt_get_errno>
 4003820:	1007883a 	mov	r3,r2
 4003824:	00801444 	movi	r2,81
 4003828:	18800015 	stw	r2,0(r3)
    return -1;
 400382c:	00bfffc4 	movi	r2,-1
 4003830:	e0bffe15 	stw	r2,-8(fp)
 4003834:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 4003838:	e037883a 	mov	sp,fp
 400383c:	dfc00117 	ldw	ra,4(sp)
 4003840:	df000017 	ldw	fp,0(sp)
 4003844:	dec00204 	addi	sp,sp,8
 4003848:	f800283a 	ret

0400384c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400384c:	defffd04 	addi	sp,sp,-12
 4003850:	dfc00215 	stw	ra,8(sp)
 4003854:	df000115 	stw	fp,4(sp)
 4003858:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400385c:	00810074 	movhi	r2,1025
 4003860:	10a6f804 	addi	r2,r2,-25632
 4003864:	10800017 	ldw	r2,0(r2)
 4003868:	1005003a 	cmpeq	r2,r2,zero
 400386c:	1000061e 	bne	r2,zero,4003888 <alt_get_errno+0x3c>
 4003870:	00810074 	movhi	r2,1025
 4003874:	10a6f804 	addi	r2,r2,-25632
 4003878:	10800017 	ldw	r2,0(r2)
 400387c:	103ee83a 	callr	r2
 4003880:	e0bfff15 	stw	r2,-4(fp)
 4003884:	00000306 	br	4003894 <alt_get_errno+0x48>
 4003888:	00810074 	movhi	r2,1025
 400388c:	10ae1104 	addi	r2,r2,-18364
 4003890:	e0bfff15 	stw	r2,-4(fp)
 4003894:	e0bfff17 	ldw	r2,-4(fp)
}
 4003898:	e037883a 	mov	sp,fp
 400389c:	dfc00117 	ldw	ra,4(sp)
 40038a0:	df000017 	ldw	fp,0(sp)
 40038a4:	dec00204 	addi	sp,sp,8
 40038a8:	f800283a 	ret

040038ac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 40038ac:	deffef04 	addi	sp,sp,-68
 40038b0:	df001015 	stw	fp,64(sp)
 40038b4:	df001004 	addi	fp,sp,64
 40038b8:	e13ffc15 	stw	r4,-16(fp)
 40038bc:	e17ffd15 	stw	r5,-12(fp)
 40038c0:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 40038c4:	00bffa84 	movi	r2,-22
 40038c8:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40038cc:	e0bffc17 	ldw	r2,-16(fp)
 40038d0:	10800828 	cmpgeui	r2,r2,32
 40038d4:	1000601e 	bne	r2,zero,4003a58 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40038d8:	0005303a 	rdctl	r2,status
 40038dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40038e0:	e0fff917 	ldw	r3,-28(fp)
 40038e4:	00bfff84 	movi	r2,-2
 40038e8:	1884703a 	and	r2,r3,r2
 40038ec:	1001703a 	wrctl	status,r2
  
  return context;
 40038f0:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 40038f4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 40038f8:	e0bffc17 	ldw	r2,-16(fp)
 40038fc:	00c10074 	movhi	r3,1025
 4003900:	18f02204 	addi	r3,r3,-16248
 4003904:	100490fa 	slli	r2,r2,3
 4003908:	10c7883a 	add	r3,r2,r3
 400390c:	e0bffe17 	ldw	r2,-8(fp)
 4003910:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 4003914:	e0bffc17 	ldw	r2,-16(fp)
 4003918:	00c10074 	movhi	r3,1025
 400391c:	18f02204 	addi	r3,r3,-16248
 4003920:	100490fa 	slli	r2,r2,3
 4003924:	10c5883a 	add	r2,r2,r3
 4003928:	10c00104 	addi	r3,r2,4
 400392c:	e0bffd17 	ldw	r2,-12(fp)
 4003930:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 4003934:	e0bffe17 	ldw	r2,-8(fp)
 4003938:	1005003a 	cmpeq	r2,r2,zero
 400393c:	1000201e 	bne	r2,zero,40039c0 <alt_irq_register+0x114>
 4003940:	e0bffc17 	ldw	r2,-16(fp)
 4003944:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003948:	0005303a 	rdctl	r2,status
 400394c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003950:	e0fff617 	ldw	r3,-40(fp)
 4003954:	00bfff84 	movi	r2,-2
 4003958:	1884703a 	and	r2,r3,r2
 400395c:	1001703a 	wrctl	status,r2
  
  return context;
 4003960:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4003964:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 4003968:	e0fff717 	ldw	r3,-36(fp)
 400396c:	00800044 	movi	r2,1
 4003970:	10c4983a 	sll	r2,r2,r3
 4003974:	1007883a 	mov	r3,r2
 4003978:	00810074 	movhi	r2,1025
 400397c:	10ae1204 	addi	r2,r2,-18360
 4003980:	10800017 	ldw	r2,0(r2)
 4003984:	1886b03a 	or	r3,r3,r2
 4003988:	00810074 	movhi	r2,1025
 400398c:	10ae1204 	addi	r2,r2,-18360
 4003990:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4003994:	00810074 	movhi	r2,1025
 4003998:	10ae1204 	addi	r2,r2,-18360
 400399c:	10800017 	ldw	r2,0(r2)
 40039a0:	100170fa 	wrctl	ienable,r2
 40039a4:	e0bff817 	ldw	r2,-32(fp)
 40039a8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40039ac:	e0bff517 	ldw	r2,-44(fp)
 40039b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40039b4:	0005883a 	mov	r2,zero
 40039b8:	e0bfff15 	stw	r2,-4(fp)
 40039bc:	00002006 	br	4003a40 <alt_irq_register+0x194>
 40039c0:	e0bffc17 	ldw	r2,-16(fp)
 40039c4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40039c8:	0005303a 	rdctl	r2,status
 40039cc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40039d0:	e0fff217 	ldw	r3,-56(fp)
 40039d4:	00bfff84 	movi	r2,-2
 40039d8:	1884703a 	and	r2,r3,r2
 40039dc:	1001703a 	wrctl	status,r2
  
  return context;
 40039e0:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40039e4:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 40039e8:	e0fff317 	ldw	r3,-52(fp)
 40039ec:	00800044 	movi	r2,1
 40039f0:	10c4983a 	sll	r2,r2,r3
 40039f4:	0084303a 	nor	r2,zero,r2
 40039f8:	1007883a 	mov	r3,r2
 40039fc:	00810074 	movhi	r2,1025
 4003a00:	10ae1204 	addi	r2,r2,-18360
 4003a04:	10800017 	ldw	r2,0(r2)
 4003a08:	1886703a 	and	r3,r3,r2
 4003a0c:	00810074 	movhi	r2,1025
 4003a10:	10ae1204 	addi	r2,r2,-18360
 4003a14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4003a18:	00810074 	movhi	r2,1025
 4003a1c:	10ae1204 	addi	r2,r2,-18360
 4003a20:	10800017 	ldw	r2,0(r2)
 4003a24:	100170fa 	wrctl	ienable,r2
 4003a28:	e0bff417 	ldw	r2,-48(fp)
 4003a2c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003a30:	e0bff117 	ldw	r2,-60(fp)
 4003a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4003a38:	0005883a 	mov	r2,zero
 4003a3c:	e0bfff15 	stw	r2,-4(fp)
 4003a40:	e0bfff17 	ldw	r2,-4(fp)
 4003a44:	e0bffb15 	stw	r2,-20(fp)
 4003a48:	e0bffa17 	ldw	r2,-24(fp)
 4003a4c:	e0bff015 	stw	r2,-64(fp)
 4003a50:	e0bff017 	ldw	r2,-64(fp)
 4003a54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 4003a58:	e0bffb17 	ldw	r2,-20(fp)
}
 4003a5c:	e037883a 	mov	sp,fp
 4003a60:	df000017 	ldw	fp,0(sp)
 4003a64:	dec00104 	addi	sp,sp,4
 4003a68:	f800283a 	ret

04003a6c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4003a6c:	deffeb04 	addi	sp,sp,-84
 4003a70:	dfc01415 	stw	ra,80(sp)
 4003a74:	df001315 	stw	fp,76(sp)
 4003a78:	df001304 	addi	fp,sp,76
 4003a7c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003a80:	e0bffd17 	ldw	r2,-12(fp)
 4003a84:	1004803a 	cmplt	r2,r2,zero
 4003a88:	1000081e 	bne	r2,zero,4003aac <isatty+0x40>
 4003a8c:	e0bffd17 	ldw	r2,-12(fp)
 4003a90:	10800324 	muli	r2,r2,12
 4003a94:	1007883a 	mov	r3,r2
 4003a98:	00810074 	movhi	r2,1025
 4003a9c:	10a1fe04 	addi	r2,r2,-30728
 4003aa0:	1887883a 	add	r3,r3,r2
 4003aa4:	e0ffff15 	stw	r3,-4(fp)
 4003aa8:	00000106 	br	4003ab0 <isatty+0x44>
 4003aac:	e03fff15 	stw	zero,-4(fp)
 4003ab0:	e0bfff17 	ldw	r2,-4(fp)
 4003ab4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 4003ab8:	e0bfed17 	ldw	r2,-76(fp)
 4003abc:	1005003a 	cmpeq	r2,r2,zero
 4003ac0:	10000f1e 	bne	r2,zero,4003b00 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4003ac4:	e0bfed17 	ldw	r2,-76(fp)
 4003ac8:	10800017 	ldw	r2,0(r2)
 4003acc:	10800817 	ldw	r2,32(r2)
 4003ad0:	1004c03a 	cmpne	r2,r2,zero
 4003ad4:	1000031e 	bne	r2,zero,4003ae4 <isatty+0x78>
    {
      return 1;
 4003ad8:	00800044 	movi	r2,1
 4003adc:	e0bffe15 	stw	r2,-8(fp)
 4003ae0:	00000c06 	br	4003b14 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4003ae4:	e17fee04 	addi	r5,fp,-72
 4003ae8:	e13ffd17 	ldw	r4,-12(fp)
 4003aec:	40037780 	call	4003778 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4003af0:	e0bfef17 	ldw	r2,-68(fp)
 4003af4:	10880020 	cmpeqi	r2,r2,8192
 4003af8:	e0bffe15 	stw	r2,-8(fp)
 4003afc:	00000506 	br	4003b14 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003b00:	4003b2c0 	call	4003b2c <alt_get_errno>
 4003b04:	1007883a 	mov	r3,r2
 4003b08:	00801444 	movi	r2,81
 4003b0c:	18800015 	stw	r2,0(r3)
    return 0;
 4003b10:	e03ffe15 	stw	zero,-8(fp)
 4003b14:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 4003b18:	e037883a 	mov	sp,fp
 4003b1c:	dfc00117 	ldw	ra,4(sp)
 4003b20:	df000017 	ldw	fp,0(sp)
 4003b24:	dec00204 	addi	sp,sp,8
 4003b28:	f800283a 	ret

04003b2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003b2c:	defffd04 	addi	sp,sp,-12
 4003b30:	dfc00215 	stw	ra,8(sp)
 4003b34:	df000115 	stw	fp,4(sp)
 4003b38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003b3c:	00810074 	movhi	r2,1025
 4003b40:	10a6f804 	addi	r2,r2,-25632
 4003b44:	10800017 	ldw	r2,0(r2)
 4003b48:	1005003a 	cmpeq	r2,r2,zero
 4003b4c:	1000061e 	bne	r2,zero,4003b68 <alt_get_errno+0x3c>
 4003b50:	00810074 	movhi	r2,1025
 4003b54:	10a6f804 	addi	r2,r2,-25632
 4003b58:	10800017 	ldw	r2,0(r2)
 4003b5c:	103ee83a 	callr	r2
 4003b60:	e0bfff15 	stw	r2,-4(fp)
 4003b64:	00000306 	br	4003b74 <alt_get_errno+0x48>
 4003b68:	00810074 	movhi	r2,1025
 4003b6c:	10ae1104 	addi	r2,r2,-18364
 4003b70:	e0bfff15 	stw	r2,-4(fp)
 4003b74:	e0bfff17 	ldw	r2,-4(fp)
}
 4003b78:	e037883a 	mov	sp,fp
 4003b7c:	dfc00117 	ldw	ra,4(sp)
 4003b80:	df000017 	ldw	fp,0(sp)
 4003b84:	dec00204 	addi	sp,sp,8
 4003b88:	f800283a 	ret

04003b8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4003b8c:	defffe04 	addi	sp,sp,-8
 4003b90:	dfc00115 	stw	ra,4(sp)
 4003b94:	df000015 	stw	fp,0(sp)
 4003b98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4003b9c:	01010074 	movhi	r4,1025
 4003ba0:	2126ff04 	addi	r4,r4,-25604
 4003ba4:	01410034 	movhi	r5,1024
 4003ba8:	295ff204 	addi	r5,r5,32712
 4003bac:	01810074 	movhi	r6,1025
 4003bb0:	31a6ff04 	addi	r6,r6,-25604
 4003bb4:	4003c0c0 	call	4003c0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4003bb8:	01010034 	movhi	r4,1024
 4003bbc:	21000804 	addi	r4,r4,32
 4003bc0:	01410034 	movhi	r5,1024
 4003bc4:	29400804 	addi	r5,r5,32
 4003bc8:	01810034 	movhi	r6,1024
 4003bcc:	31806d04 	addi	r6,r6,436
 4003bd0:	4003c0c0 	call	4003c0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4003bd4:	01010034 	movhi	r4,1024
 4003bd8:	211f3904 	addi	r4,r4,31972
 4003bdc:	01410034 	movhi	r5,1024
 4003be0:	295f3904 	addi	r5,r5,31972
 4003be4:	01810034 	movhi	r6,1024
 4003be8:	319ff204 	addi	r6,r6,32712
 4003bec:	4003c0c0 	call	4003c0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4003bf0:	4006afc0 	call	4006afc <alt_dcache_flush_all>
  alt_icache_flush_all();
 4003bf4:	4006d1c0 	call	4006d1c <alt_icache_flush_all>
}
 4003bf8:	e037883a 	mov	sp,fp
 4003bfc:	dfc00117 	ldw	ra,4(sp)
 4003c00:	df000017 	ldw	fp,0(sp)
 4003c04:	dec00204 	addi	sp,sp,8
 4003c08:	f800283a 	ret

04003c0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4003c0c:	defffc04 	addi	sp,sp,-16
 4003c10:	df000315 	stw	fp,12(sp)
 4003c14:	df000304 	addi	fp,sp,12
 4003c18:	e13ffd15 	stw	r4,-12(fp)
 4003c1c:	e17ffe15 	stw	r5,-8(fp)
 4003c20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4003c24:	e0fffe17 	ldw	r3,-8(fp)
 4003c28:	e0bffd17 	ldw	r2,-12(fp)
 4003c2c:	18800e26 	beq	r3,r2,4003c68 <alt_load_section+0x5c>
  {
    while( to != end )
 4003c30:	00000a06 	br	4003c5c <alt_load_section+0x50>
    {
      *to++ = *from++;
 4003c34:	e0bffd17 	ldw	r2,-12(fp)
 4003c38:	10c00017 	ldw	r3,0(r2)
 4003c3c:	e0bffe17 	ldw	r2,-8(fp)
 4003c40:	10c00015 	stw	r3,0(r2)
 4003c44:	e0bffe17 	ldw	r2,-8(fp)
 4003c48:	10800104 	addi	r2,r2,4
 4003c4c:	e0bffe15 	stw	r2,-8(fp)
 4003c50:	e0bffd17 	ldw	r2,-12(fp)
 4003c54:	10800104 	addi	r2,r2,4
 4003c58:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4003c5c:	e0fffe17 	ldw	r3,-8(fp)
 4003c60:	e0bfff17 	ldw	r2,-4(fp)
 4003c64:	18bff31e 	bne	r3,r2,4003c34 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 4003c68:	e037883a 	mov	sp,fp
 4003c6c:	df000017 	ldw	fp,0(sp)
 4003c70:	dec00104 	addi	sp,sp,4
 4003c74:	f800283a 	ret

04003c78 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4003c78:	defff804 	addi	sp,sp,-32
 4003c7c:	dfc00715 	stw	ra,28(sp)
 4003c80:	df000615 	stw	fp,24(sp)
 4003c84:	df000604 	addi	fp,sp,24
 4003c88:	e13ffc15 	stw	r4,-16(fp)
 4003c8c:	e17ffd15 	stw	r5,-12(fp)
 4003c90:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4003c94:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003c98:	e0bffc17 	ldw	r2,-16(fp)
 4003c9c:	1004803a 	cmplt	r2,r2,zero
 4003ca0:	1000081e 	bne	r2,zero,4003cc4 <lseek+0x4c>
 4003ca4:	e0bffc17 	ldw	r2,-16(fp)
 4003ca8:	10800324 	muli	r2,r2,12
 4003cac:	1007883a 	mov	r3,r2
 4003cb0:	00810074 	movhi	r2,1025
 4003cb4:	10a1fe04 	addi	r2,r2,-30728
 4003cb8:	1887883a 	add	r3,r3,r2
 4003cbc:	e0ffff15 	stw	r3,-4(fp)
 4003cc0:	00000106 	br	4003cc8 <lseek+0x50>
 4003cc4:	e03fff15 	stw	zero,-4(fp)
 4003cc8:	e0bfff17 	ldw	r2,-4(fp)
 4003ccc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 4003cd0:	e0bffb17 	ldw	r2,-20(fp)
 4003cd4:	1005003a 	cmpeq	r2,r2,zero
 4003cd8:	1000111e 	bne	r2,zero,4003d20 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4003cdc:	e0bffb17 	ldw	r2,-20(fp)
 4003ce0:	10800017 	ldw	r2,0(r2)
 4003ce4:	10800717 	ldw	r2,28(r2)
 4003ce8:	1005003a 	cmpeq	r2,r2,zero
 4003cec:	1000091e 	bne	r2,zero,4003d14 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4003cf0:	e0bffb17 	ldw	r2,-20(fp)
 4003cf4:	10800017 	ldw	r2,0(r2)
 4003cf8:	10800717 	ldw	r2,28(r2)
 4003cfc:	e13ffb17 	ldw	r4,-20(fp)
 4003d00:	e17ffd17 	ldw	r5,-12(fp)
 4003d04:	e1bffe17 	ldw	r6,-8(fp)
 4003d08:	103ee83a 	callr	r2
 4003d0c:	e0bffa15 	stw	r2,-24(fp)
 4003d10:	00000506 	br	4003d28 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4003d14:	00bfde84 	movi	r2,-134
 4003d18:	e0bffa15 	stw	r2,-24(fp)
 4003d1c:	00000206 	br	4003d28 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 4003d20:	00bfebc4 	movi	r2,-81
 4003d24:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 4003d28:	e0bffa17 	ldw	r2,-24(fp)
 4003d2c:	1004403a 	cmpge	r2,r2,zero
 4003d30:	1000071e 	bne	r2,zero,4003d50 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 4003d34:	4003d680 	call	4003d68 <alt_get_errno>
 4003d38:	1007883a 	mov	r3,r2
 4003d3c:	e0bffa17 	ldw	r2,-24(fp)
 4003d40:	0085c83a 	sub	r2,zero,r2
 4003d44:	18800015 	stw	r2,0(r3)
    rc = -1;
 4003d48:	00bfffc4 	movi	r2,-1
 4003d4c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 4003d50:	e0bffa17 	ldw	r2,-24(fp)
}
 4003d54:	e037883a 	mov	sp,fp
 4003d58:	dfc00117 	ldw	ra,4(sp)
 4003d5c:	df000017 	ldw	fp,0(sp)
 4003d60:	dec00204 	addi	sp,sp,8
 4003d64:	f800283a 	ret

04003d68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003d68:	defffd04 	addi	sp,sp,-12
 4003d6c:	dfc00215 	stw	ra,8(sp)
 4003d70:	df000115 	stw	fp,4(sp)
 4003d74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003d78:	00810074 	movhi	r2,1025
 4003d7c:	10a6f804 	addi	r2,r2,-25632
 4003d80:	10800017 	ldw	r2,0(r2)
 4003d84:	1005003a 	cmpeq	r2,r2,zero
 4003d88:	1000061e 	bne	r2,zero,4003da4 <alt_get_errno+0x3c>
 4003d8c:	00810074 	movhi	r2,1025
 4003d90:	10a6f804 	addi	r2,r2,-25632
 4003d94:	10800017 	ldw	r2,0(r2)
 4003d98:	103ee83a 	callr	r2
 4003d9c:	e0bfff15 	stw	r2,-4(fp)
 4003da0:	00000306 	br	4003db0 <alt_get_errno+0x48>
 4003da4:	00810074 	movhi	r2,1025
 4003da8:	10ae1104 	addi	r2,r2,-18364
 4003dac:	e0bfff15 	stw	r2,-4(fp)
 4003db0:	e0bfff17 	ldw	r2,-4(fp)
}
 4003db4:	e037883a 	mov	sp,fp
 4003db8:	dfc00117 	ldw	ra,4(sp)
 4003dbc:	df000017 	ldw	fp,0(sp)
 4003dc0:	dec00204 	addi	sp,sp,8
 4003dc4:	f800283a 	ret

04003dc8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4003dc8:	defffd04 	addi	sp,sp,-12
 4003dcc:	dfc00215 	stw	ra,8(sp)
 4003dd0:	df000115 	stw	fp,4(sp)
 4003dd4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4003dd8:	0009883a 	mov	r4,zero
 4003ddc:	40042c00 	call	40042c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4003de0:	40042f40 	call	40042f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4003de4:	01010034 	movhi	r4,1024
 4003de8:	211f4304 	addi	r4,r4,32012
 4003dec:	01410034 	movhi	r5,1024
 4003df0:	295f4304 	addi	r5,r5,32012
 4003df4:	01810034 	movhi	r6,1024
 4003df8:	319f4304 	addi	r6,r6,32012
 4003dfc:	40070dc0 	call	40070dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4003e00:	4006c540 	call	4006c54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4003e04:	01010034 	movhi	r4,1024
 4003e08:	211b2e04 	addi	r4,r4,27832
 4003e0c:	40078d80 	call	40078d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4003e10:	d1272417 	ldw	r4,-25456(gp)
 4003e14:	d1672517 	ldw	r5,-25452(gp)
 4003e18:	d1a72617 	ldw	r6,-25448(gp)
 4003e1c:	40005980 	call	4000598 <main>
 4003e20:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4003e24:	01000044 	movi	r4,1
 4003e28:	40035f00 	call	40035f0 <close>
  exit (result);
 4003e2c:	e13fff17 	ldw	r4,-4(fp)
 4003e30:	40078ec0 	call	40078ec <exit>

04003e34 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4003e34:	defffe04 	addi	sp,sp,-8
 4003e38:	df000115 	stw	fp,4(sp)
 4003e3c:	df000104 	addi	fp,sp,4
 4003e40:	e13fff15 	stw	r4,-4(fp)
}
 4003e44:	e037883a 	mov	sp,fp
 4003e48:	df000017 	ldw	fp,0(sp)
 4003e4c:	dec00104 	addi	sp,sp,4
 4003e50:	f800283a 	ret

04003e54 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4003e54:	defffe04 	addi	sp,sp,-8
 4003e58:	df000115 	stw	fp,4(sp)
 4003e5c:	df000104 	addi	fp,sp,4
 4003e60:	e13fff15 	stw	r4,-4(fp)
}
 4003e64:	e037883a 	mov	sp,fp
 4003e68:	df000017 	ldw	fp,0(sp)
 4003e6c:	dec00104 	addi	sp,sp,4
 4003e70:	f800283a 	ret

04003e74 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4003e74:	defff704 	addi	sp,sp,-36
 4003e78:	dfc00815 	stw	ra,32(sp)
 4003e7c:	df000715 	stw	fp,28(sp)
 4003e80:	df000704 	addi	fp,sp,28
 4003e84:	e13ffb15 	stw	r4,-20(fp)
 4003e88:	e17ffc15 	stw	r5,-16(fp)
 4003e8c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003e90:	e0bffb17 	ldw	r2,-20(fp)
 4003e94:	1004803a 	cmplt	r2,r2,zero
 4003e98:	1000081e 	bne	r2,zero,4003ebc <read+0x48>
 4003e9c:	e0bffb17 	ldw	r2,-20(fp)
 4003ea0:	10800324 	muli	r2,r2,12
 4003ea4:	1007883a 	mov	r3,r2
 4003ea8:	00810074 	movhi	r2,1025
 4003eac:	10a1fe04 	addi	r2,r2,-30728
 4003eb0:	1887883a 	add	r3,r3,r2
 4003eb4:	e0ffff15 	stw	r3,-4(fp)
 4003eb8:	00000106 	br	4003ec0 <read+0x4c>
 4003ebc:	e03fff15 	stw	zero,-4(fp)
 4003ec0:	e0bfff17 	ldw	r2,-4(fp)
 4003ec4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4003ec8:	e0bffa17 	ldw	r2,-24(fp)
 4003ecc:	1005003a 	cmpeq	r2,r2,zero
 4003ed0:	1000241e 	bne	r2,zero,4003f64 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4003ed4:	e0bffa17 	ldw	r2,-24(fp)
 4003ed8:	10800217 	ldw	r2,8(r2)
 4003edc:	108000cc 	andi	r2,r2,3
 4003ee0:	10800060 	cmpeqi	r2,r2,1
 4003ee4:	10001a1e 	bne	r2,zero,4003f50 <read+0xdc>
 4003ee8:	e0bffa17 	ldw	r2,-24(fp)
 4003eec:	10800017 	ldw	r2,0(r2)
 4003ef0:	10800517 	ldw	r2,20(r2)
 4003ef4:	1005003a 	cmpeq	r2,r2,zero
 4003ef8:	1000151e 	bne	r2,zero,4003f50 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4003efc:	e0bffa17 	ldw	r2,-24(fp)
 4003f00:	10800017 	ldw	r2,0(r2)
 4003f04:	10800517 	ldw	r2,20(r2)
 4003f08:	e17ffc17 	ldw	r5,-16(fp)
 4003f0c:	e1bffd17 	ldw	r6,-12(fp)
 4003f10:	e13ffa17 	ldw	r4,-24(fp)
 4003f14:	103ee83a 	callr	r2
 4003f18:	e0bff915 	stw	r2,-28(fp)
 4003f1c:	e0bff917 	ldw	r2,-28(fp)
 4003f20:	1004403a 	cmpge	r2,r2,zero
 4003f24:	1000071e 	bne	r2,zero,4003f44 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 4003f28:	4003f940 	call	4003f94 <alt_get_errno>
 4003f2c:	e0fff917 	ldw	r3,-28(fp)
 4003f30:	00c7c83a 	sub	r3,zero,r3
 4003f34:	10c00015 	stw	r3,0(r2)
          return -1;
 4003f38:	00bfffc4 	movi	r2,-1
 4003f3c:	e0bffe15 	stw	r2,-8(fp)
 4003f40:	00000e06 	br	4003f7c <read+0x108>
        }
        return rval;
 4003f44:	e0bff917 	ldw	r2,-28(fp)
 4003f48:	e0bffe15 	stw	r2,-8(fp)
 4003f4c:	00000b06 	br	4003f7c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4003f50:	4003f940 	call	4003f94 <alt_get_errno>
 4003f54:	1007883a 	mov	r3,r2
 4003f58:	00800344 	movi	r2,13
 4003f5c:	18800015 	stw	r2,0(r3)
 4003f60:	00000406 	br	4003f74 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4003f64:	4003f940 	call	4003f94 <alt_get_errno>
 4003f68:	1007883a 	mov	r3,r2
 4003f6c:	00801444 	movi	r2,81
 4003f70:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003f74:	00bfffc4 	movi	r2,-1
 4003f78:	e0bffe15 	stw	r2,-8(fp)
 4003f7c:	e0bffe17 	ldw	r2,-8(fp)
}
 4003f80:	e037883a 	mov	sp,fp
 4003f84:	dfc00117 	ldw	ra,4(sp)
 4003f88:	df000017 	ldw	fp,0(sp)
 4003f8c:	dec00204 	addi	sp,sp,8
 4003f90:	f800283a 	ret

04003f94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003f94:	defffd04 	addi	sp,sp,-12
 4003f98:	dfc00215 	stw	ra,8(sp)
 4003f9c:	df000115 	stw	fp,4(sp)
 4003fa0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003fa4:	00810074 	movhi	r2,1025
 4003fa8:	10a6f804 	addi	r2,r2,-25632
 4003fac:	10800017 	ldw	r2,0(r2)
 4003fb0:	1005003a 	cmpeq	r2,r2,zero
 4003fb4:	1000061e 	bne	r2,zero,4003fd0 <alt_get_errno+0x3c>
 4003fb8:	00810074 	movhi	r2,1025
 4003fbc:	10a6f804 	addi	r2,r2,-25632
 4003fc0:	10800017 	ldw	r2,0(r2)
 4003fc4:	103ee83a 	callr	r2
 4003fc8:	e0bfff15 	stw	r2,-4(fp)
 4003fcc:	00000306 	br	4003fdc <alt_get_errno+0x48>
 4003fd0:	00810074 	movhi	r2,1025
 4003fd4:	10ae1104 	addi	r2,r2,-18364
 4003fd8:	e0bfff15 	stw	r2,-4(fp)
 4003fdc:	e0bfff17 	ldw	r2,-4(fp)
}
 4003fe0:	e037883a 	mov	sp,fp
 4003fe4:	dfc00117 	ldw	ra,4(sp)
 4003fe8:	df000017 	ldw	fp,0(sp)
 4003fec:	dec00204 	addi	sp,sp,8
 4003ff0:	f800283a 	ret

04003ff4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4003ff4:	defffe04 	addi	sp,sp,-8
 4003ff8:	df000115 	stw	fp,4(sp)
 4003ffc:	df000104 	addi	fp,sp,4
 4004000:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4004004:	e0bfff17 	ldw	r2,-4(fp)
 4004008:	108000d0 	cmplti	r2,r2,3
 400400c:	10000d1e 	bne	r2,zero,4004044 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4004010:	e0bfff17 	ldw	r2,-4(fp)
 4004014:	00c10074 	movhi	r3,1025
 4004018:	18e1fe04 	addi	r3,r3,-30728
 400401c:	10800324 	muli	r2,r2,12
 4004020:	10c5883a 	add	r2,r2,r3
 4004024:	10800204 	addi	r2,r2,8
 4004028:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400402c:	e0bfff17 	ldw	r2,-4(fp)
 4004030:	00c10074 	movhi	r3,1025
 4004034:	18e1fe04 	addi	r3,r3,-30728
 4004038:	10800324 	muli	r2,r2,12
 400403c:	10c5883a 	add	r2,r2,r3
 4004040:	10000015 	stw	zero,0(r2)
  }
}
 4004044:	e037883a 	mov	sp,fp
 4004048:	df000017 	ldw	fp,0(sp)
 400404c:	dec00104 	addi	sp,sp,4
 4004050:	f800283a 	ret

04004054 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4004054:	defff804 	addi	sp,sp,-32
 4004058:	df000715 	stw	fp,28(sp)
 400405c:	df000704 	addi	fp,sp,28
 4004060:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004064:	0005303a 	rdctl	r2,status
 4004068:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400406c:	e0fffb17 	ldw	r3,-20(fp)
 4004070:	00bfff84 	movi	r2,-2
 4004074:	1884703a 	and	r2,r3,r2
 4004078:	1001703a 	wrctl	status,r2
  
  return context;
 400407c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4004080:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4004084:	d0a00b17 	ldw	r2,-32724(gp)
 4004088:	10c000c4 	addi	r3,r2,3
 400408c:	00bfff04 	movi	r2,-4
 4004090:	1884703a 	and	r2,r3,r2
 4004094:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4004098:	d0e00b17 	ldw	r3,-32724(gp)
 400409c:	e0bffe17 	ldw	r2,-8(fp)
 40040a0:	1887883a 	add	r3,r3,r2
 40040a4:	00820034 	movhi	r2,2048
 40040a8:	10800004 	addi	r2,r2,0
 40040ac:	10c0072e 	bgeu	r2,r3,40040cc <sbrk+0x78>
 40040b0:	e0bffd17 	ldw	r2,-12(fp)
 40040b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40040b8:	e0bffa17 	ldw	r2,-24(fp)
 40040bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40040c0:	00bfffc4 	movi	r2,-1
 40040c4:	e0bfff15 	stw	r2,-4(fp)
 40040c8:	00000c06 	br	40040fc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 40040cc:	d0a00b17 	ldw	r2,-32724(gp)
 40040d0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 40040d4:	d0e00b17 	ldw	r3,-32724(gp)
 40040d8:	e0bffe17 	ldw	r2,-8(fp)
 40040dc:	1885883a 	add	r2,r3,r2
 40040e0:	d0a00b15 	stw	r2,-32724(gp)
 40040e4:	e0bffd17 	ldw	r2,-12(fp)
 40040e8:	e0bff915 	stw	r2,-28(fp)
 40040ec:	e0bff917 	ldw	r2,-28(fp)
 40040f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40040f4:	e0bffc17 	ldw	r2,-16(fp)
 40040f8:	e0bfff15 	stw	r2,-4(fp)
 40040fc:	e0bfff17 	ldw	r2,-4(fp)
} 
 4004100:	e037883a 	mov	sp,fp
 4004104:	df000017 	ldw	fp,0(sp)
 4004108:	dec00104 	addi	sp,sp,4
 400410c:	f800283a 	ret

04004110 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4004110:	defffd04 	addi	sp,sp,-12
 4004114:	dfc00215 	stw	ra,8(sp)
 4004118:	df000115 	stw	fp,4(sp)
 400411c:	df000104 	addi	fp,sp,4
 4004120:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4004124:	e13fff17 	ldw	r4,-4(fp)
 4004128:	40069b00 	call	40069b0 <alt_busy_sleep>
}
 400412c:	e037883a 	mov	sp,fp
 4004130:	dfc00117 	ldw	ra,4(sp)
 4004134:	df000017 	ldw	fp,0(sp)
 4004138:	dec00204 	addi	sp,sp,8
 400413c:	f800283a 	ret

04004140 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4004140:	defff704 	addi	sp,sp,-36
 4004144:	dfc00815 	stw	ra,32(sp)
 4004148:	df000715 	stw	fp,28(sp)
 400414c:	df000704 	addi	fp,sp,28
 4004150:	e13ffb15 	stw	r4,-20(fp)
 4004154:	e17ffc15 	stw	r5,-16(fp)
 4004158:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400415c:	e0bffb17 	ldw	r2,-20(fp)
 4004160:	1004803a 	cmplt	r2,r2,zero
 4004164:	1000081e 	bne	r2,zero,4004188 <write+0x48>
 4004168:	e0bffb17 	ldw	r2,-20(fp)
 400416c:	10800324 	muli	r2,r2,12
 4004170:	1007883a 	mov	r3,r2
 4004174:	00810074 	movhi	r2,1025
 4004178:	10a1fe04 	addi	r2,r2,-30728
 400417c:	1887883a 	add	r3,r3,r2
 4004180:	e0ffff15 	stw	r3,-4(fp)
 4004184:	00000106 	br	400418c <write+0x4c>
 4004188:	e03fff15 	stw	zero,-4(fp)
 400418c:	e0bfff17 	ldw	r2,-4(fp)
 4004190:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4004194:	e0bffa17 	ldw	r2,-24(fp)
 4004198:	1005003a 	cmpeq	r2,r2,zero
 400419c:	1000241e 	bne	r2,zero,4004230 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40041a0:	e0bffa17 	ldw	r2,-24(fp)
 40041a4:	10800217 	ldw	r2,8(r2)
 40041a8:	108000cc 	andi	r2,r2,3
 40041ac:	1005003a 	cmpeq	r2,r2,zero
 40041b0:	10001a1e 	bne	r2,zero,400421c <write+0xdc>
 40041b4:	e0bffa17 	ldw	r2,-24(fp)
 40041b8:	10800017 	ldw	r2,0(r2)
 40041bc:	10800617 	ldw	r2,24(r2)
 40041c0:	1005003a 	cmpeq	r2,r2,zero
 40041c4:	1000151e 	bne	r2,zero,400421c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40041c8:	e0bffa17 	ldw	r2,-24(fp)
 40041cc:	10800017 	ldw	r2,0(r2)
 40041d0:	10800617 	ldw	r2,24(r2)
 40041d4:	e17ffc17 	ldw	r5,-16(fp)
 40041d8:	e1bffd17 	ldw	r6,-12(fp)
 40041dc:	e13ffa17 	ldw	r4,-24(fp)
 40041e0:	103ee83a 	callr	r2
 40041e4:	e0bff915 	stw	r2,-28(fp)
 40041e8:	e0bff917 	ldw	r2,-28(fp)
 40041ec:	1004403a 	cmpge	r2,r2,zero
 40041f0:	1000071e 	bne	r2,zero,4004210 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 40041f4:	40042600 	call	4004260 <alt_get_errno>
 40041f8:	e0fff917 	ldw	r3,-28(fp)
 40041fc:	00c7c83a 	sub	r3,zero,r3
 4004200:	10c00015 	stw	r3,0(r2)
        return -1;
 4004204:	00bfffc4 	movi	r2,-1
 4004208:	e0bffe15 	stw	r2,-8(fp)
 400420c:	00000e06 	br	4004248 <write+0x108>
      }
      return rval;
 4004210:	e0bff917 	ldw	r2,-28(fp)
 4004214:	e0bffe15 	stw	r2,-8(fp)
 4004218:	00000b06 	br	4004248 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400421c:	40042600 	call	4004260 <alt_get_errno>
 4004220:	1007883a 	mov	r3,r2
 4004224:	00800344 	movi	r2,13
 4004228:	18800015 	stw	r2,0(r3)
 400422c:	00000406 	br	4004240 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4004230:	40042600 	call	4004260 <alt_get_errno>
 4004234:	1007883a 	mov	r3,r2
 4004238:	00801444 	movi	r2,81
 400423c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4004240:	00bfffc4 	movi	r2,-1
 4004244:	e0bffe15 	stw	r2,-8(fp)
 4004248:	e0bffe17 	ldw	r2,-8(fp)
}
 400424c:	e037883a 	mov	sp,fp
 4004250:	dfc00117 	ldw	ra,4(sp)
 4004254:	df000017 	ldw	fp,0(sp)
 4004258:	dec00204 	addi	sp,sp,8
 400425c:	f800283a 	ret

04004260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004260:	defffd04 	addi	sp,sp,-12
 4004264:	dfc00215 	stw	ra,8(sp)
 4004268:	df000115 	stw	fp,4(sp)
 400426c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4004270:	00810074 	movhi	r2,1025
 4004274:	10a6f804 	addi	r2,r2,-25632
 4004278:	10800017 	ldw	r2,0(r2)
 400427c:	1005003a 	cmpeq	r2,r2,zero
 4004280:	1000061e 	bne	r2,zero,400429c <alt_get_errno+0x3c>
 4004284:	00810074 	movhi	r2,1025
 4004288:	10a6f804 	addi	r2,r2,-25632
 400428c:	10800017 	ldw	r2,0(r2)
 4004290:	103ee83a 	callr	r2
 4004294:	e0bfff15 	stw	r2,-4(fp)
 4004298:	00000306 	br	40042a8 <alt_get_errno+0x48>
 400429c:	00810074 	movhi	r2,1025
 40042a0:	10ae1104 	addi	r2,r2,-18364
 40042a4:	e0bfff15 	stw	r2,-4(fp)
 40042a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40042ac:	e037883a 	mov	sp,fp
 40042b0:	dfc00117 	ldw	ra,4(sp)
 40042b4:	df000017 	ldw	fp,0(sp)
 40042b8:	dec00204 	addi	sp,sp,8
 40042bc:	f800283a 	ret

040042c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40042c0:	defffd04 	addi	sp,sp,-12
 40042c4:	dfc00215 	stw	ra,8(sp)
 40042c8:	df000115 	stw	fp,4(sp)
 40042cc:	df000104 	addi	fp,sp,4
 40042d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 40042d4:	40075bc0 	call	40075bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40042d8:	00800044 	movi	r2,1
 40042dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40042e0:	e037883a 	mov	sp,fp
 40042e4:	dfc00117 	ldw	ra,4(sp)
 40042e8:	df000017 	ldw	fp,0(sp)
 40042ec:	dec00204 	addi	sp,sp,8
 40042f0:	f800283a 	ret

040042f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40042f4:	defffe04 	addi	sp,sp,-8
 40042f8:	dfc00115 	stw	ra,4(sp)
 40042fc:	df000015 	stw	fp,0(sp)
 4004300:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4004304:	01020034 	movhi	r4,2048
 4004308:	21040004 	addi	r4,r4,4096
 400430c:	000b883a 	mov	r5,zero
 4004310:	01800084 	movi	r6,2
 4004314:	01c00044 	movi	r7,1
 4004318:	4005e1c0 	call	4005e1c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 400431c:	01010074 	movhi	r4,1025
 4004320:	21226804 	addi	r4,r4,-30304
 4004324:	000b883a 	mov	r5,zero
 4004328:	000d883a 	mov	r6,zero
 400432c:	40045080 	call	4004508 <altera_avalon_jtag_uart_init>
 4004330:	01010074 	movhi	r4,1025
 4004334:	21225e04 	addi	r4,r4,-30344
 4004338:	40043880 	call	4004388 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
 400433c:	01010074 	movhi	r4,1025
 4004340:	21268004 	addi	r4,r4,-26112
 4004344:	4005c180 	call	4005c18 <altera_avalon_lcd_16207_init>
 4004348:	01010074 	movhi	r4,1025
 400434c:	21267604 	addi	r4,r4,-26152
 4004350:	40043880 	call	4004388 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
 4004354:	01010074 	movhi	r4,1025
 4004358:	2126c804 	addi	r4,r4,-25824
 400435c:	000b883a 	mov	r5,zero
 4004360:	01800044 	movi	r6,1
 4004364:	4005fa40 	call	4005fa4 <altera_avalon_uart_init>
 4004368:	01010074 	movhi	r4,1025
 400436c:	2126be04 	addi	r4,r4,-25864
 4004370:	40043880 	call	4004388 <alt_dev_reg>
}
 4004374:	e037883a 	mov	sp,fp
 4004378:	dfc00117 	ldw	ra,4(sp)
 400437c:	df000017 	ldw	fp,0(sp)
 4004380:	dec00204 	addi	sp,sp,8
 4004384:	f800283a 	ret

04004388 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4004388:	defffd04 	addi	sp,sp,-12
 400438c:	dfc00215 	stw	ra,8(sp)
 4004390:	df000115 	stw	fp,4(sp)
 4004394:	df000104 	addi	fp,sp,4
 4004398:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400439c:	e13fff17 	ldw	r4,-4(fp)
 40043a0:	01410074 	movhi	r5,1025
 40043a4:	2966f504 	addi	r5,r5,-25644
 40043a8:	4006b400 	call	4006b40 <alt_dev_llist_insert>
}
 40043ac:	e037883a 	mov	sp,fp
 40043b0:	dfc00117 	ldw	ra,4(sp)
 40043b4:	df000017 	ldw	fp,0(sp)
 40043b8:	dec00204 	addi	sp,sp,8
 40043bc:	f800283a 	ret

040043c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40043c0:	defffa04 	addi	sp,sp,-24
 40043c4:	dfc00515 	stw	ra,20(sp)
 40043c8:	df000415 	stw	fp,16(sp)
 40043cc:	df000404 	addi	fp,sp,16
 40043d0:	e13ffd15 	stw	r4,-12(fp)
 40043d4:	e17ffe15 	stw	r5,-8(fp)
 40043d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40043dc:	e0bffd17 	ldw	r2,-12(fp)
 40043e0:	10800017 	ldw	r2,0(r2)
 40043e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40043e8:	e0bffc17 	ldw	r2,-16(fp)
 40043ec:	11000a04 	addi	r4,r2,40
 40043f0:	e0bffd17 	ldw	r2,-12(fp)
 40043f4:	11c00217 	ldw	r7,8(r2)
 40043f8:	e17ffe17 	ldw	r5,-8(fp)
 40043fc:	e1bfff17 	ldw	r6,-4(fp)
 4004400:	4004a080 	call	4004a08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4004404:	e037883a 	mov	sp,fp
 4004408:	dfc00117 	ldw	ra,4(sp)
 400440c:	df000017 	ldw	fp,0(sp)
 4004410:	dec00204 	addi	sp,sp,8
 4004414:	f800283a 	ret

04004418 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4004418:	defffa04 	addi	sp,sp,-24
 400441c:	dfc00515 	stw	ra,20(sp)
 4004420:	df000415 	stw	fp,16(sp)
 4004424:	df000404 	addi	fp,sp,16
 4004428:	e13ffd15 	stw	r4,-12(fp)
 400442c:	e17ffe15 	stw	r5,-8(fp)
 4004430:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4004434:	e0bffd17 	ldw	r2,-12(fp)
 4004438:	10800017 	ldw	r2,0(r2)
 400443c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4004440:	e0bffc17 	ldw	r2,-16(fp)
 4004444:	11000a04 	addi	r4,r2,40
 4004448:	e0bffd17 	ldw	r2,-12(fp)
 400444c:	11c00217 	ldw	r7,8(r2)
 4004450:	e17ffe17 	ldw	r5,-8(fp)
 4004454:	e1bfff17 	ldw	r6,-4(fp)
 4004458:	4004c2c0 	call	4004c2c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400445c:	e037883a 	mov	sp,fp
 4004460:	dfc00117 	ldw	ra,4(sp)
 4004464:	df000017 	ldw	fp,0(sp)
 4004468:	dec00204 	addi	sp,sp,8
 400446c:	f800283a 	ret

04004470 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4004470:	defffc04 	addi	sp,sp,-16
 4004474:	dfc00315 	stw	ra,12(sp)
 4004478:	df000215 	stw	fp,8(sp)
 400447c:	df000204 	addi	fp,sp,8
 4004480:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4004484:	e0bfff17 	ldw	r2,-4(fp)
 4004488:	10800017 	ldw	r2,0(r2)
 400448c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4004490:	e0bffe17 	ldw	r2,-8(fp)
 4004494:	11000a04 	addi	r4,r2,40
 4004498:	e0bfff17 	ldw	r2,-4(fp)
 400449c:	11400217 	ldw	r5,8(r2)
 40044a0:	40048a00 	call	40048a0 <altera_avalon_jtag_uart_close>
}
 40044a4:	e037883a 	mov	sp,fp
 40044a8:	dfc00117 	ldw	ra,4(sp)
 40044ac:	df000017 	ldw	fp,0(sp)
 40044b0:	dec00204 	addi	sp,sp,8
 40044b4:	f800283a 	ret

040044b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40044b8:	defffa04 	addi	sp,sp,-24
 40044bc:	dfc00515 	stw	ra,20(sp)
 40044c0:	df000415 	stw	fp,16(sp)
 40044c4:	df000404 	addi	fp,sp,16
 40044c8:	e13ffd15 	stw	r4,-12(fp)
 40044cc:	e17ffe15 	stw	r5,-8(fp)
 40044d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40044d4:	e0bffd17 	ldw	r2,-12(fp)
 40044d8:	10800017 	ldw	r2,0(r2)
 40044dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40044e0:	e0bffc17 	ldw	r2,-16(fp)
 40044e4:	11000a04 	addi	r4,r2,40
 40044e8:	e17ffe17 	ldw	r5,-8(fp)
 40044ec:	e1bfff17 	ldw	r6,-4(fp)
 40044f0:	40049140 	call	4004914 <altera_avalon_jtag_uart_ioctl>
}
 40044f4:	e037883a 	mov	sp,fp
 40044f8:	dfc00117 	ldw	ra,4(sp)
 40044fc:	df000017 	ldw	fp,0(sp)
 4004500:	dec00204 	addi	sp,sp,8
 4004504:	f800283a 	ret

04004508 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4004508:	defffa04 	addi	sp,sp,-24
 400450c:	dfc00515 	stw	ra,20(sp)
 4004510:	df000415 	stw	fp,16(sp)
 4004514:	df000404 	addi	fp,sp,16
 4004518:	e13ffd15 	stw	r4,-12(fp)
 400451c:	e17ffe15 	stw	r5,-8(fp)
 4004520:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004524:	e0fffd17 	ldw	r3,-12(fp)
 4004528:	00800044 	movi	r2,1
 400452c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4004530:	e0bffd17 	ldw	r2,-12(fp)
 4004534:	10800017 	ldw	r2,0(r2)
 4004538:	11000104 	addi	r4,r2,4
 400453c:	e0bffd17 	ldw	r2,-12(fp)
 4004540:	10800817 	ldw	r2,32(r2)
 4004544:	1007883a 	mov	r3,r2
 4004548:	2005883a 	mov	r2,r4
 400454c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4004550:	e13ffe17 	ldw	r4,-8(fp)
 4004554:	e17fff17 	ldw	r5,-4(fp)
 4004558:	d8000015 	stw	zero,0(sp)
 400455c:	01810034 	movhi	r6,1024
 4004560:	31917204 	addi	r6,r6,17864
 4004564:	e1fffd17 	ldw	r7,-12(fp)
 4004568:	4006d4c0 	call	4006d4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400456c:	e0bffd17 	ldw	r2,-12(fp)
 4004570:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4004574:	e0bffd17 	ldw	r2,-12(fp)
 4004578:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400457c:	00810074 	movhi	r2,1025
 4004580:	10ae1604 	addi	r2,r2,-18344
 4004584:	10800017 	ldw	r2,0(r2)
 4004588:	100b883a 	mov	r5,r2
 400458c:	01810034 	movhi	r6,1024
 4004590:	3191fc04 	addi	r6,r6,18416
 4004594:	e1fffd17 	ldw	r7,-12(fp)
 4004598:	400685c0 	call	400685c <alt_alarm_start>
 400459c:	1004403a 	cmpge	r2,r2,zero
 40045a0:	1000041e 	bne	r2,zero,40045b4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40045a4:	e0fffd17 	ldw	r3,-12(fp)
 40045a8:	00a00034 	movhi	r2,32768
 40045ac:	10bfffc4 	addi	r2,r2,-1
 40045b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40045b4:	e037883a 	mov	sp,fp
 40045b8:	dfc00117 	ldw	ra,4(sp)
 40045bc:	df000017 	ldw	fp,0(sp)
 40045c0:	dec00204 	addi	sp,sp,8
 40045c4:	f800283a 	ret

040045c8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40045c8:	defff804 	addi	sp,sp,-32
 40045cc:	df000715 	stw	fp,28(sp)
 40045d0:	df000704 	addi	fp,sp,28
 40045d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40045d8:	e0bfff17 	ldw	r2,-4(fp)
 40045dc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 40045e0:	e0bffe17 	ldw	r2,-8(fp)
 40045e4:	10800017 	ldw	r2,0(r2)
 40045e8:	e0bffd15 	stw	r2,-12(fp)
 40045ec:	00000006 	br	40045f0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40045f0:	e0bffd17 	ldw	r2,-12(fp)
 40045f4:	10800104 	addi	r2,r2,4
 40045f8:	10800037 	ldwio	r2,0(r2)
 40045fc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4004600:	e0bffc17 	ldw	r2,-16(fp)
 4004604:	1080c00c 	andi	r2,r2,768
 4004608:	1005003a 	cmpeq	r2,r2,zero
 400460c:	1000741e 	bne	r2,zero,40047e0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4004610:	e0bffc17 	ldw	r2,-16(fp)
 4004614:	1080400c 	andi	r2,r2,256
 4004618:	1005003a 	cmpeq	r2,r2,zero
 400461c:	1000351e 	bne	r2,zero,40046f4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4004620:	00800074 	movhi	r2,1
 4004624:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004628:	e0bffe17 	ldw	r2,-8(fp)
 400462c:	10800a17 	ldw	r2,40(r2)
 4004630:	10800044 	addi	r2,r2,1
 4004634:	1081ffcc 	andi	r2,r2,2047
 4004638:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 400463c:	e0bffe17 	ldw	r2,-8(fp)
 4004640:	10c00b17 	ldw	r3,44(r2)
 4004644:	e0bffa17 	ldw	r2,-24(fp)
 4004648:	18801626 	beq	r3,r2,40046a4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400464c:	e0bffd17 	ldw	r2,-12(fp)
 4004650:	10800037 	ldwio	r2,0(r2)
 4004654:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4004658:	e0bffb17 	ldw	r2,-20(fp)
 400465c:	10a0000c 	andi	r2,r2,32768
 4004660:	1005003a 	cmpeq	r2,r2,zero
 4004664:	10000f1e 	bne	r2,zero,40046a4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4004668:	e0bffe17 	ldw	r2,-8(fp)
 400466c:	10c00a17 	ldw	r3,40(r2)
 4004670:	e0bffb17 	ldw	r2,-20(fp)
 4004674:	1009883a 	mov	r4,r2
 4004678:	e0bffe17 	ldw	r2,-8(fp)
 400467c:	1885883a 	add	r2,r3,r2
 4004680:	10800e04 	addi	r2,r2,56
 4004684:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004688:	e0bffe17 	ldw	r2,-8(fp)
 400468c:	10800a17 	ldw	r2,40(r2)
 4004690:	10800044 	addi	r2,r2,1
 4004694:	10c1ffcc 	andi	r3,r2,2047
 4004698:	e0bffe17 	ldw	r2,-8(fp)
 400469c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40046a0:	003fe106 	br	4004628 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40046a4:	e0bffb17 	ldw	r2,-20(fp)
 40046a8:	10bfffec 	andhi	r2,r2,65535
 40046ac:	1005003a 	cmpeq	r2,r2,zero
 40046b0:	1000101e 	bne	r2,zero,40046f4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40046b4:	e0bffe17 	ldw	r2,-8(fp)
 40046b8:	10c00817 	ldw	r3,32(r2)
 40046bc:	00bfff84 	movi	r2,-2
 40046c0:	1886703a 	and	r3,r3,r2
 40046c4:	e0bffe17 	ldw	r2,-8(fp)
 40046c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40046cc:	e0bffd17 	ldw	r2,-12(fp)
 40046d0:	11000104 	addi	r4,r2,4
 40046d4:	e0bffe17 	ldw	r2,-8(fp)
 40046d8:	10800817 	ldw	r2,32(r2)
 40046dc:	1007883a 	mov	r3,r2
 40046e0:	2005883a 	mov	r2,r4
 40046e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40046e8:	e0bffd17 	ldw	r2,-12(fp)
 40046ec:	10800104 	addi	r2,r2,4
 40046f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40046f4:	e0bffc17 	ldw	r2,-16(fp)
 40046f8:	1080800c 	andi	r2,r2,512
 40046fc:	1005003a 	cmpeq	r2,r2,zero
 4004700:	103fbb1e 	bne	r2,zero,40045f0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4004704:	e0bffc17 	ldw	r2,-16(fp)
 4004708:	10bfffec 	andhi	r2,r2,65535
 400470c:	1004d43a 	srli	r2,r2,16
 4004710:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4004714:	00001506 	br	400476c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4004718:	e13ffd17 	ldw	r4,-12(fp)
 400471c:	e0bffe17 	ldw	r2,-8(fp)
 4004720:	10c00d17 	ldw	r3,52(r2)
 4004724:	e0bffe17 	ldw	r2,-8(fp)
 4004728:	1885883a 	add	r2,r3,r2
 400472c:	10820e04 	addi	r2,r2,2104
 4004730:	10800003 	ldbu	r2,0(r2)
 4004734:	10c03fcc 	andi	r3,r2,255
 4004738:	18c0201c 	xori	r3,r3,128
 400473c:	18ffe004 	addi	r3,r3,-128
 4004740:	2005883a 	mov	r2,r4
 4004744:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004748:	e0bffe17 	ldw	r2,-8(fp)
 400474c:	10800d17 	ldw	r2,52(r2)
 4004750:	10800044 	addi	r2,r2,1
 4004754:	10c1ffcc 	andi	r3,r2,2047
 4004758:	e0bffe17 	ldw	r2,-8(fp)
 400475c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4004760:	e0bff917 	ldw	r2,-28(fp)
 4004764:	10bfffc4 	addi	r2,r2,-1
 4004768:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400476c:	e0bff917 	ldw	r2,-28(fp)
 4004770:	1005003a 	cmpeq	r2,r2,zero
 4004774:	1000051e 	bne	r2,zero,400478c <altera_avalon_jtag_uart_irq+0x1c4>
 4004778:	e0bffe17 	ldw	r2,-8(fp)
 400477c:	10c00d17 	ldw	r3,52(r2)
 4004780:	e0bffe17 	ldw	r2,-8(fp)
 4004784:	10800c17 	ldw	r2,48(r2)
 4004788:	18bfe31e 	bne	r3,r2,4004718 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400478c:	e0bff917 	ldw	r2,-28(fp)
 4004790:	1005003a 	cmpeq	r2,r2,zero
 4004794:	103f961e 	bne	r2,zero,40045f0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4004798:	e0bffe17 	ldw	r2,-8(fp)
 400479c:	10c00817 	ldw	r3,32(r2)
 40047a0:	00bfff44 	movi	r2,-3
 40047a4:	1886703a 	and	r3,r3,r2
 40047a8:	e0bffe17 	ldw	r2,-8(fp)
 40047ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40047b0:	e0bffe17 	ldw	r2,-8(fp)
 40047b4:	10800017 	ldw	r2,0(r2)
 40047b8:	11000104 	addi	r4,r2,4
 40047bc:	e0bffe17 	ldw	r2,-8(fp)
 40047c0:	10800817 	ldw	r2,32(r2)
 40047c4:	1007883a 	mov	r3,r2
 40047c8:	2005883a 	mov	r2,r4
 40047cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40047d0:	e0bffd17 	ldw	r2,-12(fp)
 40047d4:	10800104 	addi	r2,r2,4
 40047d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 40047dc:	003f8406 	br	40045f0 <altera_avalon_jtag_uart_irq+0x28>
}
 40047e0:	e037883a 	mov	sp,fp
 40047e4:	df000017 	ldw	fp,0(sp)
 40047e8:	dec00104 	addi	sp,sp,4
 40047ec:	f800283a 	ret

040047f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40047f0:	defffc04 	addi	sp,sp,-16
 40047f4:	df000315 	stw	fp,12(sp)
 40047f8:	df000304 	addi	fp,sp,12
 40047fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4004800:	e0bfff17 	ldw	r2,-4(fp)
 4004804:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4004808:	e0bffe17 	ldw	r2,-8(fp)
 400480c:	10800017 	ldw	r2,0(r2)
 4004810:	10800104 	addi	r2,r2,4
 4004814:	10800037 	ldwio	r2,0(r2)
 4004818:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400481c:	e0bffd17 	ldw	r2,-12(fp)
 4004820:	1081000c 	andi	r2,r2,1024
 4004824:	1005003a 	cmpeq	r2,r2,zero
 4004828:	10000c1e 	bne	r2,zero,400485c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400482c:	e0bffe17 	ldw	r2,-8(fp)
 4004830:	10800017 	ldw	r2,0(r2)
 4004834:	11000104 	addi	r4,r2,4
 4004838:	e0bffe17 	ldw	r2,-8(fp)
 400483c:	10800817 	ldw	r2,32(r2)
 4004840:	10810014 	ori	r2,r2,1024
 4004844:	1007883a 	mov	r3,r2
 4004848:	2005883a 	mov	r2,r4
 400484c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4004850:	e0bffe17 	ldw	r2,-8(fp)
 4004854:	10000915 	stw	zero,36(r2)
 4004858:	00000a06 	br	4004884 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400485c:	e0bffe17 	ldw	r2,-8(fp)
 4004860:	10c00917 	ldw	r3,36(r2)
 4004864:	00a00034 	movhi	r2,32768
 4004868:	10bfff04 	addi	r2,r2,-4
 400486c:	10c00536 	bltu	r2,r3,4004884 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 4004870:	e0bffe17 	ldw	r2,-8(fp)
 4004874:	10800917 	ldw	r2,36(r2)
 4004878:	10c00044 	addi	r3,r2,1
 400487c:	e0bffe17 	ldw	r2,-8(fp)
 4004880:	10c00915 	stw	r3,36(r2)
 4004884:	00810074 	movhi	r2,1025
 4004888:	10ae1604 	addi	r2,r2,-18344
 400488c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4004890:	e037883a 	mov	sp,fp
 4004894:	df000017 	ldw	fp,0(sp)
 4004898:	dec00104 	addi	sp,sp,4
 400489c:	f800283a 	ret

040048a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40048a0:	defffc04 	addi	sp,sp,-16
 40048a4:	df000315 	stw	fp,12(sp)
 40048a8:	df000304 	addi	fp,sp,12
 40048ac:	e13ffd15 	stw	r4,-12(fp)
 40048b0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40048b4:	00000706 	br	40048d4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 40048b8:	e0bffe17 	ldw	r2,-8(fp)
 40048bc:	1090000c 	andi	r2,r2,16384
 40048c0:	1005003a 	cmpeq	r2,r2,zero
 40048c4:	1000031e 	bne	r2,zero,40048d4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 40048c8:	00bffd44 	movi	r2,-11
 40048cc:	e0bfff15 	stw	r2,-4(fp)
 40048d0:	00000b06 	br	4004900 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40048d4:	e0bffd17 	ldw	r2,-12(fp)
 40048d8:	10c00d17 	ldw	r3,52(r2)
 40048dc:	e0bffd17 	ldw	r2,-12(fp)
 40048e0:	10800c17 	ldw	r2,48(r2)
 40048e4:	18800526 	beq	r3,r2,40048fc <altera_avalon_jtag_uart_close+0x5c>
 40048e8:	e0bffd17 	ldw	r2,-12(fp)
 40048ec:	10c00917 	ldw	r3,36(r2)
 40048f0:	e0bffd17 	ldw	r2,-12(fp)
 40048f4:	10800117 	ldw	r2,4(r2)
 40048f8:	18bfef36 	bltu	r3,r2,40048b8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40048fc:	e03fff15 	stw	zero,-4(fp)
 4004900:	e0bfff17 	ldw	r2,-4(fp)
}
 4004904:	e037883a 	mov	sp,fp
 4004908:	df000017 	ldw	fp,0(sp)
 400490c:	dec00104 	addi	sp,sp,4
 4004910:	f800283a 	ret

04004914 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4004914:	defff804 	addi	sp,sp,-32
 4004918:	df000715 	stw	fp,28(sp)
 400491c:	df000704 	addi	fp,sp,28
 4004920:	e13ffb15 	stw	r4,-20(fp)
 4004924:	e17ffc15 	stw	r5,-16(fp)
 4004928:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 400492c:	00bff9c4 	movi	r2,-25
 4004930:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 4004934:	e0bffc17 	ldw	r2,-16(fp)
 4004938:	e0bfff15 	stw	r2,-4(fp)
 400493c:	e0ffff17 	ldw	r3,-4(fp)
 4004940:	189a8060 	cmpeqi	r2,r3,27137
 4004944:	1000041e 	bne	r2,zero,4004958 <altera_avalon_jtag_uart_ioctl+0x44>
 4004948:	e0ffff17 	ldw	r3,-4(fp)
 400494c:	189a80a0 	cmpeqi	r2,r3,27138
 4004950:	10001b1e 	bne	r2,zero,40049c0 <altera_avalon_jtag_uart_ioctl+0xac>
 4004954:	00002706 	br	40049f4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4004958:	e0bffb17 	ldw	r2,-20(fp)
 400495c:	10c00117 	ldw	r3,4(r2)
 4004960:	00a00034 	movhi	r2,32768
 4004964:	10bfffc4 	addi	r2,r2,-1
 4004968:	18802226 	beq	r3,r2,40049f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 400496c:	e0bffd17 	ldw	r2,-12(fp)
 4004970:	10800017 	ldw	r2,0(r2)
 4004974:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4004978:	e0bff917 	ldw	r2,-28(fp)
 400497c:	10800090 	cmplti	r2,r2,2
 4004980:	1000071e 	bne	r2,zero,40049a0 <altera_avalon_jtag_uart_ioctl+0x8c>
 4004984:	e0fff917 	ldw	r3,-28(fp)
 4004988:	00a00034 	movhi	r2,32768
 400498c:	10bfffc4 	addi	r2,r2,-1
 4004990:	18800326 	beq	r3,r2,40049a0 <altera_avalon_jtag_uart_ioctl+0x8c>
 4004994:	e0bff917 	ldw	r2,-28(fp)
 4004998:	e0bffe15 	stw	r2,-8(fp)
 400499c:	00000306 	br	40049ac <altera_avalon_jtag_uart_ioctl+0x98>
 40049a0:	00e00034 	movhi	r3,32768
 40049a4:	18ffff84 	addi	r3,r3,-2
 40049a8:	e0fffe15 	stw	r3,-8(fp)
 40049ac:	e0bffb17 	ldw	r2,-20(fp)
 40049b0:	e0fffe17 	ldw	r3,-8(fp)
 40049b4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 40049b8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 40049bc:	00000d06 	br	40049f4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40049c0:	e0bffb17 	ldw	r2,-20(fp)
 40049c4:	10c00117 	ldw	r3,4(r2)
 40049c8:	00a00034 	movhi	r2,32768
 40049cc:	10bfffc4 	addi	r2,r2,-1
 40049d0:	18800826 	beq	r3,r2,40049f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40049d4:	e13ffd17 	ldw	r4,-12(fp)
 40049d8:	e0bffb17 	ldw	r2,-20(fp)
 40049dc:	10c00917 	ldw	r3,36(r2)
 40049e0:	e0bffb17 	ldw	r2,-20(fp)
 40049e4:	10800117 	ldw	r2,4(r2)
 40049e8:	1885803a 	cmpltu	r2,r3,r2
 40049ec:	20800015 	stw	r2,0(r4)
      rc = 0;
 40049f0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 40049f4:	e0bffa17 	ldw	r2,-24(fp)
}
 40049f8:	e037883a 	mov	sp,fp
 40049fc:	df000017 	ldw	fp,0(sp)
 4004a00:	dec00104 	addi	sp,sp,4
 4004a04:	f800283a 	ret

04004a08 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4004a08:	defff204 	addi	sp,sp,-56
 4004a0c:	dfc00d15 	stw	ra,52(sp)
 4004a10:	df000c15 	stw	fp,48(sp)
 4004a14:	df000c04 	addi	fp,sp,48
 4004a18:	e13ffb15 	stw	r4,-20(fp)
 4004a1c:	e17ffc15 	stw	r5,-16(fp)
 4004a20:	e1bffd15 	stw	r6,-12(fp)
 4004a24:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 4004a28:	e0bffc17 	ldw	r2,-16(fp)
 4004a2c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4004a30:	00004806 	br	4004b54 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4004a34:	e0bffb17 	ldw	r2,-20(fp)
 4004a38:	10800a17 	ldw	r2,40(r2)
 4004a3c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4004a40:	e0bffb17 	ldw	r2,-20(fp)
 4004a44:	10800b17 	ldw	r2,44(r2)
 4004a48:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 4004a4c:	e0fff717 	ldw	r3,-36(fp)
 4004a50:	e0bff617 	ldw	r2,-40(fp)
 4004a54:	18800536 	bltu	r3,r2,4004a6c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4004a58:	e0bff717 	ldw	r2,-36(fp)
 4004a5c:	e0fff617 	ldw	r3,-40(fp)
 4004a60:	10c5c83a 	sub	r2,r2,r3
 4004a64:	e0bff815 	stw	r2,-32(fp)
 4004a68:	00000406 	br	4004a7c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4004a6c:	00820004 	movi	r2,2048
 4004a70:	e0fff617 	ldw	r3,-40(fp)
 4004a74:	10c5c83a 	sub	r2,r2,r3
 4004a78:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4004a7c:	e0bff817 	ldw	r2,-32(fp)
 4004a80:	1005003a 	cmpeq	r2,r2,zero
 4004a84:	10001f1e 	bne	r2,zero,4004b04 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 4004a88:	e0fffd17 	ldw	r3,-12(fp)
 4004a8c:	e0bff817 	ldw	r2,-32(fp)
 4004a90:	1880022e 	bgeu	r3,r2,4004a9c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 4004a94:	e0bffd17 	ldw	r2,-12(fp)
 4004a98:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4004a9c:	e0bffb17 	ldw	r2,-20(fp)
 4004aa0:	10c00e04 	addi	r3,r2,56
 4004aa4:	e0bff617 	ldw	r2,-40(fp)
 4004aa8:	1887883a 	add	r3,r3,r2
 4004aac:	e0bffa17 	ldw	r2,-24(fp)
 4004ab0:	1009883a 	mov	r4,r2
 4004ab4:	180b883a 	mov	r5,r3
 4004ab8:	e1bff817 	ldw	r6,-32(fp)
 4004abc:	4001ac80 	call	4001ac8 <memcpy>
      ptr   += n;
 4004ac0:	e0fff817 	ldw	r3,-32(fp)
 4004ac4:	e0bffa17 	ldw	r2,-24(fp)
 4004ac8:	10c5883a 	add	r2,r2,r3
 4004acc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 4004ad0:	e0fffd17 	ldw	r3,-12(fp)
 4004ad4:	e0bff817 	ldw	r2,-32(fp)
 4004ad8:	1885c83a 	sub	r2,r3,r2
 4004adc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004ae0:	e0fff617 	ldw	r3,-40(fp)
 4004ae4:	e0bff817 	ldw	r2,-32(fp)
 4004ae8:	1885883a 	add	r2,r3,r2
 4004aec:	10c1ffcc 	andi	r3,r2,2047
 4004af0:	e0bffb17 	ldw	r2,-20(fp)
 4004af4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4004af8:	e0bffd17 	ldw	r2,-12(fp)
 4004afc:	10800048 	cmpgei	r2,r2,1
 4004b00:	103fcc1e 	bne	r2,zero,4004a34 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 4004b04:	e0fffa17 	ldw	r3,-24(fp)
 4004b08:	e0bffc17 	ldw	r2,-16(fp)
 4004b0c:	1880141e 	bne	r3,r2,4004b60 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4004b10:	e0bffe17 	ldw	r2,-8(fp)
 4004b14:	1090000c 	andi	r2,r2,16384
 4004b18:	1004c03a 	cmpne	r2,r2,zero
 4004b1c:	1000101e 	bne	r2,zero,4004b60 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4004b20:	e0bffb17 	ldw	r2,-20(fp)
 4004b24:	10c00a17 	ldw	r3,40(r2)
 4004b28:	e0bff717 	ldw	r2,-36(fp)
 4004b2c:	1880051e 	bne	r3,r2,4004b44 <altera_avalon_jtag_uart_read+0x13c>
 4004b30:	e0bffb17 	ldw	r2,-20(fp)
 4004b34:	10c00917 	ldw	r3,36(r2)
 4004b38:	e0bffb17 	ldw	r2,-20(fp)
 4004b3c:	10800117 	ldw	r2,4(r2)
 4004b40:	18bff736 	bltu	r3,r2,4004b20 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4004b44:	e0bffb17 	ldw	r2,-20(fp)
 4004b48:	10c00a17 	ldw	r3,40(r2)
 4004b4c:	e0bff717 	ldw	r2,-36(fp)
 4004b50:	18800326 	beq	r3,r2,4004b60 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4004b54:	e0bffd17 	ldw	r2,-12(fp)
 4004b58:	10800048 	cmpgei	r2,r2,1
 4004b5c:	103fb51e 	bne	r2,zero,4004a34 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4004b60:	e0fffa17 	ldw	r3,-24(fp)
 4004b64:	e0bffc17 	ldw	r2,-16(fp)
 4004b68:	18801926 	beq	r3,r2,4004bd0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004b6c:	0005303a 	rdctl	r2,status
 4004b70:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004b74:	e0fff517 	ldw	r3,-44(fp)
 4004b78:	00bfff84 	movi	r2,-2
 4004b7c:	1884703a 	and	r2,r3,r2
 4004b80:	1001703a 	wrctl	status,r2
  
  return context;
 4004b84:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4004b88:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004b8c:	e0bffb17 	ldw	r2,-20(fp)
 4004b90:	10800817 	ldw	r2,32(r2)
 4004b94:	10c00054 	ori	r3,r2,1
 4004b98:	e0bffb17 	ldw	r2,-20(fp)
 4004b9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004ba0:	e0bffb17 	ldw	r2,-20(fp)
 4004ba4:	10800017 	ldw	r2,0(r2)
 4004ba8:	11000104 	addi	r4,r2,4
 4004bac:	e0bffb17 	ldw	r2,-20(fp)
 4004bb0:	10800817 	ldw	r2,32(r2)
 4004bb4:	1007883a 	mov	r3,r2
 4004bb8:	2005883a 	mov	r2,r4
 4004bbc:	10c00035 	stwio	r3,0(r2)
 4004bc0:	e0bff917 	ldw	r2,-28(fp)
 4004bc4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004bc8:	e0bff417 	ldw	r2,-48(fp)
 4004bcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4004bd0:	e0fffa17 	ldw	r3,-24(fp)
 4004bd4:	e0bffc17 	ldw	r2,-16(fp)
 4004bd8:	18800526 	beq	r3,r2,4004bf0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 4004bdc:	e0fffa17 	ldw	r3,-24(fp)
 4004be0:	e0bffc17 	ldw	r2,-16(fp)
 4004be4:	1887c83a 	sub	r3,r3,r2
 4004be8:	e0ffff15 	stw	r3,-4(fp)
 4004bec:	00000906 	br	4004c14 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 4004bf0:	e0bffe17 	ldw	r2,-8(fp)
 4004bf4:	1090000c 	andi	r2,r2,16384
 4004bf8:	1005003a 	cmpeq	r2,r2,zero
 4004bfc:	1000031e 	bne	r2,zero,4004c0c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4004c00:	00bffd44 	movi	r2,-11
 4004c04:	e0bfff15 	stw	r2,-4(fp)
 4004c08:	00000206 	br	4004c14 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 4004c0c:	00bffec4 	movi	r2,-5
 4004c10:	e0bfff15 	stw	r2,-4(fp)
 4004c14:	e0bfff17 	ldw	r2,-4(fp)
}
 4004c18:	e037883a 	mov	sp,fp
 4004c1c:	dfc00117 	ldw	ra,4(sp)
 4004c20:	df000017 	ldw	fp,0(sp)
 4004c24:	dec00204 	addi	sp,sp,8
 4004c28:	f800283a 	ret

04004c2c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4004c2c:	defff204 	addi	sp,sp,-56
 4004c30:	dfc00d15 	stw	ra,52(sp)
 4004c34:	df000c15 	stw	fp,48(sp)
 4004c38:	df000c04 	addi	fp,sp,48
 4004c3c:	e13ffb15 	stw	r4,-20(fp)
 4004c40:	e17ffc15 	stw	r5,-16(fp)
 4004c44:	e1bffd15 	stw	r6,-12(fp)
 4004c48:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4004c4c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4004c50:	e0bffc17 	ldw	r2,-16(fp)
 4004c54:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4004c58:	00003a06 	br	4004d44 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4004c5c:	e0bffb17 	ldw	r2,-20(fp)
 4004c60:	10800c17 	ldw	r2,48(r2)
 4004c64:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 4004c68:	e0bffb17 	ldw	r2,-20(fp)
 4004c6c:	10800d17 	ldw	r2,52(r2)
 4004c70:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 4004c74:	e0fffa17 	ldw	r3,-24(fp)
 4004c78:	e0bff917 	ldw	r2,-28(fp)
 4004c7c:	1880062e 	bgeu	r3,r2,4004c98 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4004c80:	e0fff917 	ldw	r3,-28(fp)
 4004c84:	e0bffa17 	ldw	r2,-24(fp)
 4004c88:	1885c83a 	sub	r2,r3,r2
 4004c8c:	10bfffc4 	addi	r2,r2,-1
 4004c90:	e0bff815 	stw	r2,-32(fp)
 4004c94:	00000c06 	br	4004cc8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 4004c98:	e0bff917 	ldw	r2,-28(fp)
 4004c9c:	1005003a 	cmpeq	r2,r2,zero
 4004ca0:	1000051e 	bne	r2,zero,4004cb8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4004ca4:	00820004 	movi	r2,2048
 4004ca8:	e0fffa17 	ldw	r3,-24(fp)
 4004cac:	10c5c83a 	sub	r2,r2,r3
 4004cb0:	e0bff815 	stw	r2,-32(fp)
 4004cb4:	00000406 	br	4004cc8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4004cb8:	0081ffc4 	movi	r2,2047
 4004cbc:	e0fffa17 	ldw	r3,-24(fp)
 4004cc0:	10c5c83a 	sub	r2,r2,r3
 4004cc4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4004cc8:	e0bff817 	ldw	r2,-32(fp)
 4004ccc:	1005003a 	cmpeq	r2,r2,zero
 4004cd0:	10001f1e 	bne	r2,zero,4004d50 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 4004cd4:	e0fffd17 	ldw	r3,-12(fp)
 4004cd8:	e0bff817 	ldw	r2,-32(fp)
 4004cdc:	1880022e 	bgeu	r3,r2,4004ce8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 4004ce0:	e0bffd17 	ldw	r2,-12(fp)
 4004ce4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4004ce8:	e0bffb17 	ldw	r2,-20(fp)
 4004cec:	10c20e04 	addi	r3,r2,2104
 4004cf0:	e0bffa17 	ldw	r2,-24(fp)
 4004cf4:	1885883a 	add	r2,r3,r2
 4004cf8:	e0fffc17 	ldw	r3,-16(fp)
 4004cfc:	1009883a 	mov	r4,r2
 4004d00:	180b883a 	mov	r5,r3
 4004d04:	e1bff817 	ldw	r6,-32(fp)
 4004d08:	4001ac80 	call	4001ac8 <memcpy>
      ptr   += n;
 4004d0c:	e0fff817 	ldw	r3,-32(fp)
 4004d10:	e0bffc17 	ldw	r2,-16(fp)
 4004d14:	10c5883a 	add	r2,r2,r3
 4004d18:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 4004d1c:	e0fffd17 	ldw	r3,-12(fp)
 4004d20:	e0bff817 	ldw	r2,-32(fp)
 4004d24:	1885c83a 	sub	r2,r3,r2
 4004d28:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004d2c:	e0fffa17 	ldw	r3,-24(fp)
 4004d30:	e0bff817 	ldw	r2,-32(fp)
 4004d34:	1885883a 	add	r2,r3,r2
 4004d38:	10c1ffcc 	andi	r3,r2,2047
 4004d3c:	e0bffb17 	ldw	r2,-20(fp)
 4004d40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4004d44:	e0bffd17 	ldw	r2,-12(fp)
 4004d48:	10800048 	cmpgei	r2,r2,1
 4004d4c:	103fc31e 	bne	r2,zero,4004c5c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004d50:	0005303a 	rdctl	r2,status
 4004d54:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004d58:	e0fff517 	ldw	r3,-44(fp)
 4004d5c:	00bfff84 	movi	r2,-2
 4004d60:	1884703a 	and	r2,r3,r2
 4004d64:	1001703a 	wrctl	status,r2
  
  return context;
 4004d68:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4004d6c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4004d70:	e0bffb17 	ldw	r2,-20(fp)
 4004d74:	10800817 	ldw	r2,32(r2)
 4004d78:	10c00094 	ori	r3,r2,2
 4004d7c:	e0bffb17 	ldw	r2,-20(fp)
 4004d80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004d84:	e0bffb17 	ldw	r2,-20(fp)
 4004d88:	10800017 	ldw	r2,0(r2)
 4004d8c:	11000104 	addi	r4,r2,4
 4004d90:	e0bffb17 	ldw	r2,-20(fp)
 4004d94:	10800817 	ldw	r2,32(r2)
 4004d98:	1007883a 	mov	r3,r2
 4004d9c:	2005883a 	mov	r2,r4
 4004da0:	10c00035 	stwio	r3,0(r2)
 4004da4:	e0bff717 	ldw	r2,-36(fp)
 4004da8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004dac:	e0bff417 	ldw	r2,-48(fp)
 4004db0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4004db4:	e0bffd17 	ldw	r2,-12(fp)
 4004db8:	10800050 	cmplti	r2,r2,1
 4004dbc:	1000111e 	bne	r2,zero,4004e04 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 4004dc0:	e0bffe17 	ldw	r2,-8(fp)
 4004dc4:	1090000c 	andi	r2,r2,16384
 4004dc8:	1004c03a 	cmpne	r2,r2,zero
 4004dcc:	1000101e 	bne	r2,zero,4004e10 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4004dd0:	e0bffb17 	ldw	r2,-20(fp)
 4004dd4:	10c00d17 	ldw	r3,52(r2)
 4004dd8:	e0bff917 	ldw	r2,-28(fp)
 4004ddc:	1880051e 	bne	r3,r2,4004df4 <altera_avalon_jtag_uart_write+0x1c8>
 4004de0:	e0bffb17 	ldw	r2,-20(fp)
 4004de4:	10c00917 	ldw	r3,36(r2)
 4004de8:	e0bffb17 	ldw	r2,-20(fp)
 4004dec:	10800117 	ldw	r2,4(r2)
 4004df0:	18bff736 	bltu	r3,r2,4004dd0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4004df4:	e0bffb17 	ldw	r2,-20(fp)
 4004df8:	10c00d17 	ldw	r3,52(r2)
 4004dfc:	e0bff917 	ldw	r2,-28(fp)
 4004e00:	18800326 	beq	r3,r2,4004e10 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 4004e04:	e0bffd17 	ldw	r2,-12(fp)
 4004e08:	10800048 	cmpgei	r2,r2,1
 4004e0c:	103fcd1e 	bne	r2,zero,4004d44 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4004e10:	e0fffc17 	ldw	r3,-16(fp)
 4004e14:	e0bff617 	ldw	r2,-40(fp)
 4004e18:	18800526 	beq	r3,r2,4004e30 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 4004e1c:	e0fffc17 	ldw	r3,-16(fp)
 4004e20:	e0bff617 	ldw	r2,-40(fp)
 4004e24:	1887c83a 	sub	r3,r3,r2
 4004e28:	e0ffff15 	stw	r3,-4(fp)
 4004e2c:	00000906 	br	4004e54 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 4004e30:	e0bffe17 	ldw	r2,-8(fp)
 4004e34:	1090000c 	andi	r2,r2,16384
 4004e38:	1005003a 	cmpeq	r2,r2,zero
 4004e3c:	1000031e 	bne	r2,zero,4004e4c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 4004e40:	00bffd44 	movi	r2,-11
 4004e44:	e0bfff15 	stw	r2,-4(fp)
 4004e48:	00000206 	br	4004e54 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4004e4c:	00bffec4 	movi	r2,-5
 4004e50:	e0bfff15 	stw	r2,-4(fp)
 4004e54:	e0bfff17 	ldw	r2,-4(fp)
}
 4004e58:	e037883a 	mov	sp,fp
 4004e5c:	dfc00117 	ldw	ra,4(sp)
 4004e60:	df000017 	ldw	fp,0(sp)
 4004e64:	dec00204 	addi	sp,sp,8
 4004e68:	f800283a 	ret

04004e6c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
 4004e6c:	defffa04 	addi	sp,sp,-24
 4004e70:	dfc00515 	stw	ra,20(sp)
 4004e74:	df000415 	stw	fp,16(sp)
 4004e78:	df000404 	addi	fp,sp,16
 4004e7c:	e13ffe15 	stw	r4,-8(fp)
 4004e80:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 4004e84:	e0bffe17 	ldw	r2,-8(fp)
 4004e88:	10800017 	ldw	r2,0(r2)
 4004e8c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 4004e90:	008003f4 	movhi	r2,15
 4004e94:	10909004 	addi	r2,r2,16960
 4004e98:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 4004e9c:	e0bffe17 	ldw	r2,-8(fp)
 4004ea0:	10800803 	ldbu	r2,32(r2)
 4004ea4:	10803fcc 	andi	r2,r2,255
 4004ea8:	1080201c 	xori	r2,r2,128
 4004eac:	10bfe004 	addi	r2,r2,-128
 4004eb0:	1004c03a 	cmpne	r2,r2,zero
 4004eb4:	1000161e 	bne	r2,zero,4004f10 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 4004eb8:	00000a06 	br	4004ee4 <lcd_write_command+0x78>
    if (--i == 0)
 4004ebc:	e0bffc17 	ldw	r2,-16(fp)
 4004ec0:	10bfffc4 	addi	r2,r2,-1
 4004ec4:	e0bffc15 	stw	r2,-16(fp)
 4004ec8:	e0bffc17 	ldw	r2,-16(fp)
 4004ecc:	1004c03a 	cmpne	r2,r2,zero
 4004ed0:	1000041e 	bne	r2,zero,4004ee4 <lcd_write_command+0x78>
    {
      sp->broken = 1;
 4004ed4:	e0fffe17 	ldw	r3,-8(fp)
 4004ed8:	00800044 	movi	r2,1
 4004edc:	18800805 	stb	r2,32(r3)
      return;
 4004ee0:	00000b06 	br	4004f10 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 4004ee4:	e0bffd17 	ldw	r2,-12(fp)
 4004ee8:	10800104 	addi	r2,r2,4
 4004eec:	10800037 	ldwio	r2,0(r2)
 4004ef0:	1080200c 	andi	r2,r2,128
 4004ef4:	1004c03a 	cmpne	r2,r2,zero
 4004ef8:	103ff01e 	bne	r2,zero,4004ebc <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 4004efc:	01001904 	movi	r4,100
 4004f00:	40041100 	call	4004110 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
 4004f04:	e0bffd17 	ldw	r2,-12(fp)
 4004f08:	e0ffff03 	ldbu	r3,-4(fp)
 4004f0c:	10c00035 	stwio	r3,0(r2)
}
 4004f10:	e037883a 	mov	sp,fp
 4004f14:	dfc00117 	ldw	ra,4(sp)
 4004f18:	df000017 	ldw	fp,0(sp)
 4004f1c:	dec00204 	addi	sp,sp,8
 4004f20:	f800283a 	ret

04004f24 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
 4004f24:	defffa04 	addi	sp,sp,-24
 4004f28:	dfc00515 	stw	ra,20(sp)
 4004f2c:	df000415 	stw	fp,16(sp)
 4004f30:	df000404 	addi	fp,sp,16
 4004f34:	e13ffe15 	stw	r4,-8(fp)
 4004f38:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 4004f3c:	e0bffe17 	ldw	r2,-8(fp)
 4004f40:	10800017 	ldw	r2,0(r2)
 4004f44:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 4004f48:	008003f4 	movhi	r2,15
 4004f4c:	10909004 	addi	r2,r2,16960
 4004f50:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 4004f54:	e0bffe17 	ldw	r2,-8(fp)
 4004f58:	10800803 	ldbu	r2,32(r2)
 4004f5c:	10803fcc 	andi	r2,r2,255
 4004f60:	1080201c 	xori	r2,r2,128
 4004f64:	10bfe004 	addi	r2,r2,-128
 4004f68:	1004c03a 	cmpne	r2,r2,zero
 4004f6c:	10001d1e 	bne	r2,zero,4004fe4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 4004f70:	00000a06 	br	4004f9c <lcd_write_data+0x78>
    if (--i == 0)
 4004f74:	e0bffc17 	ldw	r2,-16(fp)
 4004f78:	10bfffc4 	addi	r2,r2,-1
 4004f7c:	e0bffc15 	stw	r2,-16(fp)
 4004f80:	e0bffc17 	ldw	r2,-16(fp)
 4004f84:	1004c03a 	cmpne	r2,r2,zero
 4004f88:	1000041e 	bne	r2,zero,4004f9c <lcd_write_data+0x78>
    {
      sp->broken = 1;
 4004f8c:	e0fffe17 	ldw	r3,-8(fp)
 4004f90:	00800044 	movi	r2,1
 4004f94:	18800805 	stb	r2,32(r3)
      return;
 4004f98:	00001206 	br	4004fe4 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 4004f9c:	e0bffd17 	ldw	r2,-12(fp)
 4004fa0:	10800104 	addi	r2,r2,4
 4004fa4:	10800037 	ldwio	r2,0(r2)
 4004fa8:	1080200c 	andi	r2,r2,128
 4004fac:	1004c03a 	cmpne	r2,r2,zero
 4004fb0:	103ff01e 	bne	r2,zero,4004f74 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 4004fb4:	01001904 	movi	r4,100
 4004fb8:	40041100 	call	4004110 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
 4004fbc:	e0bffd17 	ldw	r2,-12(fp)
 4004fc0:	10800204 	addi	r2,r2,8
 4004fc4:	e0ffff03 	ldbu	r3,-4(fp)
 4004fc8:	10c00035 	stwio	r3,0(r2)

  sp->address++;
 4004fcc:	e0bffe17 	ldw	r2,-8(fp)
 4004fd0:	108008c3 	ldbu	r2,35(r2)
 4004fd4:	10800044 	addi	r2,r2,1
 4004fd8:	1007883a 	mov	r3,r2
 4004fdc:	e0bffe17 	ldw	r2,-8(fp)
 4004fe0:	10c008c5 	stb	r3,35(r2)
}
 4004fe4:	e037883a 	mov	sp,fp
 4004fe8:	dfc00117 	ldw	ra,4(sp)
 4004fec:	df000017 	ldw	fp,0(sp)
 4004ff0:	dec00204 	addi	sp,sp,8
 4004ff4:	f800283a 	ret

04004ff8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
 4004ff8:	defffc04 	addi	sp,sp,-16
 4004ffc:	dfc00315 	stw	ra,12(sp)
 4005000:	df000215 	stw	fp,8(sp)
 4005004:	df000204 	addi	fp,sp,8
 4005008:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
 400500c:	e13fff17 	ldw	r4,-4(fp)
 4005010:	01400044 	movi	r5,1
 4005014:	4004e6c0 	call	4004e6c <lcd_write_command>

  sp->x = 0;
 4005018:	e0bfff17 	ldw	r2,-4(fp)
 400501c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
 4005020:	e0bfff17 	ldw	r2,-4(fp)
 4005024:	10000885 	stb	zero,34(r2)
  sp->address = 0;
 4005028:	e0bfff17 	ldw	r2,-4(fp)
 400502c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 4005030:	e03ffe15 	stw	zero,-8(fp)
 4005034:	00001906 	br	400509c <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
 4005038:	e0bffe17 	ldw	r2,-8(fp)
 400503c:	108018e4 	muli	r2,r2,99
 4005040:	10c01004 	addi	r3,r2,64
 4005044:	e0bfff17 	ldw	r2,-4(fp)
 4005048:	1889883a 	add	r4,r3,r2
 400504c:	01400804 	movi	r5,32
 4005050:	01801444 	movi	r6,81
 4005054:	400302c0 	call	400302c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
 4005058:	e0bffe17 	ldw	r2,-8(fp)
 400505c:	108018e4 	muli	r2,r2,99
 4005060:	10c00c04 	addi	r3,r2,48
 4005064:	e0bfff17 	ldw	r2,-4(fp)
 4005068:	1889883a 	add	r4,r3,r2
 400506c:	01400804 	movi	r5,32
 4005070:	01800404 	movi	r6,16
 4005074:	400302c0 	call	400302c <memset>
    sp->line[y].width = 0;
 4005078:	e0bffe17 	ldw	r2,-8(fp)
 400507c:	e0ffff17 	ldw	r3,-4(fp)
 4005080:	108018e4 	muli	r2,r2,99
 4005084:	10c5883a 	add	r2,r2,r3
 4005088:	10802404 	addi	r2,r2,144
 400508c:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 4005090:	e0bffe17 	ldw	r2,-8(fp)
 4005094:	10800044 	addi	r2,r2,1
 4005098:	e0bffe15 	stw	r2,-8(fp)
 400509c:	e0bffe17 	ldw	r2,-8(fp)
 40050a0:	10800090 	cmplti	r2,r2,2
 40050a4:	103fe41e 	bne	r2,zero,4005038 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
 40050a8:	e037883a 	mov	sp,fp
 40050ac:	dfc00117 	ldw	ra,4(sp)
 40050b0:	df000017 	ldw	fp,0(sp)
 40050b4:	dec00204 	addi	sp,sp,8
 40050b8:	f800283a 	ret

040050bc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
 40050bc:	defff604 	addi	sp,sp,-40
 40050c0:	dfc00915 	stw	ra,36(sp)
 40050c4:	df000815 	stw	fp,32(sp)
 40050c8:	dc000715 	stw	r16,28(sp)
 40050cc:	df000704 	addi	fp,sp,28
 40050d0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
 40050d4:	e0bfff17 	ldw	r2,-4(fp)
 40050d8:	10800943 	ldbu	r2,37(r2)
 40050dc:	10803fcc 	andi	r2,r2,255
 40050e0:	1080201c 	xori	r2,r2,128
 40050e4:	10bfe004 	addi	r2,r2,-128
 40050e8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 40050ec:	e03ffe15 	stw	zero,-8(fp)
 40050f0:	00006406 	br	4005284 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
 40050f4:	e0bffe17 	ldw	r2,-8(fp)
 40050f8:	e0ffff17 	ldw	r3,-4(fp)
 40050fc:	108018e4 	muli	r2,r2,99
 4005100:	10c5883a 	add	r2,r2,r3
 4005104:	10802404 	addi	r2,r2,144
 4005108:	10800043 	ldbu	r2,1(r2)
 400510c:	10803fcc 	andi	r2,r2,255
 4005110:	1080201c 	xori	r2,r2,128
 4005114:	10bfe004 	addi	r2,r2,-128
 4005118:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
 400511c:	e0bffe17 	ldw	r2,-8(fp)
 4005120:	e0ffff17 	ldw	r3,-4(fp)
 4005124:	108018e4 	muli	r2,r2,99
 4005128:	10c5883a 	add	r2,r2,r3
 400512c:	10802404 	addi	r2,r2,144
 4005130:	10800083 	ldbu	r2,2(r2)
 4005134:	10c03fcc 	andi	r3,r2,255
 4005138:	e0bffc17 	ldw	r2,-16(fp)
 400513c:	1885383a 	mul	r2,r3,r2
 4005140:	1005d23a 	srai	r2,r2,8
 4005144:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
 4005148:	e0fffa17 	ldw	r3,-24(fp)
 400514c:	e0bffb17 	ldw	r2,-20(fp)
 4005150:	18800116 	blt	r3,r2,4005158 <lcd_repaint_screen+0x9c>
      offset = 0;
 4005154:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 4005158:	e03ffd15 	stw	zero,-12(fp)
 400515c:	00004306 	br	400526c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
 4005160:	e43ffe17 	ldw	r16,-8(fp)
 4005164:	e0fffd17 	ldw	r3,-12(fp)
 4005168:	e0bffa17 	ldw	r2,-24(fp)
 400516c:	1889883a 	add	r4,r3,r2
 4005170:	e17ffb17 	ldw	r5,-20(fp)
 4005174:	4000c700 	call	4000c70 <__modsi3>
 4005178:	1009883a 	mov	r4,r2
 400517c:	e0ffff17 	ldw	r3,-4(fp)
 4005180:	808018e4 	muli	r2,r16,99
 4005184:	10c5883a 	add	r2,r2,r3
 4005188:	1105883a 	add	r2,r2,r4
 400518c:	10801004 	addi	r2,r2,64
 4005190:	10800003 	ldbu	r2,0(r2)
 4005194:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
 4005198:	e0bffe17 	ldw	r2,-8(fp)
 400519c:	e13ffd17 	ldw	r4,-12(fp)
 40051a0:	e0ffff17 	ldw	r3,-4(fp)
 40051a4:	108018e4 	muli	r2,r2,99
 40051a8:	10c5883a 	add	r2,r2,r3
 40051ac:	1105883a 	add	r2,r2,r4
 40051b0:	10800c04 	addi	r2,r2,48
 40051b4:	10800003 	ldbu	r2,0(r2)
 40051b8:	10c03fcc 	andi	r3,r2,255
 40051bc:	18c0201c 	xori	r3,r3,128
 40051c0:	18ffe004 	addi	r3,r3,-128
 40051c4:	e0bff947 	ldb	r2,-27(fp)
 40051c8:	18802526 	beq	r3,r2,4005260 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
 40051cc:	e0fffe17 	ldw	r3,-8(fp)
 40051d0:	d0a00c04 	addi	r2,gp,-32720
 40051d4:	1885883a 	add	r2,r3,r2
 40051d8:	10800003 	ldbu	r2,0(r2)
 40051dc:	1007883a 	mov	r3,r2
 40051e0:	e0bffd17 	ldw	r2,-12(fp)
 40051e4:	1885883a 	add	r2,r3,r2
 40051e8:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
 40051ec:	e0fff903 	ldbu	r3,-28(fp)
 40051f0:	e0bfff17 	ldw	r2,-4(fp)
 40051f4:	108008c3 	ldbu	r2,35(r2)
 40051f8:	10803fcc 	andi	r2,r2,255
 40051fc:	1080201c 	xori	r2,r2,128
 4005200:	10bfe004 	addi	r2,r2,-128
 4005204:	18800926 	beq	r3,r2,400522c <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
 4005208:	e0fff903 	ldbu	r3,-28(fp)
 400520c:	00bfe004 	movi	r2,-128
 4005210:	1884b03a 	or	r2,r3,r2
 4005214:	11403fcc 	andi	r5,r2,255
 4005218:	e13fff17 	ldw	r4,-4(fp)
 400521c:	4004e6c0 	call	4004e6c <lcd_write_command>
          sp->address = address;
 4005220:	e0fff903 	ldbu	r3,-28(fp)
 4005224:	e0bfff17 	ldw	r2,-4(fp)
 4005228:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
 400522c:	e0bff943 	ldbu	r2,-27(fp)
 4005230:	11403fcc 	andi	r5,r2,255
 4005234:	e13fff17 	ldw	r4,-4(fp)
 4005238:	4004f240 	call	4004f24 <lcd_write_data>
        sp->line[y].visible[x] = c;
 400523c:	e0bffe17 	ldw	r2,-8(fp)
 4005240:	e13ffd17 	ldw	r4,-12(fp)
 4005244:	e0ffff17 	ldw	r3,-4(fp)
 4005248:	108018e4 	muli	r2,r2,99
 400524c:	10c5883a 	add	r2,r2,r3
 4005250:	1105883a 	add	r2,r2,r4
 4005254:	10c00c04 	addi	r3,r2,48
 4005258:	e0bff943 	ldbu	r2,-27(fp)
 400525c:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 4005260:	e0bffd17 	ldw	r2,-12(fp)
 4005264:	10800044 	addi	r2,r2,1
 4005268:	e0bffd15 	stw	r2,-12(fp)
 400526c:	e0bffd17 	ldw	r2,-12(fp)
 4005270:	10800410 	cmplti	r2,r2,16
 4005274:	103fba1e 	bne	r2,zero,4005160 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 4005278:	e0bffe17 	ldw	r2,-8(fp)
 400527c:	10800044 	addi	r2,r2,1
 4005280:	e0bffe15 	stw	r2,-8(fp)
 4005284:	e0bffe17 	ldw	r2,-8(fp)
 4005288:	10800090 	cmplti	r2,r2,2
 400528c:	103f991e 	bne	r2,zero,40050f4 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
 4005290:	e037883a 	mov	sp,fp
 4005294:	dfc00217 	ldw	ra,8(sp)
 4005298:	df000117 	ldw	fp,4(sp)
 400529c:	dc000017 	ldw	r16,0(sp)
 40052a0:	dec00304 	addi	sp,sp,12
 40052a4:	f800283a 	ret

040052a8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
 40052a8:	defffc04 	addi	sp,sp,-16
 40052ac:	dfc00315 	stw	ra,12(sp)
 40052b0:	df000215 	stw	fp,8(sp)
 40052b4:	df000204 	addi	fp,sp,8
 40052b8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 40052bc:	e03ffe15 	stw	zero,-8(fp)
 40052c0:	00001d06 	br	4005338 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
 40052c4:	e0bffe17 	ldw	r2,-8(fp)
 40052c8:	10800048 	cmpgei	r2,r2,1
 40052cc:	10000f1e 	bne	r2,zero,400530c <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
 40052d0:	e0bffe17 	ldw	r2,-8(fp)
 40052d4:	108018e4 	muli	r2,r2,99
 40052d8:	10c01004 	addi	r3,r2,64
 40052dc:	e0bfff17 	ldw	r2,-4(fp)
 40052e0:	1889883a 	add	r4,r3,r2
 40052e4:	e0bffe17 	ldw	r2,-8(fp)
 40052e8:	10800044 	addi	r2,r2,1
 40052ec:	108018e4 	muli	r2,r2,99
 40052f0:	10c01004 	addi	r3,r2,64
 40052f4:	e0bfff17 	ldw	r2,-4(fp)
 40052f8:	1885883a 	add	r2,r3,r2
 40052fc:	100b883a 	mov	r5,r2
 4005300:	01801404 	movi	r6,80
 4005304:	4001ac80 	call	4001ac8 <memcpy>
 4005308:	00000806 	br	400532c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
 400530c:	e0bffe17 	ldw	r2,-8(fp)
 4005310:	108018e4 	muli	r2,r2,99
 4005314:	10c01004 	addi	r3,r2,64
 4005318:	e0bfff17 	ldw	r2,-4(fp)
 400531c:	1889883a 	add	r4,r3,r2
 4005320:	01400804 	movi	r5,32
 4005324:	01801404 	movi	r6,80
 4005328:	400302c0 	call	400302c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 400532c:	e0bffe17 	ldw	r2,-8(fp)
 4005330:	10800044 	addi	r2,r2,1
 4005334:	e0bffe15 	stw	r2,-8(fp)
 4005338:	e0bffe17 	ldw	r2,-8(fp)
 400533c:	10800090 	cmplti	r2,r2,2
 4005340:	103fe01e 	bne	r2,zero,40052c4 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
 4005344:	e0bfff17 	ldw	r2,-4(fp)
 4005348:	10800883 	ldbu	r2,34(r2)
 400534c:	10bfffc4 	addi	r2,r2,-1
 4005350:	1007883a 	mov	r3,r2
 4005354:	e0bfff17 	ldw	r2,-4(fp)
 4005358:	10c00885 	stb	r3,34(r2)
}
 400535c:	e037883a 	mov	sp,fp
 4005360:	dfc00117 	ldw	ra,4(sp)
 4005364:	df000017 	ldw	fp,0(sp)
 4005368:	dec00204 	addi	sp,sp,8
 400536c:	f800283a 	ret

04005370 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
 4005370:	defff804 	addi	sp,sp,-32
 4005374:	dfc00715 	stw	ra,28(sp)
 4005378:	df000615 	stw	fp,24(sp)
 400537c:	df000604 	addi	fp,sp,24
 4005380:	e13ffd15 	stw	r4,-12(fp)
 4005384:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
 4005388:	e03ffc15 	stw	zero,-16(fp)
 400538c:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
 4005390:	e0bffd17 	ldw	r2,-12(fp)
 4005394:	10800a03 	ldbu	r2,40(r2)
 4005398:	10803fcc 	andi	r2,r2,255
 400539c:	1080201c 	xori	r2,r2,128
 40053a0:	10bfe004 	addi	r2,r2,-128
 40053a4:	108016d8 	cmpnei	r2,r2,91
 40053a8:	1000491e 	bne	r2,zero,40054d0 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
 40053ac:	e0bffd17 	ldw	r2,-12(fp)
 40053b0:	10800a04 	addi	r2,r2,40
 40053b4:	10800044 	addi	r2,r2,1
 40053b8:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
 40053bc:	00000d06 	br	40053f4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
 40053c0:	e0bffc17 	ldw	r2,-16(fp)
 40053c4:	10c002a4 	muli	r3,r2,10
 40053c8:	e0bffa17 	ldw	r2,-24(fp)
 40053cc:	10800003 	ldbu	r2,0(r2)
 40053d0:	10803fcc 	andi	r2,r2,255
 40053d4:	1080201c 	xori	r2,r2,128
 40053d8:	10bfe004 	addi	r2,r2,-128
 40053dc:	1885883a 	add	r2,r3,r2
 40053e0:	10bff404 	addi	r2,r2,-48
 40053e4:	e0bffc15 	stw	r2,-16(fp)
 40053e8:	e0bffa17 	ldw	r2,-24(fp)
 40053ec:	10800044 	addi	r2,r2,1
 40053f0:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
 40053f4:	e0bffa17 	ldw	r2,-24(fp)
 40053f8:	10800003 	ldbu	r2,0(r2)
 40053fc:	10803fcc 	andi	r2,r2,255
 4005400:	1080201c 	xori	r2,r2,128
 4005404:	10bfe004 	addi	r2,r2,-128
 4005408:	1007883a 	mov	r3,r2
 400540c:	00810074 	movhi	r2,1025
 4005410:	10a6fe04 	addi	r2,r2,-25608
 4005414:	10800017 	ldw	r2,0(r2)
 4005418:	1885883a 	add	r2,r3,r2
 400541c:	10800003 	ldbu	r2,0(r2)
 4005420:	10803fcc 	andi	r2,r2,255
 4005424:	1080010c 	andi	r2,r2,4
 4005428:	1004c03a 	cmpne	r2,r2,zero
 400542c:	103fe41e 	bne	r2,zero,40053c0 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
 4005430:	e0bffa17 	ldw	r2,-24(fp)
 4005434:	10800003 	ldbu	r2,0(r2)
 4005438:	10803fcc 	andi	r2,r2,255
 400543c:	1080201c 	xori	r2,r2,128
 4005440:	10bfe004 	addi	r2,r2,-128
 4005444:	10800ed8 	cmpnei	r2,r2,59
 4005448:	1000231e 	bne	r2,zero,40054d8 <lcd_handle_escape+0x168>
    {
      ptr++;
 400544c:	e0bffa17 	ldw	r2,-24(fp)
 4005450:	10800044 	addi	r2,r2,1
 4005454:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
 4005458:	00000d06 	br	4005490 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
 400545c:	e0bffb17 	ldw	r2,-20(fp)
 4005460:	10c002a4 	muli	r3,r2,10
 4005464:	e0bffa17 	ldw	r2,-24(fp)
 4005468:	10800003 	ldbu	r2,0(r2)
 400546c:	10803fcc 	andi	r2,r2,255
 4005470:	1080201c 	xori	r2,r2,128
 4005474:	10bfe004 	addi	r2,r2,-128
 4005478:	1885883a 	add	r2,r3,r2
 400547c:	10bff404 	addi	r2,r2,-48
 4005480:	e0bffb15 	stw	r2,-20(fp)
 4005484:	e0bffa17 	ldw	r2,-24(fp)
 4005488:	10800044 	addi	r2,r2,1
 400548c:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
 4005490:	e0bffa17 	ldw	r2,-24(fp)
 4005494:	10800003 	ldbu	r2,0(r2)
 4005498:	10803fcc 	andi	r2,r2,255
 400549c:	1080201c 	xori	r2,r2,128
 40054a0:	10bfe004 	addi	r2,r2,-128
 40054a4:	1007883a 	mov	r3,r2
 40054a8:	00810074 	movhi	r2,1025
 40054ac:	10a6fe04 	addi	r2,r2,-25608
 40054b0:	10800017 	ldw	r2,0(r2)
 40054b4:	1885883a 	add	r2,r3,r2
 40054b8:	10800003 	ldbu	r2,0(r2)
 40054bc:	10803fcc 	andi	r2,r2,255
 40054c0:	1080010c 	andi	r2,r2,4
 40054c4:	1004c03a 	cmpne	r2,r2,zero
 40054c8:	103fe41e 	bne	r2,zero,400545c <lcd_handle_escape+0xec>
 40054cc:	00000206 	br	40054d8 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
 40054d0:	00bfffc4 	movi	r2,-1
 40054d4:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
 40054d8:	e0bffe07 	ldb	r2,-8(fp)
 40054dc:	e0bfff15 	stw	r2,-4(fp)
 40054e0:	e0ffff17 	ldw	r3,-4(fp)
 40054e4:	188012a0 	cmpeqi	r2,r3,74
 40054e8:	10002f1e 	bne	r2,zero,40055a8 <lcd_handle_escape+0x238>
 40054ec:	e0ffff17 	ldw	r3,-4(fp)
 40054f0:	188012c8 	cmpgei	r2,r3,75
 40054f4:	1000041e 	bne	r2,zero,4005508 <lcd_handle_escape+0x198>
 40054f8:	e0ffff17 	ldw	r3,-4(fp)
 40054fc:	18801220 	cmpeqi	r2,r3,72
 4005500:	1000081e 	bne	r2,zero,4005524 <lcd_handle_escape+0x1b4>
 4005504:	00004906 	br	400562c <lcd_handle_escape+0x2bc>
 4005508:	e0ffff17 	ldw	r3,-4(fp)
 400550c:	188012e0 	cmpeqi	r2,r3,75
 4005510:	10002b1e 	bne	r2,zero,40055c0 <lcd_handle_escape+0x250>
 4005514:	e0ffff17 	ldw	r3,-4(fp)
 4005518:	188019a0 	cmpeqi	r2,r3,102
 400551c:	1000011e 	bne	r2,zero,4005524 <lcd_handle_escape+0x1b4>
 4005520:	00004206 	br	400562c <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
 4005524:	e0bffb17 	ldw	r2,-20(fp)
 4005528:	10800050 	cmplti	r2,r2,1
 400552c:	1000051e 	bne	r2,zero,4005544 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
 4005530:	e0bffb17 	ldw	r2,-20(fp)
 4005534:	10bfffc4 	addi	r2,r2,-1
 4005538:	1007883a 	mov	r3,r2
 400553c:	e0bffd17 	ldw	r2,-12(fp)
 4005540:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
 4005544:	e0bffc17 	ldw	r2,-16(fp)
 4005548:	10800050 	cmplti	r2,r2,1
 400554c:	1000371e 	bne	r2,zero,400562c <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
 4005550:	e0bffc17 	ldw	r2,-16(fp)
 4005554:	10bfffc4 	addi	r2,r2,-1
 4005558:	1007883a 	mov	r3,r2
 400555c:	e0bffd17 	ldw	r2,-12(fp)
 4005560:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
 4005564:	e0bffd17 	ldw	r2,-12(fp)
 4005568:	10800883 	ldbu	r2,34(r2)
 400556c:	10803fcc 	andi	r2,r2,255
 4005570:	10800170 	cmpltui	r2,r2,5
 4005574:	1000061e 	bne	r2,zero,4005590 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
 4005578:	e0fffd17 	ldw	r3,-12(fp)
 400557c:	00800104 	movi	r2,4
 4005580:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
 4005584:	00000206 	br	4005590 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
 4005588:	e13ffd17 	ldw	r4,-12(fp)
 400558c:	40052a80 	call	40052a8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
 4005590:	e0bffd17 	ldw	r2,-12(fp)
 4005594:	10800883 	ldbu	r2,34(r2)
 4005598:	10803fcc 	andi	r2,r2,255
 400559c:	108000e8 	cmpgeui	r2,r2,3
 40055a0:	103ff91e 	bne	r2,zero,4005588 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
 40055a4:	00002106 	br	400562c <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
 40055a8:	e0bffc17 	ldw	r2,-16(fp)
 40055ac:	10800098 	cmpnei	r2,r2,2
 40055b0:	10001e1e 	bne	r2,zero,400562c <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
 40055b4:	e13ffd17 	ldw	r4,-12(fp)
 40055b8:	4004ff80 	call	4004ff8 <lcd_clear_screen>
    break;
 40055bc:	00001b06 	br	400562c <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
 40055c0:	e0bffc17 	ldw	r2,-16(fp)
 40055c4:	10800048 	cmpgei	r2,r2,1
 40055c8:	1000181e 	bne	r2,zero,400562c <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 40055cc:	e0bffd17 	ldw	r2,-12(fp)
 40055d0:	10800843 	ldbu	r2,33(r2)
 40055d4:	10803fcc 	andi	r2,r2,255
 40055d8:	10801428 	cmpgeui	r2,r2,80
 40055dc:	1000131e 	bne	r2,zero,400562c <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
 40055e0:	e0bffd17 	ldw	r2,-12(fp)
 40055e4:	10800883 	ldbu	r2,34(r2)
 40055e8:	10803fcc 	andi	r2,r2,255
 40055ec:	108018e4 	muli	r2,r2,99
 40055f0:	10c01004 	addi	r3,r2,64
 40055f4:	e0bffd17 	ldw	r2,-12(fp)
 40055f8:	1887883a 	add	r3,r3,r2
 40055fc:	e0bffd17 	ldw	r2,-12(fp)
 4005600:	10800843 	ldbu	r2,33(r2)
 4005604:	10803fcc 	andi	r2,r2,255
 4005608:	1889883a 	add	r4,r3,r2
 400560c:	e0bffd17 	ldw	r2,-12(fp)
 4005610:	10800843 	ldbu	r2,33(r2)
 4005614:	10c03fcc 	andi	r3,r2,255
 4005618:	00801404 	movi	r2,80
 400561c:	10c5c83a 	sub	r2,r2,r3
 4005620:	100d883a 	mov	r6,r2
 4005624:	01400804 	movi	r5,32
 4005628:	400302c0 	call	400302c <memset>
    }
    break;
  }
}
 400562c:	e037883a 	mov	sp,fp
 4005630:	dfc00117 	ldw	ra,4(sp)
 4005634:	df000017 	ldw	fp,0(sp)
 4005638:	dec00204 	addi	sp,sp,8
 400563c:	f800283a 	ret

04005640 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
 4005640:	defff204 	addi	sp,sp,-56
 4005644:	dfc00d15 	stw	ra,52(sp)
 4005648:	df000c15 	stw	fp,48(sp)
 400564c:	dc000b15 	stw	r16,44(sp)
 4005650:	df000b04 	addi	fp,sp,44
 4005654:	e13ffc15 	stw	r4,-16(fp)
 4005658:	e17ffd15 	stw	r5,-12(fp)
 400565c:	e1bffe15 	stw	r6,-8(fp)
 4005660:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
 4005664:	e0bffe17 	ldw	r2,-8(fp)
 4005668:	1007883a 	mov	r3,r2
 400566c:	e0bffd17 	ldw	r2,-12(fp)
 4005670:	10c5883a 	add	r2,r2,r3
 4005674:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
 4005678:	e0fffc17 	ldw	r3,-16(fp)
 400567c:	00800044 	movi	r2,1
 4005680:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
 4005684:	0000a206 	br	4005910 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
 4005688:	e0bffd17 	ldw	r2,-12(fp)
 400568c:	10800003 	ldbu	r2,0(r2)
 4005690:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
 4005694:	e0bffc17 	ldw	r2,-16(fp)
 4005698:	10800903 	ldbu	r2,36(r2)
 400569c:	10803fcc 	andi	r2,r2,255
 40056a0:	1080201c 	xori	r2,r2,128
 40056a4:	10bfe004 	addi	r2,r2,-128
 40056a8:	1004803a 	cmplt	r2,r2,zero
 40056ac:	10003b1e 	bne	r2,zero,400579c <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
 40056b0:	e0bffc17 	ldw	r2,-16(fp)
 40056b4:	10800903 	ldbu	r2,36(r2)
 40056b8:	10803fcc 	andi	r2,r2,255
 40056bc:	1080201c 	xori	r2,r2,128
 40056c0:	10bfe004 	addi	r2,r2,-128
 40056c4:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 40056c8:	e0bff717 	ldw	r2,-36(fp)
 40056cc:	1004c03a 	cmpne	r2,r2,zero
 40056d0:	1000031e 	bne	r2,zero,40056e0 <altera_avalon_lcd_16207_write+0xa0>
 40056d4:	e0bff807 	ldb	r2,-32(fp)
 40056d8:	108016d8 	cmpnei	r2,r2,91
 40056dc:	1000111e 	bne	r2,zero,4005724 <altera_avalon_lcd_16207_write+0xe4>
 40056e0:	e0bff717 	ldw	r2,-36(fp)
 40056e4:	1005003a 	cmpeq	r2,r2,zero
 40056e8:	10001a1e 	bne	r2,zero,4005754 <altera_avalon_lcd_16207_write+0x114>
 40056ec:	e0bff807 	ldb	r2,-32(fp)
 40056f0:	1007883a 	mov	r3,r2
 40056f4:	00810074 	movhi	r2,1025
 40056f8:	10a6fe04 	addi	r2,r2,-25608
 40056fc:	10800017 	ldw	r2,0(r2)
 4005700:	1885883a 	add	r2,r3,r2
 4005704:	10800003 	ldbu	r2,0(r2)
 4005708:	10803fcc 	andi	r2,r2,255
 400570c:	1080010c 	andi	r2,r2,4
 4005710:	1004c03a 	cmpne	r2,r2,zero
 4005714:	10000f1e 	bne	r2,zero,4005754 <altera_avalon_lcd_16207_write+0x114>
 4005718:	e0bff807 	ldb	r2,-32(fp)
 400571c:	10800ee0 	cmpeqi	r2,r2,59
 4005720:	10000c1e 	bne	r2,zero,4005754 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
 4005724:	e0fff717 	ldw	r3,-36(fp)
 4005728:	e0bffc17 	ldw	r2,-16(fp)
 400572c:	1885883a 	add	r2,r3,r2
 4005730:	10800a04 	addi	r2,r2,40
 4005734:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
 4005738:	e17ff807 	ldb	r5,-32(fp)
 400573c:	e13ffc17 	ldw	r4,-16(fp)
 4005740:	40053700 	call	4005370 <lcd_handle_escape>

        sp->esccount = -1;
 4005744:	e0fffc17 	ldw	r3,-16(fp)
 4005748:	00bfffc4 	movi	r2,-1
 400574c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 4005750:	00006c06 	br	4005904 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
 4005754:	e0bffc17 	ldw	r2,-16(fp)
 4005758:	10800903 	ldbu	r2,36(r2)
 400575c:	10803fcc 	andi	r2,r2,255
 4005760:	108001e8 	cmpgeui	r2,r2,7
 4005764:	1000671e 	bne	r2,zero,4005904 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
 4005768:	e0fff717 	ldw	r3,-36(fp)
 400576c:	e0bffc17 	ldw	r2,-16(fp)
 4005770:	1885883a 	add	r2,r3,r2
 4005774:	10c00a04 	addi	r3,r2,40
 4005778:	e0bff803 	ldbu	r2,-32(fp)
 400577c:	18800005 	stb	r2,0(r3)
        sp->esccount++;
 4005780:	e0bffc17 	ldw	r2,-16(fp)
 4005784:	10800903 	ldbu	r2,36(r2)
 4005788:	10800044 	addi	r2,r2,1
 400578c:	1007883a 	mov	r3,r2
 4005790:	e0bffc17 	ldw	r2,-16(fp)
 4005794:	10c00905 	stb	r3,36(r2)
 4005798:	00005a06 	br	4005904 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
 400579c:	e0bff807 	ldb	r2,-32(fp)
 40057a0:	108006d8 	cmpnei	r2,r2,27
 40057a4:	1000031e 	bne	r2,zero,40057b4 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
 40057a8:	e0bffc17 	ldw	r2,-16(fp)
 40057ac:	10000905 	stb	zero,36(r2)
 40057b0:	00005406 	br	4005904 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
 40057b4:	e0bff807 	ldb	r2,-32(fp)
 40057b8:	10800358 	cmpnei	r2,r2,13
 40057bc:	1000031e 	bne	r2,zero,40057cc <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
 40057c0:	e0bffc17 	ldw	r2,-16(fp)
 40057c4:	10000845 	stb	zero,33(r2)
 40057c8:	00004e06 	br	4005904 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
 40057cc:	e0bff807 	ldb	r2,-32(fp)
 40057d0:	10800298 	cmpnei	r2,r2,10
 40057d4:	1000101e 	bne	r2,zero,4005818 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
 40057d8:	e0bffc17 	ldw	r2,-16(fp)
 40057dc:	10000845 	stb	zero,33(r2)
      sp->y++;
 40057e0:	e0bffc17 	ldw	r2,-16(fp)
 40057e4:	10800883 	ldbu	r2,34(r2)
 40057e8:	10800044 	addi	r2,r2,1
 40057ec:	1007883a 	mov	r3,r2
 40057f0:	e0bffc17 	ldw	r2,-16(fp)
 40057f4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
 40057f8:	e0bffc17 	ldw	r2,-16(fp)
 40057fc:	10800883 	ldbu	r2,34(r2)
 4005800:	10803fcc 	andi	r2,r2,255
 4005804:	108000f0 	cmpltui	r2,r2,3
 4005808:	10003e1e 	bne	r2,zero,4005904 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
 400580c:	e13ffc17 	ldw	r4,-16(fp)
 4005810:	40052a80 	call	40052a8 <lcd_scroll_up>
 4005814:	00003b06 	br	4005904 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
 4005818:	e0bff807 	ldb	r2,-32(fp)
 400581c:	10800218 	cmpnei	r2,r2,8
 4005820:	10000c1e 	bne	r2,zero,4005854 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
 4005824:	e0bffc17 	ldw	r2,-16(fp)
 4005828:	10800843 	ldbu	r2,33(r2)
 400582c:	10803fcc 	andi	r2,r2,255
 4005830:	1005003a 	cmpeq	r2,r2,zero
 4005834:	1000331e 	bne	r2,zero,4005904 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
 4005838:	e0bffc17 	ldw	r2,-16(fp)
 400583c:	10800843 	ldbu	r2,33(r2)
 4005840:	10bfffc4 	addi	r2,r2,-1
 4005844:	1007883a 	mov	r3,r2
 4005848:	e0bffc17 	ldw	r2,-16(fp)
 400584c:	10c00845 	stb	r3,33(r2)
 4005850:	00002c06 	br	4005904 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
 4005854:	e0bff807 	ldb	r2,-32(fp)
 4005858:	1007883a 	mov	r3,r2
 400585c:	00810074 	movhi	r2,1025
 4005860:	10a6fe04 	addi	r2,r2,-25608
 4005864:	10800017 	ldw	r2,0(r2)
 4005868:	1885883a 	add	r2,r3,r2
 400586c:	10800003 	ldbu	r2,0(r2)
 4005870:	10803fcc 	andi	r2,r2,255
 4005874:	1080201c 	xori	r2,r2,128
 4005878:	10bfe004 	addi	r2,r2,-128
 400587c:	108025cc 	andi	r2,r2,151
 4005880:	1005003a 	cmpeq	r2,r2,zero
 4005884:	10001f1e 	bne	r2,zero,4005904 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
 4005888:	e0bffc17 	ldw	r2,-16(fp)
 400588c:	10800883 	ldbu	r2,34(r2)
 4005890:	10803fcc 	andi	r2,r2,255
 4005894:	108000b0 	cmpltui	r2,r2,2
 4005898:	1000021e 	bne	r2,zero,40058a4 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
 400589c:	e13ffc17 	ldw	r4,-16(fp)
 40058a0:	40052a80 	call	40052a8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 40058a4:	e0bffc17 	ldw	r2,-16(fp)
 40058a8:	10800843 	ldbu	r2,33(r2)
 40058ac:	10803fcc 	andi	r2,r2,255
 40058b0:	10801428 	cmpgeui	r2,r2,80
 40058b4:	10000d1e 	bne	r2,zero,40058ec <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
 40058b8:	e0bffc17 	ldw	r2,-16(fp)
 40058bc:	10800883 	ldbu	r2,34(r2)
 40058c0:	11003fcc 	andi	r4,r2,255
 40058c4:	e0bffc17 	ldw	r2,-16(fp)
 40058c8:	10800843 	ldbu	r2,33(r2)
 40058cc:	11403fcc 	andi	r5,r2,255
 40058d0:	e0fffc17 	ldw	r3,-16(fp)
 40058d4:	208018e4 	muli	r2,r4,99
 40058d8:	10c5883a 	add	r2,r2,r3
 40058dc:	1145883a 	add	r2,r2,r5
 40058e0:	10c01004 	addi	r3,r2,64
 40058e4:	e0bff803 	ldbu	r2,-32(fp)
 40058e8:	18800005 	stb	r2,0(r3)

      sp->x++;
 40058ec:	e0bffc17 	ldw	r2,-16(fp)
 40058f0:	10800843 	ldbu	r2,33(r2)
 40058f4:	10800044 	addi	r2,r2,1
 40058f8:	1007883a 	mov	r3,r2
 40058fc:	e0bffc17 	ldw	r2,-16(fp)
 4005900:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
 4005904:	e0bffd17 	ldw	r2,-12(fp)
 4005908:	10800044 	addi	r2,r2,1
 400590c:	e0bffd15 	stw	r2,-12(fp)
 4005910:	e0fffd17 	ldw	r3,-12(fp)
 4005914:	e0bffb17 	ldw	r2,-20(fp)
 4005918:	18bf5b36 	bltu	r3,r2,4005688 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
 400591c:	00800404 	movi	r2,16
 4005920:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 4005924:	e03ffa15 	stw	zero,-24(fp)
 4005928:	00003606 	br	4005a04 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 400592c:	00801404 	movi	r2,80
 4005930:	e0bff615 	stw	r2,-40(fp)
 4005934:	00001106 	br	400597c <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
 4005938:	e13ffa17 	ldw	r4,-24(fp)
 400593c:	e0bff617 	ldw	r2,-40(fp)
 4005940:	117fffc4 	addi	r5,r2,-1
 4005944:	e0fffc17 	ldw	r3,-16(fp)
 4005948:	208018e4 	muli	r2,r4,99
 400594c:	10c5883a 	add	r2,r2,r3
 4005950:	1145883a 	add	r2,r2,r5
 4005954:	10801004 	addi	r2,r2,64
 4005958:	10800003 	ldbu	r2,0(r2)
 400595c:	10803fcc 	andi	r2,r2,255
 4005960:	1080201c 	xori	r2,r2,128
 4005964:	10bfe004 	addi	r2,r2,-128
 4005968:	10800818 	cmpnei	r2,r2,32
 400596c:	1000061e 	bne	r2,zero,4005988 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 4005970:	e0bff617 	ldw	r2,-40(fp)
 4005974:	10bfffc4 	addi	r2,r2,-1
 4005978:	e0bff615 	stw	r2,-40(fp)
 400597c:	e0bff617 	ldw	r2,-40(fp)
 4005980:	10800048 	cmpgei	r2,r2,1
 4005984:	103fec1e 	bne	r2,zero,4005938 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
 4005988:	e0bff617 	ldw	r2,-40(fp)
 400598c:	10800448 	cmpgei	r2,r2,17
 4005990:	1000031e 	bne	r2,zero,40059a0 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
 4005994:	00800404 	movi	r2,16
 4005998:	e0bff615 	stw	r2,-40(fp)
 400599c:	00000306 	br	40059ac <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
 40059a0:	e0bff617 	ldw	r2,-40(fp)
 40059a4:	10800044 	addi	r2,r2,1
 40059a8:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
 40059ac:	e13ffa17 	ldw	r4,-24(fp)
 40059b0:	e0bff617 	ldw	r2,-40(fp)
 40059b4:	100b883a 	mov	r5,r2
 40059b8:	e0fffc17 	ldw	r3,-16(fp)
 40059bc:	208018e4 	muli	r2,r4,99
 40059c0:	10c5883a 	add	r2,r2,r3
 40059c4:	10802404 	addi	r2,r2,144
 40059c8:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
 40059cc:	e0fff917 	ldw	r3,-28(fp)
 40059d0:	e0bff617 	ldw	r2,-40(fp)
 40059d4:	1880020e 	bge	r3,r2,40059e0 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
 40059d8:	e0bff617 	ldw	r2,-40(fp)
 40059dc:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
 40059e0:	e0bffa17 	ldw	r2,-24(fp)
 40059e4:	e0fffc17 	ldw	r3,-16(fp)
 40059e8:	108018e4 	muli	r2,r2,99
 40059ec:	10c5883a 	add	r2,r2,r3
 40059f0:	10802404 	addi	r2,r2,144
 40059f4:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 40059f8:	e0bffa17 	ldw	r2,-24(fp)
 40059fc:	10800044 	addi	r2,r2,1
 4005a00:	e0bffa15 	stw	r2,-24(fp)
 4005a04:	e0bffa17 	ldw	r2,-24(fp)
 4005a08:	10800090 	cmplti	r2,r2,2
 4005a0c:	103fc71e 	bne	r2,zero,400592c <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
 4005a10:	e0bff917 	ldw	r2,-28(fp)
 4005a14:	10800448 	cmpgei	r2,r2,17
 4005a18:	1000031e 	bne	r2,zero,4005a28 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
 4005a1c:	e0bffc17 	ldw	r2,-16(fp)
 4005a20:	10000985 	stb	zero,38(r2)
 4005a24:	00002d06 	br	4005adc <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
 4005a28:	e0bff917 	ldw	r2,-28(fp)
 4005a2c:	1085883a 	add	r2,r2,r2
 4005a30:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
 4005a34:	e0bff917 	ldw	r2,-28(fp)
 4005a38:	1007883a 	mov	r3,r2
 4005a3c:	e0bffc17 	ldw	r2,-16(fp)
 4005a40:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 4005a44:	e03ffa15 	stw	zero,-24(fp)
 4005a48:	00002106 	br	4005ad0 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
 4005a4c:	e0bffa17 	ldw	r2,-24(fp)
 4005a50:	e0fffc17 	ldw	r3,-16(fp)
 4005a54:	108018e4 	muli	r2,r2,99
 4005a58:	10c5883a 	add	r2,r2,r3
 4005a5c:	10802404 	addi	r2,r2,144
 4005a60:	10800043 	ldbu	r2,1(r2)
 4005a64:	10803fcc 	andi	r2,r2,255
 4005a68:	1080201c 	xori	r2,r2,128
 4005a6c:	10bfe004 	addi	r2,r2,-128
 4005a70:	10800450 	cmplti	r2,r2,17
 4005a74:	1000131e 	bne	r2,zero,4005ac4 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
 4005a78:	e43ffa17 	ldw	r16,-24(fp)
 4005a7c:	e0bffa17 	ldw	r2,-24(fp)
 4005a80:	e0fffc17 	ldw	r3,-16(fp)
 4005a84:	108018e4 	muli	r2,r2,99
 4005a88:	10c5883a 	add	r2,r2,r3
 4005a8c:	10802404 	addi	r2,r2,144
 4005a90:	10800043 	ldbu	r2,1(r2)
 4005a94:	10803fcc 	andi	r2,r2,255
 4005a98:	1080201c 	xori	r2,r2,128
 4005a9c:	10bfe004 	addi	r2,r2,-128
 4005aa0:	1008923a 	slli	r4,r2,8
 4005aa4:	e17ff917 	ldw	r5,-28(fp)
 4005aa8:	4000c100 	call	4000c10 <__divsi3>
 4005aac:	1009883a 	mov	r4,r2
 4005ab0:	e0fffc17 	ldw	r3,-16(fp)
 4005ab4:	808018e4 	muli	r2,r16,99
 4005ab8:	10c5883a 	add	r2,r2,r3
 4005abc:	10802404 	addi	r2,r2,144
 4005ac0:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 4005ac4:	e0bffa17 	ldw	r2,-24(fp)
 4005ac8:	10800044 	addi	r2,r2,1
 4005acc:	e0bffa15 	stw	r2,-24(fp)
 4005ad0:	e0bffa17 	ldw	r2,-24(fp)
 4005ad4:	10800090 	cmplti	r2,r2,2
 4005ad8:	103fdc1e 	bne	r2,zero,4005a4c <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
 4005adc:	e0bffc17 	ldw	r2,-16(fp)
 4005ae0:	10800943 	ldbu	r2,37(r2)
 4005ae4:	10803fcc 	andi	r2,r2,255
 4005ae8:	1080201c 	xori	r2,r2,128
 4005aec:	10bfe004 	addi	r2,r2,-128
 4005af0:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
 4005af4:	e13ffc17 	ldw	r4,-16(fp)
 4005af8:	40050bc0 	call	40050bc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
 4005afc:	e0bffc17 	ldw	r2,-16(fp)
 4005b00:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
 4005b04:	e0bffc17 	ldw	r2,-16(fp)
 4005b08:	10800943 	ldbu	r2,37(r2)
 4005b0c:	10c03fcc 	andi	r3,r2,255
 4005b10:	18c0201c 	xori	r3,r3,128
 4005b14:	18ffe004 	addi	r3,r3,-128
 4005b18:	e0bff517 	ldw	r2,-44(fp)
 4005b1c:	18800426 	beq	r3,r2,4005b30 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
 4005b20:	e0fffc17 	ldw	r3,-16(fp)
 4005b24:	00800044 	movi	r2,1
 4005b28:	188009c5 	stb	r2,39(r3)
  }
 4005b2c:	003feb06 	br	4005adc <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
 4005b30:	e0bffe17 	ldw	r2,-8(fp)
}
 4005b34:	e037883a 	mov	sp,fp
 4005b38:	dfc00217 	ldw	ra,8(sp)
 4005b3c:	df000117 	ldw	fp,4(sp)
 4005b40:	dc000017 	ldw	r16,0(sp)
 4005b44:	dec00304 	addi	sp,sp,12
 4005b48:	f800283a 	ret

04005b4c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
 4005b4c:	defffc04 	addi	sp,sp,-16
 4005b50:	dfc00315 	stw	ra,12(sp)
 4005b54:	df000215 	stw	fp,8(sp)
 4005b58:	df000204 	addi	fp,sp,8
 4005b5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
 4005b60:	e0bfff17 	ldw	r2,-4(fp)
 4005b64:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
 4005b68:	e0bffe17 	ldw	r2,-8(fp)
 4005b6c:	10800943 	ldbu	r2,37(r2)
 4005b70:	10803fcc 	andi	r2,r2,255
 4005b74:	1080201c 	xori	r2,r2,128
 4005b78:	10bfe004 	addi	r2,r2,-128
 4005b7c:	10c00044 	addi	r3,r2,1
 4005b80:	e0bffe17 	ldw	r2,-8(fp)
 4005b84:	10800983 	ldbu	r2,38(r2)
 4005b88:	10803fcc 	andi	r2,r2,255
 4005b8c:	1080201c 	xori	r2,r2,128
 4005b90:	10bfe004 	addi	r2,r2,-128
 4005b94:	18800316 	blt	r3,r2,4005ba4 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
 4005b98:	e0bffe17 	ldw	r2,-8(fp)
 4005b9c:	10000945 	stb	zero,37(r2)
 4005ba0:	00000606 	br	4005bbc <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
 4005ba4:	e0bffe17 	ldw	r2,-8(fp)
 4005ba8:	10800943 	ldbu	r2,37(r2)
 4005bac:	10800044 	addi	r2,r2,1
 4005bb0:	1007883a 	mov	r3,r2
 4005bb4:	e0bffe17 	ldw	r2,-8(fp)
 4005bb8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
 4005bbc:	e0bffe17 	ldw	r2,-8(fp)
 4005bc0:	10800983 	ldbu	r2,38(r2)
 4005bc4:	10803fcc 	andi	r2,r2,255
 4005bc8:	1080201c 	xori	r2,r2,128
 4005bcc:	10bfe004 	addi	r2,r2,-128
 4005bd0:	10800050 	cmplti	r2,r2,1
 4005bd4:	1000091e 	bne	r2,zero,4005bfc <alt_lcd_16207_timeout+0xb0>
 4005bd8:	e0bffe17 	ldw	r2,-8(fp)
 4005bdc:	108009c3 	ldbu	r2,39(r2)
 4005be0:	10803fcc 	andi	r2,r2,255
 4005be4:	1080201c 	xori	r2,r2,128
 4005be8:	10bfe004 	addi	r2,r2,-128
 4005bec:	1004c03a 	cmpne	r2,r2,zero
 4005bf0:	1000021e 	bne	r2,zero,4005bfc <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
 4005bf4:	e13ffe17 	ldw	r4,-8(fp)
 4005bf8:	40050bc0 	call	40050bc <lcd_repaint_screen>

  return sp->period;
 4005bfc:	e0bffe17 	ldw	r2,-8(fp)
 4005c00:	10800717 	ldw	r2,28(r2)
}
 4005c04:	e037883a 	mov	sp,fp
 4005c08:	dfc00117 	ldw	ra,4(sp)
 4005c0c:	df000017 	ldw	fp,0(sp)
 4005c10:	dec00204 	addi	sp,sp,8
 4005c14:	f800283a 	ret

04005c18 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
 4005c18:	defffc04 	addi	sp,sp,-16
 4005c1c:	dfc00315 	stw	ra,12(sp)
 4005c20:	df000215 	stw	fp,8(sp)
 4005c24:	df000204 	addi	fp,sp,8
 4005c28:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
 4005c2c:	e0bfff17 	ldw	r2,-4(fp)
 4005c30:	10800017 	ldw	r2,0(r2)
 4005c34:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
 4005c38:	e0bfff17 	ldw	r2,-4(fp)
 4005c3c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
 4005c40:	010ea604 	movi	r4,15000
 4005c44:	40041100 	call	4004110 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 4005c48:	e0bffe17 	ldw	r2,-8(fp)
 4005c4c:	1007883a 	mov	r3,r2
 4005c50:	00800c04 	movi	r2,48
 4005c54:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
 4005c58:	01040104 	movi	r4,4100
 4005c5c:	40041100 	call	4004110 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 4005c60:	e0bffe17 	ldw	r2,-8(fp)
 4005c64:	1007883a 	mov	r3,r2
 4005c68:	00800c04 	movi	r2,48
 4005c6c:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
 4005c70:	0100fa04 	movi	r4,1000
 4005c74:	40041100 	call	4004110 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 4005c78:	e0bffe17 	ldw	r2,-8(fp)
 4005c7c:	1007883a 	mov	r3,r2
 4005c80:	00800c04 	movi	r2,48
 4005c84:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
 4005c88:	e13fff17 	ldw	r4,-4(fp)
 4005c8c:	01400e04 	movi	r5,56
 4005c90:	4004e6c0 	call	4004e6c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
 4005c94:	e13fff17 	ldw	r4,-4(fp)
 4005c98:	01400204 	movi	r5,8
 4005c9c:	4004e6c0 	call	4004e6c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
 4005ca0:	e13fff17 	ldw	r4,-4(fp)
 4005ca4:	4004ff80 	call	4004ff8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
 4005ca8:	e13fff17 	ldw	r4,-4(fp)
 4005cac:	01400184 	movi	r5,6
 4005cb0:	4004e6c0 	call	4004e6c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
 4005cb4:	e13fff17 	ldw	r4,-4(fp)
 4005cb8:	01400304 	movi	r5,12
 4005cbc:	4004e6c0 	call	4004e6c <lcd_write_command>

  sp->esccount = -1;
 4005cc0:	e0ffff17 	ldw	r3,-4(fp)
 4005cc4:	00bfffc4 	movi	r2,-1
 4005cc8:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
 4005ccc:	e0bfff17 	ldw	r2,-4(fp)
 4005cd0:	11000a04 	addi	r4,r2,40
 4005cd4:	000b883a 	mov	r5,zero
 4005cd8:	01800204 	movi	r6,8
 4005cdc:	400302c0 	call	400302c <memset>

  sp->scrollpos = 0;
 4005ce0:	e0bfff17 	ldw	r2,-4(fp)
 4005ce4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
 4005ce8:	e0bfff17 	ldw	r2,-4(fp)
 4005cec:	10000985 	stb	zero,38(r2)
  sp->active = 0;
 4005cf0:	e0bfff17 	ldw	r2,-4(fp)
 4005cf4:	100009c5 	stb	zero,39(r2)
 4005cf8:	00810074 	movhi	r2,1025
 4005cfc:	10ae1604 	addi	r2,r2,-18344
 4005d00:	10800017 	ldw	r2,0(r2)
 4005d04:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
 4005d08:	01400284 	movi	r5,10
 4005d0c:	4000cd00 	call	4000cd0 <__udivsi3>
 4005d10:	1007883a 	mov	r3,r2
 4005d14:	e0bfff17 	ldw	r2,-4(fp)
 4005d18:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
 4005d1c:	e0bfff17 	ldw	r2,-4(fp)
 4005d20:	11000104 	addi	r4,r2,4
 4005d24:	e0bfff17 	ldw	r2,-4(fp)
 4005d28:	10800717 	ldw	r2,28(r2)
 4005d2c:	100b883a 	mov	r5,r2
 4005d30:	01810034 	movhi	r6,1024
 4005d34:	3196d304 	addi	r6,r6,23372
 4005d38:	e1ffff17 	ldw	r7,-4(fp)
 4005d3c:	400685c0 	call	400685c <alt_alarm_start>
}
 4005d40:	e037883a 	mov	sp,fp
 4005d44:	dfc00117 	ldw	ra,4(sp)
 4005d48:	df000017 	ldw	fp,0(sp)
 4005d4c:	dec00204 	addi	sp,sp,8
 4005d50:	f800283a 	ret

04005d54 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4005d54:	defffa04 	addi	sp,sp,-24
 4005d58:	dfc00515 	stw	ra,20(sp)
 4005d5c:	df000415 	stw	fp,16(sp)
 4005d60:	df000404 	addi	fp,sp,16
 4005d64:	e13ffd15 	stw	r4,-12(fp)
 4005d68:	e17ffe15 	stw	r5,-8(fp)
 4005d6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
 4005d70:	e0bffd17 	ldw	r2,-12(fp)
 4005d74:	10800017 	ldw	r2,0(r2)
 4005d78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
 4005d7c:	e0bffc17 	ldw	r2,-16(fp)
 4005d80:	11000a04 	addi	r4,r2,40
 4005d84:	e0bffd17 	ldw	r2,-12(fp)
 4005d88:	11c00217 	ldw	r7,8(r2)
 4005d8c:	e17ffe17 	ldw	r5,-8(fp)
 4005d90:	e1bfff17 	ldw	r6,-4(fp)
 4005d94:	40056400 	call	4005640 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
 4005d98:	e037883a 	mov	sp,fp
 4005d9c:	dfc00117 	ldw	ra,4(sp)
 4005da0:	df000017 	ldw	fp,0(sp)
 4005da4:	dec00204 	addi	sp,sp,8
 4005da8:	f800283a 	ret

04005dac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4005dac:	defffa04 	addi	sp,sp,-24
 4005db0:	dfc00515 	stw	ra,20(sp)
 4005db4:	df000415 	stw	fp,16(sp)
 4005db8:	df000404 	addi	fp,sp,16
 4005dbc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4005dc0:	e0bfff17 	ldw	r2,-4(fp)
 4005dc4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4005dc8:	e0bfff17 	ldw	r2,-4(fp)
 4005dcc:	10800104 	addi	r2,r2,4
 4005dd0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005dd4:	0005303a 	rdctl	r2,status
 4005dd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005ddc:	e0fffd17 	ldw	r3,-12(fp)
 4005de0:	00bfff84 	movi	r2,-2
 4005de4:	1884703a 	and	r2,r3,r2
 4005de8:	1001703a 	wrctl	status,r2
  
  return context;
 4005dec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4005df0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4005df4:	40074b00 	call	40074b0 <alt_tick>
 4005df8:	e0bffe17 	ldw	r2,-8(fp)
 4005dfc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005e00:	e0bffc17 	ldw	r2,-16(fp)
 4005e04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4005e08:	e037883a 	mov	sp,fp
 4005e0c:	dfc00117 	ldw	ra,4(sp)
 4005e10:	df000017 	ldw	fp,0(sp)
 4005e14:	dec00204 	addi	sp,sp,8
 4005e18:	f800283a 	ret

04005e1c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4005e1c:	defff804 	addi	sp,sp,-32
 4005e20:	dfc00715 	stw	ra,28(sp)
 4005e24:	df000615 	stw	fp,24(sp)
 4005e28:	df000604 	addi	fp,sp,24
 4005e2c:	e13ffc15 	stw	r4,-16(fp)
 4005e30:	e17ffd15 	stw	r5,-12(fp)
 4005e34:	e1bffe15 	stw	r6,-8(fp)
 4005e38:	e1ffff15 	stw	r7,-4(fp)
 4005e3c:	e0bfff17 	ldw	r2,-4(fp)
 4005e40:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4005e44:	00810074 	movhi	r2,1025
 4005e48:	10ae1604 	addi	r2,r2,-18344
 4005e4c:	10800017 	ldw	r2,0(r2)
 4005e50:	1004c03a 	cmpne	r2,r2,zero
 4005e54:	1000041e 	bne	r2,zero,4005e68 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4005e58:	00c10074 	movhi	r3,1025
 4005e5c:	18ee1604 	addi	r3,r3,-18344
 4005e60:	e0bffb17 	ldw	r2,-20(fp)
 4005e64:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4005e68:	e0bffc17 	ldw	r2,-16(fp)
 4005e6c:	10800104 	addi	r2,r2,4
 4005e70:	1007883a 	mov	r3,r2
 4005e74:	008001c4 	movi	r2,7
 4005e78:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4005e7c:	d8000015 	stw	zero,0(sp)
 4005e80:	e13ffd17 	ldw	r4,-12(fp)
 4005e84:	e17ffe17 	ldw	r5,-8(fp)
 4005e88:	01810034 	movhi	r6,1024
 4005e8c:	31976b04 	addi	r6,r6,23980
 4005e90:	e1fffc17 	ldw	r7,-16(fp)
 4005e94:	4006d4c0 	call	4006d4c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4005e98:	e037883a 	mov	sp,fp
 4005e9c:	dfc00117 	ldw	ra,4(sp)
 4005ea0:	df000017 	ldw	fp,0(sp)
 4005ea4:	dec00204 	addi	sp,sp,8
 4005ea8:	f800283a 	ret

04005eac <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4005eac:	defffa04 	addi	sp,sp,-24
 4005eb0:	dfc00515 	stw	ra,20(sp)
 4005eb4:	df000415 	stw	fp,16(sp)
 4005eb8:	df000404 	addi	fp,sp,16
 4005ebc:	e13ffd15 	stw	r4,-12(fp)
 4005ec0:	e17ffe15 	stw	r5,-8(fp)
 4005ec4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4005ec8:	e0bffd17 	ldw	r2,-12(fp)
 4005ecc:	10800017 	ldw	r2,0(r2)
 4005ed0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4005ed4:	e0bffc17 	ldw	r2,-16(fp)
 4005ed8:	11000a04 	addi	r4,r2,40
 4005edc:	e0bffd17 	ldw	r2,-12(fp)
 4005ee0:	11c00217 	ldw	r7,8(r2)
 4005ee4:	e17ffe17 	ldw	r5,-8(fp)
 4005ee8:	e1bfff17 	ldw	r6,-4(fp)
 4005eec:	40063a40 	call	40063a4 <altera_avalon_uart_read>
      fd->fd_flags);
}
 4005ef0:	e037883a 	mov	sp,fp
 4005ef4:	dfc00117 	ldw	ra,4(sp)
 4005ef8:	df000017 	ldw	fp,0(sp)
 4005efc:	dec00204 	addi	sp,sp,8
 4005f00:	f800283a 	ret

04005f04 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4005f04:	defffa04 	addi	sp,sp,-24
 4005f08:	dfc00515 	stw	ra,20(sp)
 4005f0c:	df000415 	stw	fp,16(sp)
 4005f10:	df000404 	addi	fp,sp,16
 4005f14:	e13ffd15 	stw	r4,-12(fp)
 4005f18:	e17ffe15 	stw	r5,-8(fp)
 4005f1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4005f20:	e0bffd17 	ldw	r2,-12(fp)
 4005f24:	10800017 	ldw	r2,0(r2)
 4005f28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 4005f2c:	e0bffc17 	ldw	r2,-16(fp)
 4005f30:	11000a04 	addi	r4,r2,40
 4005f34:	e0bffd17 	ldw	r2,-12(fp)
 4005f38:	11c00217 	ldw	r7,8(r2)
 4005f3c:	e17ffe17 	ldw	r5,-8(fp)
 4005f40:	e1bfff17 	ldw	r6,-4(fp)
 4005f44:	40066340 	call	4006634 <altera_avalon_uart_write>
      fd->fd_flags);
}
 4005f48:	e037883a 	mov	sp,fp
 4005f4c:	dfc00117 	ldw	ra,4(sp)
 4005f50:	df000017 	ldw	fp,0(sp)
 4005f54:	dec00204 	addi	sp,sp,8
 4005f58:	f800283a 	ret

04005f5c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 4005f5c:	defffc04 	addi	sp,sp,-16
 4005f60:	dfc00315 	stw	ra,12(sp)
 4005f64:	df000215 	stw	fp,8(sp)
 4005f68:	df000204 	addi	fp,sp,8
 4005f6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4005f70:	e0bfff17 	ldw	r2,-4(fp)
 4005f74:	10800017 	ldw	r2,0(r2)
 4005f78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 4005f7c:	e0bffe17 	ldw	r2,-8(fp)
 4005f80:	11000a04 	addi	r4,r2,40
 4005f84:	e0bfff17 	ldw	r2,-4(fp)
 4005f88:	11400217 	ldw	r5,8(r2)
 4005f8c:	40063440 	call	4006344 <altera_avalon_uart_close>
}
 4005f90:	e037883a 	mov	sp,fp
 4005f94:	dfc00117 	ldw	ra,4(sp)
 4005f98:	df000017 	ldw	fp,0(sp)
 4005f9c:	dec00204 	addi	sp,sp,8
 4005fa0:	f800283a 	ret

04005fa4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 4005fa4:	defff704 	addi	sp,sp,-36
 4005fa8:	dfc00815 	stw	ra,32(sp)
 4005fac:	df000715 	stw	fp,28(sp)
 4005fb0:	df000704 	addi	fp,sp,28
 4005fb4:	e13ffc15 	stw	r4,-16(fp)
 4005fb8:	e17ffd15 	stw	r5,-12(fp)
 4005fbc:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
 4005fc0:	e0bffc17 	ldw	r2,-16(fp)
 4005fc4:	10800017 	ldw	r2,0(r2)
 4005fc8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4005fcc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4005fd0:	1004c03a 	cmpne	r2,r2,zero
 4005fd4:	1000061e 	bne	r2,zero,4005ff0 <altera_avalon_uart_init+0x4c>
 4005fd8:	0005883a 	mov	r2,zero
 4005fdc:	1004c03a 	cmpne	r2,r2,zero
 4005fe0:	1000031e 	bne	r2,zero,4005ff0 <altera_avalon_uart_init+0x4c>
 4005fe4:	0005883a 	mov	r2,zero
 4005fe8:	1005003a 	cmpeq	r2,r2,zero
 4005fec:	1000031e 	bne	r2,zero,4005ffc <altera_avalon_uart_init+0x58>
 4005ff0:	00800044 	movi	r2,1
 4005ff4:	e0bfff15 	stw	r2,-4(fp)
 4005ff8:	00000106 	br	4006000 <altera_avalon_uart_init+0x5c>
 4005ffc:	e03fff15 	stw	zero,-4(fp)
 4006000:	e0bfff17 	ldw	r2,-4(fp)
 4006004:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 4006008:	e0bffa17 	ldw	r2,-24(fp)
 400600c:	1004c03a 	cmpne	r2,r2,zero
 4006010:	1000111e 	bne	r2,zero,4006058 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 4006014:	e0fffc17 	ldw	r3,-16(fp)
 4006018:	00832004 	movi	r2,3200
 400601c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 4006020:	e0bffb17 	ldw	r2,-20(fp)
 4006024:	11000304 	addi	r4,r2,12
 4006028:	e0bffc17 	ldw	r2,-16(fp)
 400602c:	10800117 	ldw	r2,4(r2)
 4006030:	1007883a 	mov	r3,r2
 4006034:	2005883a 	mov	r2,r4
 4006038:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 400603c:	d8000015 	stw	zero,0(sp)
 4006040:	e13ffd17 	ldw	r4,-12(fp)
 4006044:	e17ffe17 	ldw	r5,-8(fp)
 4006048:	01810034 	movhi	r6,1024
 400604c:	31981b04 	addi	r6,r6,24684
 4006050:	e1fffc17 	ldw	r7,-16(fp)
 4006054:	4006d4c0 	call	4006d4c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 4006058:	e037883a 	mov	sp,fp
 400605c:	dfc00117 	ldw	ra,4(sp)
 4006060:	df000017 	ldw	fp,0(sp)
 4006064:	dec00204 	addi	sp,sp,8
 4006068:	f800283a 	ret

0400606c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 400606c:	defffa04 	addi	sp,sp,-24
 4006070:	dfc00515 	stw	ra,20(sp)
 4006074:	df000415 	stw	fp,16(sp)
 4006078:	df000404 	addi	fp,sp,16
 400607c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 4006080:	e0bfff17 	ldw	r2,-4(fp)
 4006084:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
 4006088:	e0bffd17 	ldw	r2,-12(fp)
 400608c:	10800017 	ldw	r2,0(r2)
 4006090:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 4006094:	e0bffc17 	ldw	r2,-16(fp)
 4006098:	10800204 	addi	r2,r2,8
 400609c:	10800037 	ldwio	r2,0(r2)
 40060a0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 40060a4:	e0bffc17 	ldw	r2,-16(fp)
 40060a8:	10800204 	addi	r2,r2,8
 40060ac:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 40060b0:	e0bffc17 	ldw	r2,-16(fp)
 40060b4:	10800204 	addi	r2,r2,8
 40060b8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 40060bc:	e0bffe17 	ldw	r2,-8(fp)
 40060c0:	1080200c 	andi	r2,r2,128
 40060c4:	1005003a 	cmpeq	r2,r2,zero
 40060c8:	1000031e 	bne	r2,zero,40060d8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 40060cc:	e13ffd17 	ldw	r4,-12(fp)
 40060d0:	e17ffe17 	ldw	r5,-8(fp)
 40060d4:	40061080 	call	4006108 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 40060d8:	e0bffe17 	ldw	r2,-8(fp)
 40060dc:	1081100c 	andi	r2,r2,1088
 40060e0:	1005003a 	cmpeq	r2,r2,zero
 40060e4:	1000031e 	bne	r2,zero,40060f4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 40060e8:	e13ffd17 	ldw	r4,-12(fp)
 40060ec:	e17ffe17 	ldw	r5,-8(fp)
 40060f0:	40061e80 	call	40061e8 <altera_avalon_uart_txirq>
  }
  

}
 40060f4:	e037883a 	mov	sp,fp
 40060f8:	dfc00117 	ldw	ra,4(sp)
 40060fc:	df000017 	ldw	fp,0(sp)
 4006100:	dec00204 	addi	sp,sp,8
 4006104:	f800283a 	ret

04006108 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4006108:	defffc04 	addi	sp,sp,-16
 400610c:	df000315 	stw	fp,12(sp)
 4006110:	df000304 	addi	fp,sp,12
 4006114:	e13ffe15 	stw	r4,-8(fp)
 4006118:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 400611c:	e0bfff17 	ldw	r2,-4(fp)
 4006120:	108000cc 	andi	r2,r2,3
 4006124:	1004c03a 	cmpne	r2,r2,zero
 4006128:	10002b1e 	bne	r2,zero,40061d8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 400612c:	e0bffe17 	ldw	r2,-8(fp)
 4006130:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4006134:	e0bffe17 	ldw	r2,-8(fp)
 4006138:	10800317 	ldw	r2,12(r2)
 400613c:	10800044 	addi	r2,r2,1
 4006140:	10800fcc 	andi	r2,r2,63
 4006144:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 4006148:	e0bffe17 	ldw	r2,-8(fp)
 400614c:	11000317 	ldw	r4,12(r2)
 4006150:	e0bffe17 	ldw	r2,-8(fp)
 4006154:	10800017 	ldw	r2,0(r2)
 4006158:	10800037 	ldwio	r2,0(r2)
 400615c:	1007883a 	mov	r3,r2
 4006160:	e0bffe17 	ldw	r2,-8(fp)
 4006164:	2085883a 	add	r2,r4,r2
 4006168:	10800704 	addi	r2,r2,28
 400616c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 4006170:	e0fffe17 	ldw	r3,-8(fp)
 4006174:	e0bffd17 	ldw	r2,-12(fp)
 4006178:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400617c:	e0bffe17 	ldw	r2,-8(fp)
 4006180:	10800317 	ldw	r2,12(r2)
 4006184:	10800044 	addi	r2,r2,1
 4006188:	10800fcc 	andi	r2,r2,63
 400618c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 4006190:	e0bffe17 	ldw	r2,-8(fp)
 4006194:	10c00217 	ldw	r3,8(r2)
 4006198:	e0bffd17 	ldw	r2,-12(fp)
 400619c:	18800e1e 	bne	r3,r2,40061d8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 40061a0:	e0bffe17 	ldw	r2,-8(fp)
 40061a4:	10c00117 	ldw	r3,4(r2)
 40061a8:	00bfdfc4 	movi	r2,-129
 40061ac:	1886703a 	and	r3,r3,r2
 40061b0:	e0bffe17 	ldw	r2,-8(fp)
 40061b4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 40061b8:	e0bffe17 	ldw	r2,-8(fp)
 40061bc:	10800017 	ldw	r2,0(r2)
 40061c0:	11000304 	addi	r4,r2,12
 40061c4:	e0bffe17 	ldw	r2,-8(fp)
 40061c8:	10800117 	ldw	r2,4(r2)
 40061cc:	1007883a 	mov	r3,r2
 40061d0:	2005883a 	mov	r2,r4
 40061d4:	10c00035 	stwio	r3,0(r2)
  }   
}
 40061d8:	e037883a 	mov	sp,fp
 40061dc:	df000017 	ldw	fp,0(sp)
 40061e0:	dec00104 	addi	sp,sp,4
 40061e4:	f800283a 	ret

040061e8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 40061e8:	defffd04 	addi	sp,sp,-12
 40061ec:	df000215 	stw	fp,8(sp)
 40061f0:	df000204 	addi	fp,sp,8
 40061f4:	e13ffe15 	stw	r4,-8(fp)
 40061f8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 40061fc:	e0bffe17 	ldw	r2,-8(fp)
 4006200:	10c00417 	ldw	r3,16(r2)
 4006204:	e0bffe17 	ldw	r2,-8(fp)
 4006208:	10800517 	ldw	r2,20(r2)
 400620c:	18803626 	beq	r3,r2,40062e8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4006210:	e0bffe17 	ldw	r2,-8(fp)
 4006214:	10800617 	ldw	r2,24(r2)
 4006218:	1080008c 	andi	r2,r2,2
 400621c:	1005003a 	cmpeq	r2,r2,zero
 4006220:	1000041e 	bne	r2,zero,4006234 <altera_avalon_uart_txirq+0x4c>
 4006224:	e0bfff17 	ldw	r2,-4(fp)
 4006228:	1082000c 	andi	r2,r2,2048
 400622c:	1005003a 	cmpeq	r2,r2,zero
 4006230:	10001e1e 	bne	r2,zero,40062ac <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 4006234:	e0bffe17 	ldw	r2,-8(fp)
 4006238:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 400623c:	e0bffe17 	ldw	r2,-8(fp)
 4006240:	10800017 	ldw	r2,0(r2)
 4006244:	11000104 	addi	r4,r2,4
 4006248:	e0bffe17 	ldw	r2,-8(fp)
 400624c:	10c00417 	ldw	r3,16(r2)
 4006250:	e0bffe17 	ldw	r2,-8(fp)
 4006254:	1885883a 	add	r2,r3,r2
 4006258:	10801704 	addi	r2,r2,92
 400625c:	10800003 	ldbu	r2,0(r2)
 4006260:	10c03fcc 	andi	r3,r2,255
 4006264:	2005883a 	mov	r2,r4
 4006268:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 400626c:	e0bffe17 	ldw	r2,-8(fp)
 4006270:	10800417 	ldw	r2,16(r2)
 4006274:	10c00044 	addi	r3,r2,1
 4006278:	e0bffe17 	ldw	r2,-8(fp)
 400627c:	10c00415 	stw	r3,16(r2)
 4006280:	e0bffe17 	ldw	r2,-8(fp)
 4006284:	10800417 	ldw	r2,16(r2)
 4006288:	10c00fcc 	andi	r3,r2,63
 400628c:	e0bffe17 	ldw	r2,-8(fp)
 4006290:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4006294:	e0bffe17 	ldw	r2,-8(fp)
 4006298:	10800117 	ldw	r2,4(r2)
 400629c:	10c01014 	ori	r3,r2,64
 40062a0:	e0bffe17 	ldw	r2,-8(fp)
 40062a4:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 40062a8:	00000f06 	br	40062e8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 40062ac:	e0bffe17 	ldw	r2,-8(fp)
 40062b0:	10800017 	ldw	r2,0(r2)
 40062b4:	10800204 	addi	r2,r2,8
 40062b8:	10800037 	ldwio	r2,0(r2)
 40062bc:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 40062c0:	e0bfff17 	ldw	r2,-4(fp)
 40062c4:	1082000c 	andi	r2,r2,2048
 40062c8:	1004c03a 	cmpne	r2,r2,zero
 40062cc:	1000061e 	bne	r2,zero,40062e8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 40062d0:	e0bffe17 	ldw	r2,-8(fp)
 40062d4:	10c00117 	ldw	r3,4(r2)
 40062d8:	00bfefc4 	movi	r2,-65
 40062dc:	1886703a 	and	r3,r3,r2
 40062e0:	e0bffe17 	ldw	r2,-8(fp)
 40062e4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 40062e8:	e0bffe17 	ldw	r2,-8(fp)
 40062ec:	10c00417 	ldw	r3,16(r2)
 40062f0:	e0bffe17 	ldw	r2,-8(fp)
 40062f4:	10800517 	ldw	r2,20(r2)
 40062f8:	1880061e 	bne	r3,r2,4006314 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 40062fc:	e0bffe17 	ldw	r2,-8(fp)
 4006300:	10c00117 	ldw	r3,4(r2)
 4006304:	00beefc4 	movi	r2,-1089
 4006308:	1886703a 	and	r3,r3,r2
 400630c:	e0bffe17 	ldw	r2,-8(fp)
 4006310:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4006314:	e0bffe17 	ldw	r2,-8(fp)
 4006318:	10800017 	ldw	r2,0(r2)
 400631c:	11000304 	addi	r4,r2,12
 4006320:	e0bffe17 	ldw	r2,-8(fp)
 4006324:	10800117 	ldw	r2,4(r2)
 4006328:	1007883a 	mov	r3,r2
 400632c:	2005883a 	mov	r2,r4
 4006330:	10c00035 	stwio	r3,0(r2)
}
 4006334:	e037883a 	mov	sp,fp
 4006338:	df000017 	ldw	fp,0(sp)
 400633c:	dec00104 	addi	sp,sp,4
 4006340:	f800283a 	ret

04006344 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 4006344:	defffc04 	addi	sp,sp,-16
 4006348:	df000315 	stw	fp,12(sp)
 400634c:	df000304 	addi	fp,sp,12
 4006350:	e13ffd15 	stw	r4,-12(fp)
 4006354:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 4006358:	00000706 	br	4006378 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 400635c:	e0bffe17 	ldw	r2,-8(fp)
 4006360:	1090000c 	andi	r2,r2,16384
 4006364:	1005003a 	cmpeq	r2,r2,zero
 4006368:	1000031e 	bne	r2,zero,4006378 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
 400636c:	00bffd44 	movi	r2,-11
 4006370:	e0bfff15 	stw	r2,-4(fp)
 4006374:	00000606 	br	4006390 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 4006378:	e0bffd17 	ldw	r2,-12(fp)
 400637c:	10c00417 	ldw	r3,16(r2)
 4006380:	e0bffd17 	ldw	r2,-12(fp)
 4006384:	10800517 	ldw	r2,20(r2)
 4006388:	18bff41e 	bne	r3,r2,400635c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400638c:	e03fff15 	stw	zero,-4(fp)
 4006390:	e0bfff17 	ldw	r2,-4(fp)
}
 4006394:	e037883a 	mov	sp,fp
 4006398:	df000017 	ldw	fp,0(sp)
 400639c:	dec00104 	addi	sp,sp,4
 40063a0:	f800283a 	ret

040063a4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 40063a4:	defff004 	addi	sp,sp,-64
 40063a8:	dfc00f15 	stw	ra,60(sp)
 40063ac:	df000e15 	stw	fp,56(sp)
 40063b0:	df000e04 	addi	fp,sp,56
 40063b4:	e13ffb15 	stw	r4,-20(fp)
 40063b8:	e17ffc15 	stw	r5,-16(fp)
 40063bc:	e1bffd15 	stw	r6,-12(fp)
 40063c0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 40063c4:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
 40063c8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 40063cc:	e0bffe17 	ldw	r2,-8(fp)
 40063d0:	1090000c 	andi	r2,r2,16384
 40063d4:	1005003a 	cmpeq	r2,r2,zero
 40063d8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 40063dc:	e0bffb17 	ldw	r2,-20(fp)
 40063e0:	10800217 	ldw	r2,8(r2)
 40063e4:	10800044 	addi	r2,r2,1
 40063e8:	10800fcc 	andi	r2,r2,63
 40063ec:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 40063f0:	00001906 	br	4006458 <altera_avalon_uart_read+0xb4>
    {
      count++;
 40063f4:	e0bff617 	ldw	r2,-40(fp)
 40063f8:	10800044 	addi	r2,r2,1
 40063fc:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 4006400:	e0bffb17 	ldw	r2,-20(fp)
 4006404:	10c00217 	ldw	r3,8(r2)
 4006408:	e0bffb17 	ldw	r2,-20(fp)
 400640c:	1885883a 	add	r2,r3,r2
 4006410:	10800704 	addi	r2,r2,28
 4006414:	10800003 	ldbu	r2,0(r2)
 4006418:	1007883a 	mov	r3,r2
 400641c:	e0bffc17 	ldw	r2,-16(fp)
 4006420:	10c00005 	stb	r3,0(r2)
 4006424:	e0bffc17 	ldw	r2,-16(fp)
 4006428:	10800044 	addi	r2,r2,1
 400642c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 4006430:	e0bffb17 	ldw	r2,-20(fp)
 4006434:	10800217 	ldw	r2,8(r2)
 4006438:	10c00044 	addi	r3,r2,1
 400643c:	e0bffb17 	ldw	r2,-20(fp)
 4006440:	10c00215 	stw	r3,8(r2)
 4006444:	e0bffb17 	ldw	r2,-20(fp)
 4006448:	10800217 	ldw	r2,8(r2)
 400644c:	10c00fcc 	andi	r3,r2,63
 4006450:	e0bffb17 	ldw	r2,-20(fp)
 4006454:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4006458:	e0fff617 	ldw	r3,-40(fp)
 400645c:	e0bffd17 	ldw	r2,-12(fp)
 4006460:	1880050e 	bge	r3,r2,4006478 <altera_avalon_uart_read+0xd4>
 4006464:	e0bffb17 	ldw	r2,-20(fp)
 4006468:	10c00217 	ldw	r3,8(r2)
 400646c:	e0bffb17 	ldw	r2,-20(fp)
 4006470:	10800317 	ldw	r2,12(r2)
 4006474:	18bfdf1e 	bne	r3,r2,40063f4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 4006478:	e0bff617 	ldw	r2,-40(fp)
 400647c:	1004c03a 	cmpne	r2,r2,zero
 4006480:	1000271e 	bne	r2,zero,4006520 <altera_avalon_uart_read+0x17c>
 4006484:	e0bffb17 	ldw	r2,-20(fp)
 4006488:	10c00217 	ldw	r3,8(r2)
 400648c:	e0bffb17 	ldw	r2,-20(fp)
 4006490:	10800317 	ldw	r2,12(r2)
 4006494:	1880221e 	bne	r3,r2,4006520 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
 4006498:	e0bff917 	ldw	r2,-28(fp)
 400649c:	1004c03a 	cmpne	r2,r2,zero
 40064a0:	1000061e 	bne	r2,zero,40064bc <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 40064a4:	40065d40 	call	40065d4 <alt_get_errno>
 40064a8:	00c002c4 	movi	r3,11
 40064ac:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 40064b0:	00800044 	movi	r2,1
 40064b4:	e0bff705 	stb	r2,-36(fp)
        break;
 40064b8:	00001f06 	br	4006538 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40064bc:	0005303a 	rdctl	r2,status
 40064c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40064c4:	e0fff517 	ldw	r3,-44(fp)
 40064c8:	00bfff84 	movi	r2,-2
 40064cc:	1884703a 	and	r2,r3,r2
 40064d0:	1001703a 	wrctl	status,r2
  
  return context;
 40064d4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 40064d8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 40064dc:	e0bffb17 	ldw	r2,-20(fp)
 40064e0:	10800117 	ldw	r2,4(r2)
 40064e4:	10c02014 	ori	r3,r2,128
 40064e8:	e0bffb17 	ldw	r2,-20(fp)
 40064ec:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40064f0:	e0bffb17 	ldw	r2,-20(fp)
 40064f4:	10800017 	ldw	r2,0(r2)
 40064f8:	11000304 	addi	r4,r2,12
 40064fc:	e0bffb17 	ldw	r2,-20(fp)
 4006500:	10800117 	ldw	r2,4(r2)
 4006504:	1007883a 	mov	r3,r2
 4006508:	2005883a 	mov	r2,r4
 400650c:	10c00035 	stwio	r3,0(r2)
 4006510:	e0bffa17 	ldw	r2,-24(fp)
 4006514:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006518:	e0bff417 	ldw	r2,-48(fp)
 400651c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 4006520:	e0bff617 	ldw	r2,-40(fp)
 4006524:	1004c03a 	cmpne	r2,r2,zero
 4006528:	1000031e 	bne	r2,zero,4006538 <altera_avalon_uart_read+0x194>
 400652c:	e0bffd17 	ldw	r2,-12(fp)
 4006530:	1004c03a 	cmpne	r2,r2,zero
 4006534:	103fc81e 	bne	r2,zero,4006458 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006538:	0005303a 	rdctl	r2,status
 400653c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006540:	e0fff317 	ldw	r3,-52(fp)
 4006544:	00bfff84 	movi	r2,-2
 4006548:	1884703a 	and	r2,r3,r2
 400654c:	1001703a 	wrctl	status,r2
  
  return context;
 4006550:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 4006554:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4006558:	e0bffb17 	ldw	r2,-20(fp)
 400655c:	10800117 	ldw	r2,4(r2)
 4006560:	10c02014 	ori	r3,r2,128
 4006564:	e0bffb17 	ldw	r2,-20(fp)
 4006568:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400656c:	e0bffb17 	ldw	r2,-20(fp)
 4006570:	10800017 	ldw	r2,0(r2)
 4006574:	11000304 	addi	r4,r2,12
 4006578:	e0bffb17 	ldw	r2,-20(fp)
 400657c:	10800117 	ldw	r2,4(r2)
 4006580:	1007883a 	mov	r3,r2
 4006584:	2005883a 	mov	r2,r4
 4006588:	10c00035 	stwio	r3,0(r2)
 400658c:	e0bffa17 	ldw	r2,-24(fp)
 4006590:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006594:	e0bff217 	ldw	r2,-56(fp)
 4006598:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 400659c:	e0bff703 	ldbu	r2,-36(fp)
 40065a0:	1005003a 	cmpeq	r2,r2,zero
 40065a4:	1000031e 	bne	r2,zero,40065b4 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
 40065a8:	00bffd04 	movi	r2,-12
 40065ac:	e0bfff15 	stw	r2,-4(fp)
 40065b0:	00000206 	br	40065bc <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
 40065b4:	e0bff617 	ldw	r2,-40(fp)
 40065b8:	e0bfff15 	stw	r2,-4(fp)
 40065bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 40065c0:	e037883a 	mov	sp,fp
 40065c4:	dfc00117 	ldw	ra,4(sp)
 40065c8:	df000017 	ldw	fp,0(sp)
 40065cc:	dec00204 	addi	sp,sp,8
 40065d0:	f800283a 	ret

040065d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40065d4:	defffd04 	addi	sp,sp,-12
 40065d8:	dfc00215 	stw	ra,8(sp)
 40065dc:	df000115 	stw	fp,4(sp)
 40065e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40065e4:	00810074 	movhi	r2,1025
 40065e8:	10a6f804 	addi	r2,r2,-25632
 40065ec:	10800017 	ldw	r2,0(r2)
 40065f0:	1005003a 	cmpeq	r2,r2,zero
 40065f4:	1000061e 	bne	r2,zero,4006610 <alt_get_errno+0x3c>
 40065f8:	00810074 	movhi	r2,1025
 40065fc:	10a6f804 	addi	r2,r2,-25632
 4006600:	10800017 	ldw	r2,0(r2)
 4006604:	103ee83a 	callr	r2
 4006608:	e0bfff15 	stw	r2,-4(fp)
 400660c:	00000306 	br	400661c <alt_get_errno+0x48>
 4006610:	00810074 	movhi	r2,1025
 4006614:	10ae1104 	addi	r2,r2,-18364
 4006618:	e0bfff15 	stw	r2,-4(fp)
 400661c:	e0bfff17 	ldw	r2,-4(fp)
}
 4006620:	e037883a 	mov	sp,fp
 4006624:	dfc00117 	ldw	ra,4(sp)
 4006628:	df000017 	ldw	fp,0(sp)
 400662c:	dec00204 	addi	sp,sp,8
 4006630:	f800283a 	ret

04006634 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 4006634:	defff204 	addi	sp,sp,-56
 4006638:	dfc00d15 	stw	ra,52(sp)
 400663c:	df000c15 	stw	fp,48(sp)
 4006640:	df000c04 	addi	fp,sp,48
 4006644:	e13ffc15 	stw	r4,-16(fp)
 4006648:	e17ffd15 	stw	r5,-12(fp)
 400664c:	e1bffe15 	stw	r6,-8(fp)
 4006650:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 4006654:	e0bffe17 	ldw	r2,-8(fp)
 4006658:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 400665c:	e0bfff17 	ldw	r2,-4(fp)
 4006660:	1090000c 	andi	r2,r2,16384
 4006664:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4006668:	00004006 	br	400676c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400666c:	e0bffc17 	ldw	r2,-16(fp)
 4006670:	10800517 	ldw	r2,20(r2)
 4006674:	10800044 	addi	r2,r2,1
 4006678:	10800fcc 	andi	r2,r2,63
 400667c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 4006680:	e0bffc17 	ldw	r2,-16(fp)
 4006684:	10c00417 	ldw	r3,16(r2)
 4006688:	e0bff917 	ldw	r2,-28(fp)
 400668c:	1880251e 	bne	r3,r2,4006724 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
 4006690:	e0bffa17 	ldw	r2,-24(fp)
 4006694:	1005003a 	cmpeq	r2,r2,zero
 4006698:	1000051e 	bne	r2,zero,40066b0 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 400669c:	40067fc0 	call	40067fc <alt_get_errno>
 40066a0:	1007883a 	mov	r3,r2
 40066a4:	008002c4 	movi	r2,11
 40066a8:	18800015 	stw	r2,0(r3)
        break;
 40066ac:	00003206 	br	4006778 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40066b0:	0005303a 	rdctl	r2,status
 40066b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40066b8:	e0fff717 	ldw	r3,-36(fp)
 40066bc:	00bfff84 	movi	r2,-2
 40066c0:	1884703a 	and	r2,r3,r2
 40066c4:	1001703a 	wrctl	status,r2
  
  return context;
 40066c8:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 40066cc:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 40066d0:	e0bffc17 	ldw	r2,-16(fp)
 40066d4:	10800117 	ldw	r2,4(r2)
 40066d8:	10c11014 	ori	r3,r2,1088
 40066dc:	e0bffc17 	ldw	r2,-16(fp)
 40066e0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40066e4:	e0bffc17 	ldw	r2,-16(fp)
 40066e8:	10800017 	ldw	r2,0(r2)
 40066ec:	11000304 	addi	r4,r2,12
 40066f0:	e0bffc17 	ldw	r2,-16(fp)
 40066f4:	10800117 	ldw	r2,4(r2)
 40066f8:	1007883a 	mov	r3,r2
 40066fc:	2005883a 	mov	r2,r4
 4006700:	10c00035 	stwio	r3,0(r2)
 4006704:	e0bffb17 	ldw	r2,-20(fp)
 4006708:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400670c:	e0bff617 	ldw	r2,-40(fp)
 4006710:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 4006714:	e0bffc17 	ldw	r2,-16(fp)
 4006718:	10c00417 	ldw	r3,16(r2)
 400671c:	e0bff917 	ldw	r2,-28(fp)
 4006720:	18bffc26 	beq	r3,r2,4006714 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
 4006724:	e0bff817 	ldw	r2,-32(fp)
 4006728:	10bfffc4 	addi	r2,r2,-1
 400672c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 4006730:	e0bffc17 	ldw	r2,-16(fp)
 4006734:	10c00517 	ldw	r3,20(r2)
 4006738:	e0bffd17 	ldw	r2,-12(fp)
 400673c:	10800003 	ldbu	r2,0(r2)
 4006740:	1009883a 	mov	r4,r2
 4006744:	e0bffc17 	ldw	r2,-16(fp)
 4006748:	1885883a 	add	r2,r3,r2
 400674c:	10801704 	addi	r2,r2,92
 4006750:	11000005 	stb	r4,0(r2)
 4006754:	e0bffd17 	ldw	r2,-12(fp)
 4006758:	10800044 	addi	r2,r2,1
 400675c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 4006760:	e0fffc17 	ldw	r3,-16(fp)
 4006764:	e0bff917 	ldw	r2,-28(fp)
 4006768:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 400676c:	e0bff817 	ldw	r2,-32(fp)
 4006770:	1004c03a 	cmpne	r2,r2,zero
 4006774:	103fbd1e 	bne	r2,zero,400666c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006778:	0005303a 	rdctl	r2,status
 400677c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006780:	e0fff517 	ldw	r3,-44(fp)
 4006784:	00bfff84 	movi	r2,-2
 4006788:	1884703a 	and	r2,r3,r2
 400678c:	1001703a 	wrctl	status,r2
  
  return context;
 4006790:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 4006794:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4006798:	e0bffc17 	ldw	r2,-16(fp)
 400679c:	10800117 	ldw	r2,4(r2)
 40067a0:	10c11014 	ori	r3,r2,1088
 40067a4:	e0bffc17 	ldw	r2,-16(fp)
 40067a8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40067ac:	e0bffc17 	ldw	r2,-16(fp)
 40067b0:	10800017 	ldw	r2,0(r2)
 40067b4:	11000304 	addi	r4,r2,12
 40067b8:	e0bffc17 	ldw	r2,-16(fp)
 40067bc:	10800117 	ldw	r2,4(r2)
 40067c0:	1007883a 	mov	r3,r2
 40067c4:	2005883a 	mov	r2,r4
 40067c8:	10c00035 	stwio	r3,0(r2)
 40067cc:	e0bffb17 	ldw	r2,-20(fp)
 40067d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40067d4:	e0bff417 	ldw	r2,-48(fp)
 40067d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 40067dc:	e0fffe17 	ldw	r3,-8(fp)
 40067e0:	e0bff817 	ldw	r2,-32(fp)
 40067e4:	1885c83a 	sub	r2,r3,r2
}
 40067e8:	e037883a 	mov	sp,fp
 40067ec:	dfc00117 	ldw	ra,4(sp)
 40067f0:	df000017 	ldw	fp,0(sp)
 40067f4:	dec00204 	addi	sp,sp,8
 40067f8:	f800283a 	ret

040067fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40067fc:	defffd04 	addi	sp,sp,-12
 4006800:	dfc00215 	stw	ra,8(sp)
 4006804:	df000115 	stw	fp,4(sp)
 4006808:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400680c:	00810074 	movhi	r2,1025
 4006810:	10a6f804 	addi	r2,r2,-25632
 4006814:	10800017 	ldw	r2,0(r2)
 4006818:	1005003a 	cmpeq	r2,r2,zero
 400681c:	1000061e 	bne	r2,zero,4006838 <alt_get_errno+0x3c>
 4006820:	00810074 	movhi	r2,1025
 4006824:	10a6f804 	addi	r2,r2,-25632
 4006828:	10800017 	ldw	r2,0(r2)
 400682c:	103ee83a 	callr	r2
 4006830:	e0bfff15 	stw	r2,-4(fp)
 4006834:	00000306 	br	4006844 <alt_get_errno+0x48>
 4006838:	00810074 	movhi	r2,1025
 400683c:	10ae1104 	addi	r2,r2,-18364
 4006840:	e0bfff15 	stw	r2,-4(fp)
 4006844:	e0bfff17 	ldw	r2,-4(fp)
}
 4006848:	e037883a 	mov	sp,fp
 400684c:	dfc00117 	ldw	ra,4(sp)
 4006850:	df000017 	ldw	fp,0(sp)
 4006854:	dec00204 	addi	sp,sp,8
 4006858:	f800283a 	ret

0400685c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400685c:	defff404 	addi	sp,sp,-48
 4006860:	df000b15 	stw	fp,44(sp)
 4006864:	df000b04 	addi	fp,sp,44
 4006868:	e13ffb15 	stw	r4,-20(fp)
 400686c:	e17ffc15 	stw	r5,-16(fp)
 4006870:	e1bffd15 	stw	r6,-12(fp)
 4006874:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4006878:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400687c:	00810074 	movhi	r2,1025
 4006880:	10ae1604 	addi	r2,r2,-18344
 4006884:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4006888:	1005003a 	cmpeq	r2,r2,zero
 400688c:	1000411e 	bne	r2,zero,4006994 <alt_alarm_start+0x138>
  {
    if (alarm)
 4006890:	e0bffb17 	ldw	r2,-20(fp)
 4006894:	1005003a 	cmpeq	r2,r2,zero
 4006898:	10003b1e 	bne	r2,zero,4006988 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 400689c:	e0fffb17 	ldw	r3,-20(fp)
 40068a0:	e0bffd17 	ldw	r2,-12(fp)
 40068a4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 40068a8:	e0fffb17 	ldw	r3,-20(fp)
 40068ac:	e0bffe17 	ldw	r2,-8(fp)
 40068b0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40068b4:	0005303a 	rdctl	r2,status
 40068b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40068bc:	e0fff817 	ldw	r3,-32(fp)
 40068c0:	00bfff84 	movi	r2,-2
 40068c4:	1884703a 	and	r2,r3,r2
 40068c8:	1001703a 	wrctl	status,r2
  
  return context;
 40068cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 40068d0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40068d4:	00810074 	movhi	r2,1025
 40068d8:	10ae1704 	addi	r2,r2,-18340
 40068dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 40068e0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40068e4:	e0fffc17 	ldw	r3,-16(fp)
 40068e8:	e0bff917 	ldw	r2,-28(fp)
 40068ec:	1885883a 	add	r2,r3,r2
 40068f0:	10c00044 	addi	r3,r2,1
 40068f4:	e0bffb17 	ldw	r2,-20(fp)
 40068f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40068fc:	e0bffb17 	ldw	r2,-20(fp)
 4006900:	10c00217 	ldw	r3,8(r2)
 4006904:	e0bff917 	ldw	r2,-28(fp)
 4006908:	1880042e 	bgeu	r3,r2,400691c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 400690c:	e0fffb17 	ldw	r3,-20(fp)
 4006910:	00800044 	movi	r2,1
 4006914:	18800405 	stb	r2,16(r3)
 4006918:	00000206 	br	4006924 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 400691c:	e0bffb17 	ldw	r2,-20(fp)
 4006920:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4006924:	e0fffb17 	ldw	r3,-20(fp)
 4006928:	00810074 	movhi	r2,1025
 400692c:	10a6fc04 	addi	r2,r2,-25616
 4006930:	e0bff615 	stw	r2,-40(fp)
 4006934:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4006938:	e0fff717 	ldw	r3,-36(fp)
 400693c:	e0bff617 	ldw	r2,-40(fp)
 4006940:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4006944:	e0bff617 	ldw	r2,-40(fp)
 4006948:	10c00017 	ldw	r3,0(r2)
 400694c:	e0bff717 	ldw	r2,-36(fp)
 4006950:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4006954:	e0bff617 	ldw	r2,-40(fp)
 4006958:	10c00017 	ldw	r3,0(r2)
 400695c:	e0bff717 	ldw	r2,-36(fp)
 4006960:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4006964:	e0fff617 	ldw	r3,-40(fp)
 4006968:	e0bff717 	ldw	r2,-36(fp)
 400696c:	18800015 	stw	r2,0(r3)
 4006970:	e0bffa17 	ldw	r2,-24(fp)
 4006974:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006978:	e0bff517 	ldw	r2,-44(fp)
 400697c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4006980:	e03fff15 	stw	zero,-4(fp)
 4006984:	00000506 	br	400699c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 4006988:	00bffa84 	movi	r2,-22
 400698c:	e0bfff15 	stw	r2,-4(fp)
 4006990:	00000206 	br	400699c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 4006994:	00bfde84 	movi	r2,-134
 4006998:	e0bfff15 	stw	r2,-4(fp)
 400699c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 40069a0:	e037883a 	mov	sp,fp
 40069a4:	df000017 	ldw	fp,0(sp)
 40069a8:	dec00104 	addi	sp,sp,4
 40069ac:	f800283a 	ret

040069b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40069b0:	defffa04 	addi	sp,sp,-24
 40069b4:	dfc00515 	stw	ra,20(sp)
 40069b8:	df000415 	stw	fp,16(sp)
 40069bc:	df000404 	addi	fp,sp,16
 40069c0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 40069c4:	008000c4 	movi	r2,3
 40069c8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 40069cc:	e0fffc17 	ldw	r3,-16(fp)
 40069d0:	008003f4 	movhi	r2,15
 40069d4:	10909004 	addi	r2,r2,16960
 40069d8:	188b383a 	mul	r5,r3,r2
 40069dc:	0100bef4 	movhi	r4,763
 40069e0:	213c2004 	addi	r4,r4,-3968
 40069e4:	4000cd00 	call	4000cd0 <__udivsi3>
 40069e8:	100b883a 	mov	r5,r2
 40069ec:	01200034 	movhi	r4,32768
 40069f0:	213fffc4 	addi	r4,r4,-1
 40069f4:	4000cd00 	call	4000cd0 <__udivsi3>
 40069f8:	100b883a 	mov	r5,r2
 40069fc:	e13fff17 	ldw	r4,-4(fp)
 4006a00:	4000cd00 	call	4000cd0 <__udivsi3>
 4006a04:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4006a08:	e0bffd17 	ldw	r2,-12(fp)
 4006a0c:	1005003a 	cmpeq	r2,r2,zero
 4006a10:	1000281e 	bne	r2,zero,4006ab4 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 4006a14:	e03ffe15 	stw	zero,-8(fp)
 4006a18:	00001606 	br	4006a74 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4006a1c:	00a00034 	movhi	r2,32768
 4006a20:	10bfffc4 	addi	r2,r2,-1
 4006a24:	10bfffc4 	addi	r2,r2,-1
 4006a28:	103ffe1e 	bne	r2,zero,4006a24 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4006a2c:	e0fffc17 	ldw	r3,-16(fp)
 4006a30:	008003f4 	movhi	r2,15
 4006a34:	10909004 	addi	r2,r2,16960
 4006a38:	188b383a 	mul	r5,r3,r2
 4006a3c:	0100bef4 	movhi	r4,763
 4006a40:	213c2004 	addi	r4,r4,-3968
 4006a44:	4000cd00 	call	4000cd0 <__udivsi3>
 4006a48:	100b883a 	mov	r5,r2
 4006a4c:	01200034 	movhi	r4,32768
 4006a50:	213fffc4 	addi	r4,r4,-1
 4006a54:	4000cd00 	call	4000cd0 <__udivsi3>
 4006a58:	1007883a 	mov	r3,r2
 4006a5c:	e0bfff17 	ldw	r2,-4(fp)
 4006a60:	10c5c83a 	sub	r2,r2,r3
 4006a64:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4006a68:	e0bffe17 	ldw	r2,-8(fp)
 4006a6c:	10800044 	addi	r2,r2,1
 4006a70:	e0bffe15 	stw	r2,-8(fp)
 4006a74:	e0fffe17 	ldw	r3,-8(fp)
 4006a78:	e0bffd17 	ldw	r2,-12(fp)
 4006a7c:	18bfe716 	blt	r3,r2,4006a1c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4006a80:	e0fffc17 	ldw	r3,-16(fp)
 4006a84:	008003f4 	movhi	r2,15
 4006a88:	10909004 	addi	r2,r2,16960
 4006a8c:	188b383a 	mul	r5,r3,r2
 4006a90:	0100bef4 	movhi	r4,763
 4006a94:	213c2004 	addi	r4,r4,-3968
 4006a98:	4000cd00 	call	4000cd0 <__udivsi3>
 4006a9c:	1007883a 	mov	r3,r2
 4006aa0:	e0bfff17 	ldw	r2,-4(fp)
 4006aa4:	1885383a 	mul	r2,r3,r2
 4006aa8:	10bfffc4 	addi	r2,r2,-1
 4006aac:	103ffe1e 	bne	r2,zero,4006aa8 <alt_busy_sleep+0xf8>
 4006ab0:	00000c06 	br	4006ae4 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4006ab4:	e0fffc17 	ldw	r3,-16(fp)
 4006ab8:	008003f4 	movhi	r2,15
 4006abc:	10909004 	addi	r2,r2,16960
 4006ac0:	188b383a 	mul	r5,r3,r2
 4006ac4:	0100bef4 	movhi	r4,763
 4006ac8:	213c2004 	addi	r4,r4,-3968
 4006acc:	4000cd00 	call	4000cd0 <__udivsi3>
 4006ad0:	1007883a 	mov	r3,r2
 4006ad4:	e0bfff17 	ldw	r2,-4(fp)
 4006ad8:	1885383a 	mul	r2,r3,r2
 4006adc:	10bfffc4 	addi	r2,r2,-1
 4006ae0:	00bffe16 	blt	zero,r2,4006adc <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4006ae4:	0005883a 	mov	r2,zero
}
 4006ae8:	e037883a 	mov	sp,fp
 4006aec:	dfc00117 	ldw	ra,4(sp)
 4006af0:	df000017 	ldw	fp,0(sp)
 4006af4:	dec00204 	addi	sp,sp,8
 4006af8:	f800283a 	ret

04006afc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4006afc:	defffe04 	addi	sp,sp,-8
 4006b00:	df000115 	stw	fp,4(sp)
 4006b04:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4006b08:	e03fff15 	stw	zero,-4(fp)
 4006b0c:	00000506 	br	4006b24 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4006b10:	e0bfff17 	ldw	r2,-4(fp)
 4006b14:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4006b18:	e0bfff17 	ldw	r2,-4(fp)
 4006b1c:	10800804 	addi	r2,r2,32
 4006b20:	e0bfff15 	stw	r2,-4(fp)
 4006b24:	e0bfff17 	ldw	r2,-4(fp)
 4006b28:	10820030 	cmpltui	r2,r2,2048
 4006b2c:	103ff81e 	bne	r2,zero,4006b10 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4006b30:	e037883a 	mov	sp,fp
 4006b34:	df000017 	ldw	fp,0(sp)
 4006b38:	dec00104 	addi	sp,sp,4
 4006b3c:	f800283a 	ret

04006b40 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4006b40:	defff904 	addi	sp,sp,-28
 4006b44:	dfc00615 	stw	ra,24(sp)
 4006b48:	df000515 	stw	fp,20(sp)
 4006b4c:	df000504 	addi	fp,sp,20
 4006b50:	e13ffd15 	stw	r4,-12(fp)
 4006b54:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4006b58:	e0bffd17 	ldw	r2,-12(fp)
 4006b5c:	1005003a 	cmpeq	r2,r2,zero
 4006b60:	1000041e 	bne	r2,zero,4006b74 <alt_dev_llist_insert+0x34>
 4006b64:	e0bffd17 	ldw	r2,-12(fp)
 4006b68:	10800217 	ldw	r2,8(r2)
 4006b6c:	1004c03a 	cmpne	r2,r2,zero
 4006b70:	1000071e 	bne	r2,zero,4006b90 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4006b74:	4006bf40 	call	4006bf4 <alt_get_errno>
 4006b78:	1007883a 	mov	r3,r2
 4006b7c:	00800584 	movi	r2,22
 4006b80:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4006b84:	00bffa84 	movi	r2,-22
 4006b88:	e0bfff15 	stw	r2,-4(fp)
 4006b8c:	00001306 	br	4006bdc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4006b90:	e0fffd17 	ldw	r3,-12(fp)
 4006b94:	e0bffe17 	ldw	r2,-8(fp)
 4006b98:	e0bffb15 	stw	r2,-20(fp)
 4006b9c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4006ba0:	e0fffc17 	ldw	r3,-16(fp)
 4006ba4:	e0bffb17 	ldw	r2,-20(fp)
 4006ba8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4006bac:	e0bffb17 	ldw	r2,-20(fp)
 4006bb0:	10c00017 	ldw	r3,0(r2)
 4006bb4:	e0bffc17 	ldw	r2,-16(fp)
 4006bb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4006bbc:	e0bffb17 	ldw	r2,-20(fp)
 4006bc0:	10c00017 	ldw	r3,0(r2)
 4006bc4:	e0bffc17 	ldw	r2,-16(fp)
 4006bc8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4006bcc:	e0fffb17 	ldw	r3,-20(fp)
 4006bd0:	e0bffc17 	ldw	r2,-16(fp)
 4006bd4:	18800015 	stw	r2,0(r3)

  return 0;  
 4006bd8:	e03fff15 	stw	zero,-4(fp)
 4006bdc:	e0bfff17 	ldw	r2,-4(fp)
}
 4006be0:	e037883a 	mov	sp,fp
 4006be4:	dfc00117 	ldw	ra,4(sp)
 4006be8:	df000017 	ldw	fp,0(sp)
 4006bec:	dec00204 	addi	sp,sp,8
 4006bf0:	f800283a 	ret

04006bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4006bf4:	defffd04 	addi	sp,sp,-12
 4006bf8:	dfc00215 	stw	ra,8(sp)
 4006bfc:	df000115 	stw	fp,4(sp)
 4006c00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4006c04:	00810074 	movhi	r2,1025
 4006c08:	10a6f804 	addi	r2,r2,-25632
 4006c0c:	10800017 	ldw	r2,0(r2)
 4006c10:	1005003a 	cmpeq	r2,r2,zero
 4006c14:	1000061e 	bne	r2,zero,4006c30 <alt_get_errno+0x3c>
 4006c18:	00810074 	movhi	r2,1025
 4006c1c:	10a6f804 	addi	r2,r2,-25632
 4006c20:	10800017 	ldw	r2,0(r2)
 4006c24:	103ee83a 	callr	r2
 4006c28:	e0bfff15 	stw	r2,-4(fp)
 4006c2c:	00000306 	br	4006c3c <alt_get_errno+0x48>
 4006c30:	00810074 	movhi	r2,1025
 4006c34:	10ae1104 	addi	r2,r2,-18364
 4006c38:	e0bfff15 	stw	r2,-4(fp)
 4006c3c:	e0bfff17 	ldw	r2,-4(fp)
}
 4006c40:	e037883a 	mov	sp,fp
 4006c44:	dfc00117 	ldw	ra,4(sp)
 4006c48:	df000017 	ldw	fp,0(sp)
 4006c4c:	dec00204 	addi	sp,sp,8
 4006c50:	f800283a 	ret

04006c54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4006c54:	defffd04 	addi	sp,sp,-12
 4006c58:	dfc00215 	stw	ra,8(sp)
 4006c5c:	df000115 	stw	fp,4(sp)
 4006c60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4006c64:	00bfff04 	movi	r2,-4
 4006c68:	00c10034 	movhi	r3,1024
 4006c6c:	18df3904 	addi	r3,r3,31972
 4006c70:	1885883a 	add	r2,r3,r2
 4006c74:	e0bfff15 	stw	r2,-4(fp)
 4006c78:	00000606 	br	4006c94 <_do_ctors+0x40>
        (*ctor) (); 
 4006c7c:	e0bfff17 	ldw	r2,-4(fp)
 4006c80:	10800017 	ldw	r2,0(r2)
 4006c84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4006c88:	e0bfff17 	ldw	r2,-4(fp)
 4006c8c:	10bfff04 	addi	r2,r2,-4
 4006c90:	e0bfff15 	stw	r2,-4(fp)
 4006c94:	e0ffff17 	ldw	r3,-4(fp)
 4006c98:	00810034 	movhi	r2,1024
 4006c9c:	109f3804 	addi	r2,r2,31968
 4006ca0:	18bff62e 	bgeu	r3,r2,4006c7c <_do_ctors+0x28>
        (*ctor) (); 
}
 4006ca4:	e037883a 	mov	sp,fp
 4006ca8:	dfc00117 	ldw	ra,4(sp)
 4006cac:	df000017 	ldw	fp,0(sp)
 4006cb0:	dec00204 	addi	sp,sp,8
 4006cb4:	f800283a 	ret

04006cb8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4006cb8:	defffd04 	addi	sp,sp,-12
 4006cbc:	dfc00215 	stw	ra,8(sp)
 4006cc0:	df000115 	stw	fp,4(sp)
 4006cc4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4006cc8:	00bfff04 	movi	r2,-4
 4006ccc:	00c10034 	movhi	r3,1024
 4006cd0:	18df3904 	addi	r3,r3,31972
 4006cd4:	1885883a 	add	r2,r3,r2
 4006cd8:	e0bfff15 	stw	r2,-4(fp)
 4006cdc:	00000606 	br	4006cf8 <_do_dtors+0x40>
        (*dtor) (); 
 4006ce0:	e0bfff17 	ldw	r2,-4(fp)
 4006ce4:	10800017 	ldw	r2,0(r2)
 4006ce8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4006cec:	e0bfff17 	ldw	r2,-4(fp)
 4006cf0:	10bfff04 	addi	r2,r2,-4
 4006cf4:	e0bfff15 	stw	r2,-4(fp)
 4006cf8:	e0ffff17 	ldw	r3,-4(fp)
 4006cfc:	00810034 	movhi	r2,1024
 4006d00:	109f3904 	addi	r2,r2,31972
 4006d04:	18bff62e 	bgeu	r3,r2,4006ce0 <_do_dtors+0x28>
        (*dtor) (); 
}
 4006d08:	e037883a 	mov	sp,fp
 4006d0c:	dfc00117 	ldw	ra,4(sp)
 4006d10:	df000017 	ldw	fp,0(sp)
 4006d14:	dec00204 	addi	sp,sp,8
 4006d18:	f800283a 	ret

04006d1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4006d1c:	defffe04 	addi	sp,sp,-8
 4006d20:	dfc00115 	stw	ra,4(sp)
 4006d24:	df000015 	stw	fp,0(sp)
 4006d28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4006d2c:	0009883a 	mov	r4,zero
 4006d30:	01440004 	movi	r5,4096
 4006d34:	40078480 	call	4007848 <alt_icache_flush>
#endif
}
 4006d38:	e037883a 	mov	sp,fp
 4006d3c:	dfc00117 	ldw	ra,4(sp)
 4006d40:	df000017 	ldw	fp,0(sp)
 4006d44:	dec00204 	addi	sp,sp,8
 4006d48:	f800283a 	ret

04006d4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4006d4c:	defff904 	addi	sp,sp,-28
 4006d50:	dfc00615 	stw	ra,24(sp)
 4006d54:	df000515 	stw	fp,20(sp)
 4006d58:	df000504 	addi	fp,sp,20
 4006d5c:	e13ffc15 	stw	r4,-16(fp)
 4006d60:	e17ffd15 	stw	r5,-12(fp)
 4006d64:	e1bffe15 	stw	r6,-8(fp)
 4006d68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4006d6c:	e0800217 	ldw	r2,8(fp)
 4006d70:	d8800015 	stw	r2,0(sp)
 4006d74:	e13ffc17 	ldw	r4,-16(fp)
 4006d78:	e17ffd17 	ldw	r5,-12(fp)
 4006d7c:	e1bffe17 	ldw	r6,-8(fp)
 4006d80:	e1ffff17 	ldw	r7,-4(fp)
 4006d84:	4006f200 	call	4006f20 <alt_iic_isr_register>
}  
 4006d88:	e037883a 	mov	sp,fp
 4006d8c:	dfc00117 	ldw	ra,4(sp)
 4006d90:	df000017 	ldw	fp,0(sp)
 4006d94:	dec00204 	addi	sp,sp,8
 4006d98:	f800283a 	ret

04006d9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4006d9c:	defff904 	addi	sp,sp,-28
 4006da0:	df000615 	stw	fp,24(sp)
 4006da4:	df000604 	addi	fp,sp,24
 4006da8:	e13ffe15 	stw	r4,-8(fp)
 4006dac:	e17fff15 	stw	r5,-4(fp)
 4006db0:	e0bfff17 	ldw	r2,-4(fp)
 4006db4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006db8:	0005303a 	rdctl	r2,status
 4006dbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006dc0:	e0fffb17 	ldw	r3,-20(fp)
 4006dc4:	00bfff84 	movi	r2,-2
 4006dc8:	1884703a 	and	r2,r3,r2
 4006dcc:	1001703a 	wrctl	status,r2
  
  return context;
 4006dd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4006dd4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 4006dd8:	e0fffc17 	ldw	r3,-16(fp)
 4006ddc:	00800044 	movi	r2,1
 4006de0:	10c4983a 	sll	r2,r2,r3
 4006de4:	1007883a 	mov	r3,r2
 4006de8:	00810074 	movhi	r2,1025
 4006dec:	10ae1204 	addi	r2,r2,-18360
 4006df0:	10800017 	ldw	r2,0(r2)
 4006df4:	1886b03a 	or	r3,r3,r2
 4006df8:	00810074 	movhi	r2,1025
 4006dfc:	10ae1204 	addi	r2,r2,-18360
 4006e00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4006e04:	00810074 	movhi	r2,1025
 4006e08:	10ae1204 	addi	r2,r2,-18360
 4006e0c:	10800017 	ldw	r2,0(r2)
 4006e10:	100170fa 	wrctl	ienable,r2
 4006e14:	e0bffd17 	ldw	r2,-12(fp)
 4006e18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006e1c:	e0bffa17 	ldw	r2,-24(fp)
 4006e20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006e24:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4006e28:	e037883a 	mov	sp,fp
 4006e2c:	df000017 	ldw	fp,0(sp)
 4006e30:	dec00104 	addi	sp,sp,4
 4006e34:	f800283a 	ret

04006e38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4006e38:	defff904 	addi	sp,sp,-28
 4006e3c:	df000615 	stw	fp,24(sp)
 4006e40:	df000604 	addi	fp,sp,24
 4006e44:	e13ffe15 	stw	r4,-8(fp)
 4006e48:	e17fff15 	stw	r5,-4(fp)
 4006e4c:	e0bfff17 	ldw	r2,-4(fp)
 4006e50:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006e54:	0005303a 	rdctl	r2,status
 4006e58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006e5c:	e0fffb17 	ldw	r3,-20(fp)
 4006e60:	00bfff84 	movi	r2,-2
 4006e64:	1884703a 	and	r2,r3,r2
 4006e68:	1001703a 	wrctl	status,r2
  
  return context;
 4006e6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4006e70:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 4006e74:	e0fffc17 	ldw	r3,-16(fp)
 4006e78:	00800044 	movi	r2,1
 4006e7c:	10c4983a 	sll	r2,r2,r3
 4006e80:	0084303a 	nor	r2,zero,r2
 4006e84:	1007883a 	mov	r3,r2
 4006e88:	00810074 	movhi	r2,1025
 4006e8c:	10ae1204 	addi	r2,r2,-18360
 4006e90:	10800017 	ldw	r2,0(r2)
 4006e94:	1886703a 	and	r3,r3,r2
 4006e98:	00810074 	movhi	r2,1025
 4006e9c:	10ae1204 	addi	r2,r2,-18360
 4006ea0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4006ea4:	00810074 	movhi	r2,1025
 4006ea8:	10ae1204 	addi	r2,r2,-18360
 4006eac:	10800017 	ldw	r2,0(r2)
 4006eb0:	100170fa 	wrctl	ienable,r2
 4006eb4:	e0bffd17 	ldw	r2,-12(fp)
 4006eb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006ebc:	e0bffa17 	ldw	r2,-24(fp)
 4006ec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006ec4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4006ec8:	e037883a 	mov	sp,fp
 4006ecc:	df000017 	ldw	fp,0(sp)
 4006ed0:	dec00104 	addi	sp,sp,4
 4006ed4:	f800283a 	ret

04006ed8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4006ed8:	defffc04 	addi	sp,sp,-16
 4006edc:	df000315 	stw	fp,12(sp)
 4006ee0:	df000304 	addi	fp,sp,12
 4006ee4:	e13ffe15 	stw	r4,-8(fp)
 4006ee8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4006eec:	000530fa 	rdctl	r2,ienable
 4006ef0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4006ef4:	e0ffff17 	ldw	r3,-4(fp)
 4006ef8:	00800044 	movi	r2,1
 4006efc:	10c4983a 	sll	r2,r2,r3
 4006f00:	1007883a 	mov	r3,r2
 4006f04:	e0bffd17 	ldw	r2,-12(fp)
 4006f08:	1884703a 	and	r2,r3,r2
 4006f0c:	1004c03a 	cmpne	r2,r2,zero
}
 4006f10:	e037883a 	mov	sp,fp
 4006f14:	df000017 	ldw	fp,0(sp)
 4006f18:	dec00104 	addi	sp,sp,4
 4006f1c:	f800283a 	ret

04006f20 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4006f20:	defff404 	addi	sp,sp,-48
 4006f24:	dfc00b15 	stw	ra,44(sp)
 4006f28:	df000a15 	stw	fp,40(sp)
 4006f2c:	df000a04 	addi	fp,sp,40
 4006f30:	e13ffb15 	stw	r4,-20(fp)
 4006f34:	e17ffc15 	stw	r5,-16(fp)
 4006f38:	e1bffd15 	stw	r6,-12(fp)
 4006f3c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 4006f40:	00bffa84 	movi	r2,-22
 4006f44:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4006f48:	e0bffc17 	ldw	r2,-16(fp)
 4006f4c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4006f50:	e0bff917 	ldw	r2,-28(fp)
 4006f54:	10800808 	cmpgei	r2,r2,32
 4006f58:	1000291e 	bne	r2,zero,4007000 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006f5c:	0005303a 	rdctl	r2,status
 4006f60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006f64:	e0fff717 	ldw	r3,-36(fp)
 4006f68:	00bfff84 	movi	r2,-2
 4006f6c:	1884703a 	and	r2,r3,r2
 4006f70:	1001703a 	wrctl	status,r2
  
  return context;
 4006f74:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4006f78:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 4006f7c:	e0bff917 	ldw	r2,-28(fp)
 4006f80:	00c10074 	movhi	r3,1025
 4006f84:	18f02204 	addi	r3,r3,-16248
 4006f88:	100490fa 	slli	r2,r2,3
 4006f8c:	10c7883a 	add	r3,r2,r3
 4006f90:	e0bffd17 	ldw	r2,-12(fp)
 4006f94:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 4006f98:	e0bff917 	ldw	r2,-28(fp)
 4006f9c:	00c10074 	movhi	r3,1025
 4006fa0:	18f02204 	addi	r3,r3,-16248
 4006fa4:	100490fa 	slli	r2,r2,3
 4006fa8:	10c5883a 	add	r2,r2,r3
 4006fac:	10c00104 	addi	r3,r2,4
 4006fb0:	e0bffe17 	ldw	r2,-8(fp)
 4006fb4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4006fb8:	e0bffd17 	ldw	r2,-12(fp)
 4006fbc:	1005003a 	cmpeq	r2,r2,zero
 4006fc0:	1000051e 	bne	r2,zero,4006fd8 <alt_iic_isr_register+0xb8>
 4006fc4:	e17ff917 	ldw	r5,-28(fp)
 4006fc8:	e13ffb17 	ldw	r4,-20(fp)
 4006fcc:	4006d9c0 	call	4006d9c <alt_ic_irq_enable>
 4006fd0:	e0bfff15 	stw	r2,-4(fp)
 4006fd4:	00000406 	br	4006fe8 <alt_iic_isr_register+0xc8>
 4006fd8:	e17ff917 	ldw	r5,-28(fp)
 4006fdc:	e13ffb17 	ldw	r4,-20(fp)
 4006fe0:	4006e380 	call	4006e38 <alt_ic_irq_disable>
 4006fe4:	e0bfff15 	stw	r2,-4(fp)
 4006fe8:	e0bfff17 	ldw	r2,-4(fp)
 4006fec:	e0bffa15 	stw	r2,-24(fp)
 4006ff0:	e0bff817 	ldw	r2,-32(fp)
 4006ff4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006ff8:	e0bff617 	ldw	r2,-40(fp)
 4006ffc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4007000:	e0bffa17 	ldw	r2,-24(fp)
}
 4007004:	e037883a 	mov	sp,fp
 4007008:	dfc00117 	ldw	ra,4(sp)
 400700c:	df000017 	ldw	fp,0(sp)
 4007010:	dec00204 	addi	sp,sp,8
 4007014:	f800283a 	ret

04007018 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4007018:	defff904 	addi	sp,sp,-28
 400701c:	dfc00615 	stw	ra,24(sp)
 4007020:	df000515 	stw	fp,20(sp)
 4007024:	df000504 	addi	fp,sp,20
 4007028:	e13ffc15 	stw	r4,-16(fp)
 400702c:	e17ffd15 	stw	r5,-12(fp)
 4007030:	e1bffe15 	stw	r6,-8(fp)
 4007034:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4007038:	e13ffd17 	ldw	r4,-12(fp)
 400703c:	e17ffe17 	ldw	r5,-8(fp)
 4007040:	e1bfff17 	ldw	r6,-4(fp)
 4007044:	40072300 	call	4007230 <open>
 4007048:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400704c:	e0bffb17 	ldw	r2,-20(fp)
 4007050:	1004803a 	cmplt	r2,r2,zero
 4007054:	10001c1e 	bne	r2,zero,40070c8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 4007058:	e0bffb17 	ldw	r2,-20(fp)
 400705c:	00c10074 	movhi	r3,1025
 4007060:	18e1fe04 	addi	r3,r3,-30728
 4007064:	10800324 	muli	r2,r2,12
 4007068:	10c5883a 	add	r2,r2,r3
 400706c:	10c00017 	ldw	r3,0(r2)
 4007070:	e0bffc17 	ldw	r2,-16(fp)
 4007074:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4007078:	e0bffb17 	ldw	r2,-20(fp)
 400707c:	00c10074 	movhi	r3,1025
 4007080:	18e1fe04 	addi	r3,r3,-30728
 4007084:	10800324 	muli	r2,r2,12
 4007088:	10c5883a 	add	r2,r2,r3
 400708c:	10800104 	addi	r2,r2,4
 4007090:	10c00017 	ldw	r3,0(r2)
 4007094:	e0bffc17 	ldw	r2,-16(fp)
 4007098:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400709c:	e0bffb17 	ldw	r2,-20(fp)
 40070a0:	00c10074 	movhi	r3,1025
 40070a4:	18e1fe04 	addi	r3,r3,-30728
 40070a8:	10800324 	muli	r2,r2,12
 40070ac:	10c5883a 	add	r2,r2,r3
 40070b0:	10800204 	addi	r2,r2,8
 40070b4:	10c00017 	ldw	r3,0(r2)
 40070b8:	e0bffc17 	ldw	r2,-16(fp)
 40070bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40070c0:	e13ffb17 	ldw	r4,-20(fp)
 40070c4:	4003ff40 	call	4003ff4 <alt_release_fd>
  }
} 
 40070c8:	e037883a 	mov	sp,fp
 40070cc:	dfc00117 	ldw	ra,4(sp)
 40070d0:	df000017 	ldw	fp,0(sp)
 40070d4:	dec00204 	addi	sp,sp,8
 40070d8:	f800283a 	ret

040070dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40070dc:	defffb04 	addi	sp,sp,-20
 40070e0:	dfc00415 	stw	ra,16(sp)
 40070e4:	df000315 	stw	fp,12(sp)
 40070e8:	df000304 	addi	fp,sp,12
 40070ec:	e13ffd15 	stw	r4,-12(fp)
 40070f0:	e17ffe15 	stw	r5,-8(fp)
 40070f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40070f8:	01010074 	movhi	r4,1025
 40070fc:	21220104 	addi	r4,r4,-30716
 4007100:	e17ffd17 	ldw	r5,-12(fp)
 4007104:	01800044 	movi	r6,1
 4007108:	01c07fc4 	movi	r7,511
 400710c:	40070180 	call	4007018 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4007110:	01010074 	movhi	r4,1025
 4007114:	2121fe04 	addi	r4,r4,-30728
 4007118:	e17ffe17 	ldw	r5,-8(fp)
 400711c:	000d883a 	mov	r6,zero
 4007120:	01c07fc4 	movi	r7,511
 4007124:	40070180 	call	4007018 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4007128:	01010074 	movhi	r4,1025
 400712c:	21220404 	addi	r4,r4,-30704
 4007130:	e17fff17 	ldw	r5,-4(fp)
 4007134:	01800044 	movi	r6,1
 4007138:	01c07fc4 	movi	r7,511
 400713c:	40070180 	call	4007018 <alt_open_fd>
}  
 4007140:	e037883a 	mov	sp,fp
 4007144:	dfc00117 	ldw	ra,4(sp)
 4007148:	df000017 	ldw	fp,0(sp)
 400714c:	dec00204 	addi	sp,sp,8
 4007150:	f800283a 	ret

04007154 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4007154:	defffc04 	addi	sp,sp,-16
 4007158:	df000315 	stw	fp,12(sp)
 400715c:	df000304 	addi	fp,sp,12
 4007160:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4007164:	e0bffe17 	ldw	r2,-8(fp)
 4007168:	10800217 	ldw	r2,8(r2)
 400716c:	10d00034 	orhi	r3,r2,16384
 4007170:	e0bffe17 	ldw	r2,-8(fp)
 4007174:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4007178:	e03ffd15 	stw	zero,-12(fp)
 400717c:	00002006 	br	4007200 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4007180:	e0bffd17 	ldw	r2,-12(fp)
 4007184:	00c10074 	movhi	r3,1025
 4007188:	18e1fe04 	addi	r3,r3,-30728
 400718c:	10800324 	muli	r2,r2,12
 4007190:	10c5883a 	add	r2,r2,r3
 4007194:	10c00017 	ldw	r3,0(r2)
 4007198:	e0bffe17 	ldw	r2,-8(fp)
 400719c:	10800017 	ldw	r2,0(r2)
 40071a0:	1880141e 	bne	r3,r2,40071f4 <alt_file_locked+0xa0>
 40071a4:	e0bffd17 	ldw	r2,-12(fp)
 40071a8:	00c10074 	movhi	r3,1025
 40071ac:	18e1fe04 	addi	r3,r3,-30728
 40071b0:	10800324 	muli	r2,r2,12
 40071b4:	10c5883a 	add	r2,r2,r3
 40071b8:	10800204 	addi	r2,r2,8
 40071bc:	10800017 	ldw	r2,0(r2)
 40071c0:	1004403a 	cmpge	r2,r2,zero
 40071c4:	10000b1e 	bne	r2,zero,40071f4 <alt_file_locked+0xa0>
 40071c8:	e0bffd17 	ldw	r2,-12(fp)
 40071cc:	10800324 	muli	r2,r2,12
 40071d0:	1007883a 	mov	r3,r2
 40071d4:	00810074 	movhi	r2,1025
 40071d8:	10a1fe04 	addi	r2,r2,-30728
 40071dc:	1887883a 	add	r3,r3,r2
 40071e0:	e0bffe17 	ldw	r2,-8(fp)
 40071e4:	18800326 	beq	r3,r2,40071f4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40071e8:	00bffcc4 	movi	r2,-13
 40071ec:	e0bfff15 	stw	r2,-4(fp)
 40071f0:	00000a06 	br	400721c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40071f4:	e0bffd17 	ldw	r2,-12(fp)
 40071f8:	10800044 	addi	r2,r2,1
 40071fc:	e0bffd15 	stw	r2,-12(fp)
 4007200:	00810074 	movhi	r2,1025
 4007204:	10a6f704 	addi	r2,r2,-25636
 4007208:	10800017 	ldw	r2,0(r2)
 400720c:	1007883a 	mov	r3,r2
 4007210:	e0bffd17 	ldw	r2,-12(fp)
 4007214:	18bfda2e 	bgeu	r3,r2,4007180 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4007218:	e03fff15 	stw	zero,-4(fp)
 400721c:	e0bfff17 	ldw	r2,-4(fp)
}
 4007220:	e037883a 	mov	sp,fp
 4007224:	df000017 	ldw	fp,0(sp)
 4007228:	dec00104 	addi	sp,sp,4
 400722c:	f800283a 	ret

04007230 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4007230:	defff404 	addi	sp,sp,-48
 4007234:	dfc00b15 	stw	ra,44(sp)
 4007238:	df000a15 	stw	fp,40(sp)
 400723c:	df000a04 	addi	fp,sp,40
 4007240:	e13ffb15 	stw	r4,-20(fp)
 4007244:	e17ffc15 	stw	r5,-16(fp)
 4007248:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400724c:	00bfffc4 	movi	r2,-1
 4007250:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4007254:	00bffb44 	movi	r2,-19
 4007258:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 400725c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4007260:	e13ffb17 	ldw	r4,-20(fp)
 4007264:	01410074 	movhi	r5,1025
 4007268:	2966f504 	addi	r5,r5,-25644
 400726c:	40075dc0 	call	40075dc <alt_find_dev>
 4007270:	e0bffa15 	stw	r2,-24(fp)
 4007274:	e0bffa17 	ldw	r2,-24(fp)
 4007278:	1004c03a 	cmpne	r2,r2,zero
 400727c:	1000051e 	bne	r2,zero,4007294 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4007280:	e13ffb17 	ldw	r4,-20(fp)
 4007284:	40076700 	call	4007670 <alt_find_file>
 4007288:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 400728c:	00800044 	movi	r2,1
 4007290:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4007294:	e0bffa17 	ldw	r2,-24(fp)
 4007298:	1005003a 	cmpeq	r2,r2,zero
 400729c:	1000301e 	bne	r2,zero,4007360 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40072a0:	e13ffa17 	ldw	r4,-24(fp)
 40072a4:	40077900 	call	4007790 <alt_get_fd>
 40072a8:	e0bff815 	stw	r2,-32(fp)
 40072ac:	e0bff817 	ldw	r2,-32(fp)
 40072b0:	1004403a 	cmpge	r2,r2,zero
 40072b4:	1000031e 	bne	r2,zero,40072c4 <open+0x94>
    {
      status = index;
 40072b8:	e0bff817 	ldw	r2,-32(fp)
 40072bc:	e0bff715 	stw	r2,-36(fp)
 40072c0:	00002906 	br	4007368 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 40072c4:	e0bff817 	ldw	r2,-32(fp)
 40072c8:	10800324 	muli	r2,r2,12
 40072cc:	1007883a 	mov	r3,r2
 40072d0:	00810074 	movhi	r2,1025
 40072d4:	10a1fe04 	addi	r2,r2,-30728
 40072d8:	1885883a 	add	r2,r3,r2
 40072dc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40072e0:	e0fffc17 	ldw	r3,-16(fp)
 40072e4:	00900034 	movhi	r2,16384
 40072e8:	10bfffc4 	addi	r2,r2,-1
 40072ec:	1886703a 	and	r3,r3,r2
 40072f0:	e0bff917 	ldw	r2,-28(fp)
 40072f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40072f8:	e0bff617 	ldw	r2,-40(fp)
 40072fc:	1004c03a 	cmpne	r2,r2,zero
 4007300:	1000061e 	bne	r2,zero,400731c <open+0xec>
 4007304:	e13ff917 	ldw	r4,-28(fp)
 4007308:	40071540 	call	4007154 <alt_file_locked>
 400730c:	e0bff715 	stw	r2,-36(fp)
 4007310:	e0bff717 	ldw	r2,-36(fp)
 4007314:	1004803a 	cmplt	r2,r2,zero
 4007318:	1000131e 	bne	r2,zero,4007368 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400731c:	e0bffa17 	ldw	r2,-24(fp)
 4007320:	10800317 	ldw	r2,12(r2)
 4007324:	1005003a 	cmpeq	r2,r2,zero
 4007328:	1000091e 	bne	r2,zero,4007350 <open+0x120>
 400732c:	e0bffa17 	ldw	r2,-24(fp)
 4007330:	10800317 	ldw	r2,12(r2)
 4007334:	e13ff917 	ldw	r4,-28(fp)
 4007338:	e17ffb17 	ldw	r5,-20(fp)
 400733c:	e1bffc17 	ldw	r6,-16(fp)
 4007340:	e1fffd17 	ldw	r7,-12(fp)
 4007344:	103ee83a 	callr	r2
 4007348:	e0bfff15 	stw	r2,-4(fp)
 400734c:	00000106 	br	4007354 <open+0x124>
 4007350:	e03fff15 	stw	zero,-4(fp)
 4007354:	e0bfff17 	ldw	r2,-4(fp)
 4007358:	e0bff715 	stw	r2,-36(fp)
 400735c:	00000206 	br	4007368 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4007360:	00bffb44 	movi	r2,-19
 4007364:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4007368:	e0bff717 	ldw	r2,-36(fp)
 400736c:	1004403a 	cmpge	r2,r2,zero
 4007370:	1000091e 	bne	r2,zero,4007398 <open+0x168>
  {
    alt_release_fd (index);  
 4007374:	e13ff817 	ldw	r4,-32(fp)
 4007378:	4003ff40 	call	4003ff4 <alt_release_fd>
    ALT_ERRNO = -status;
 400737c:	40073b80 	call	40073b8 <alt_get_errno>
 4007380:	e0fff717 	ldw	r3,-36(fp)
 4007384:	00c7c83a 	sub	r3,zero,r3
 4007388:	10c00015 	stw	r3,0(r2)
    return -1;
 400738c:	00bfffc4 	movi	r2,-1
 4007390:	e0bffe15 	stw	r2,-8(fp)
 4007394:	00000206 	br	40073a0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 4007398:	e0bff817 	ldw	r2,-32(fp)
 400739c:	e0bffe15 	stw	r2,-8(fp)
 40073a0:	e0bffe17 	ldw	r2,-8(fp)
}
 40073a4:	e037883a 	mov	sp,fp
 40073a8:	dfc00117 	ldw	ra,4(sp)
 40073ac:	df000017 	ldw	fp,0(sp)
 40073b0:	dec00204 	addi	sp,sp,8
 40073b4:	f800283a 	ret

040073b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40073b8:	defffd04 	addi	sp,sp,-12
 40073bc:	dfc00215 	stw	ra,8(sp)
 40073c0:	df000115 	stw	fp,4(sp)
 40073c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40073c8:	00810074 	movhi	r2,1025
 40073cc:	10a6f804 	addi	r2,r2,-25632
 40073d0:	10800017 	ldw	r2,0(r2)
 40073d4:	1005003a 	cmpeq	r2,r2,zero
 40073d8:	1000061e 	bne	r2,zero,40073f4 <alt_get_errno+0x3c>
 40073dc:	00810074 	movhi	r2,1025
 40073e0:	10a6f804 	addi	r2,r2,-25632
 40073e4:	10800017 	ldw	r2,0(r2)
 40073e8:	103ee83a 	callr	r2
 40073ec:	e0bfff15 	stw	r2,-4(fp)
 40073f0:	00000306 	br	4007400 <alt_get_errno+0x48>
 40073f4:	00810074 	movhi	r2,1025
 40073f8:	10ae1104 	addi	r2,r2,-18364
 40073fc:	e0bfff15 	stw	r2,-4(fp)
 4007400:	e0bfff17 	ldw	r2,-4(fp)
}
 4007404:	e037883a 	mov	sp,fp
 4007408:	dfc00117 	ldw	ra,4(sp)
 400740c:	df000017 	ldw	fp,0(sp)
 4007410:	dec00204 	addi	sp,sp,8
 4007414:	f800283a 	ret

04007418 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4007418:	defffa04 	addi	sp,sp,-24
 400741c:	df000515 	stw	fp,20(sp)
 4007420:	df000504 	addi	fp,sp,20
 4007424:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007428:	0005303a 	rdctl	r2,status
 400742c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007430:	e0fffd17 	ldw	r3,-12(fp)
 4007434:	00bfff84 	movi	r2,-2
 4007438:	1884703a 	and	r2,r3,r2
 400743c:	1001703a 	wrctl	status,r2
  
  return context;
 4007440:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4007444:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 4007448:	e0bfff17 	ldw	r2,-4(fp)
 400744c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4007450:	e0bffc17 	ldw	r2,-16(fp)
 4007454:	10c00017 	ldw	r3,0(r2)
 4007458:	e0bffc17 	ldw	r2,-16(fp)
 400745c:	10800117 	ldw	r2,4(r2)
 4007460:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4007464:	e0bffc17 	ldw	r2,-16(fp)
 4007468:	10c00117 	ldw	r3,4(r2)
 400746c:	e0bffc17 	ldw	r2,-16(fp)
 4007470:	10800017 	ldw	r2,0(r2)
 4007474:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4007478:	e0fffc17 	ldw	r3,-16(fp)
 400747c:	e0bffc17 	ldw	r2,-16(fp)
 4007480:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4007484:	e0fffc17 	ldw	r3,-16(fp)
 4007488:	e0bffc17 	ldw	r2,-16(fp)
 400748c:	18800015 	stw	r2,0(r3)
 4007490:	e0bffe17 	ldw	r2,-8(fp)
 4007494:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007498:	e0bffb17 	ldw	r2,-20(fp)
 400749c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40074a0:	e037883a 	mov	sp,fp
 40074a4:	df000017 	ldw	fp,0(sp)
 40074a8:	dec00104 	addi	sp,sp,4
 40074ac:	f800283a 	ret

040074b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40074b0:	defffb04 	addi	sp,sp,-20
 40074b4:	dfc00415 	stw	ra,16(sp)
 40074b8:	df000315 	stw	fp,12(sp)
 40074bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40074c0:	d0a00d17 	ldw	r2,-32716(gp)
 40074c4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40074c8:	d0a72817 	ldw	r2,-25440(gp)
 40074cc:	10800044 	addi	r2,r2,1
 40074d0:	d0a72815 	stw	r2,-25440(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40074d4:	00003106 	br	400759c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 40074d8:	e0bffe17 	ldw	r2,-8(fp)
 40074dc:	10800017 	ldw	r2,0(r2)
 40074e0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40074e4:	e0bffe17 	ldw	r2,-8(fp)
 40074e8:	10800403 	ldbu	r2,16(r2)
 40074ec:	10803fcc 	andi	r2,r2,255
 40074f0:	1005003a 	cmpeq	r2,r2,zero
 40074f4:	1000051e 	bne	r2,zero,400750c <alt_tick+0x5c>
 40074f8:	d0a72817 	ldw	r2,-25440(gp)
 40074fc:	1004c03a 	cmpne	r2,r2,zero
 4007500:	1000021e 	bne	r2,zero,400750c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4007504:	e0bffe17 	ldw	r2,-8(fp)
 4007508:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400750c:	e0bffe17 	ldw	r2,-8(fp)
 4007510:	10c00217 	ldw	r3,8(r2)
 4007514:	d0a72817 	ldw	r2,-25440(gp)
 4007518:	10c01e36 	bltu	r2,r3,4007594 <alt_tick+0xe4>
 400751c:	e0bffe17 	ldw	r2,-8(fp)
 4007520:	10800403 	ldbu	r2,16(r2)
 4007524:	10803fcc 	andi	r2,r2,255
 4007528:	1004c03a 	cmpne	r2,r2,zero
 400752c:	1000191e 	bne	r2,zero,4007594 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4007530:	e0bffe17 	ldw	r2,-8(fp)
 4007534:	10c00317 	ldw	r3,12(r2)
 4007538:	e0bffe17 	ldw	r2,-8(fp)
 400753c:	11000517 	ldw	r4,20(r2)
 4007540:	183ee83a 	callr	r3
 4007544:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4007548:	e0bffd17 	ldw	r2,-12(fp)
 400754c:	1004c03a 	cmpne	r2,r2,zero
 4007550:	1000031e 	bne	r2,zero,4007560 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4007554:	e13ffe17 	ldw	r4,-8(fp)
 4007558:	40074180 	call	4007418 <alt_alarm_stop>
 400755c:	00000d06 	br	4007594 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4007560:	e0bffe17 	ldw	r2,-8(fp)
 4007564:	10c00217 	ldw	r3,8(r2)
 4007568:	e0bffd17 	ldw	r2,-12(fp)
 400756c:	1887883a 	add	r3,r3,r2
 4007570:	e0bffe17 	ldw	r2,-8(fp)
 4007574:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4007578:	e0bffe17 	ldw	r2,-8(fp)
 400757c:	10c00217 	ldw	r3,8(r2)
 4007580:	d0a72817 	ldw	r2,-25440(gp)
 4007584:	1880032e 	bgeu	r3,r2,4007594 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4007588:	e0fffe17 	ldw	r3,-8(fp)
 400758c:	00800044 	movi	r2,1
 4007590:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4007594:	e0bfff17 	ldw	r2,-4(fp)
 4007598:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400759c:	d0e00d04 	addi	r3,gp,-32716
 40075a0:	e0bffe17 	ldw	r2,-8(fp)
 40075a4:	10ffcc1e 	bne	r2,r3,40074d8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 40075a8:	e037883a 	mov	sp,fp
 40075ac:	dfc00117 	ldw	ra,4(sp)
 40075b0:	df000017 	ldw	fp,0(sp)
 40075b4:	dec00204 	addi	sp,sp,8
 40075b8:	f800283a 	ret

040075bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 40075bc:	deffff04 	addi	sp,sp,-4
 40075c0:	df000015 	stw	fp,0(sp)
 40075c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40075c8:	000170fa 	wrctl	ienable,zero
}
 40075cc:	e037883a 	mov	sp,fp
 40075d0:	df000017 	ldw	fp,0(sp)
 40075d4:	dec00104 	addi	sp,sp,4
 40075d8:	f800283a 	ret

040075dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40075dc:	defff904 	addi	sp,sp,-28
 40075e0:	dfc00615 	stw	ra,24(sp)
 40075e4:	df000515 	stw	fp,20(sp)
 40075e8:	df000504 	addi	fp,sp,20
 40075ec:	e13ffd15 	stw	r4,-12(fp)
 40075f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40075f4:	e0bffe17 	ldw	r2,-8(fp)
 40075f8:	10800017 	ldw	r2,0(r2)
 40075fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4007600:	e13ffd17 	ldw	r4,-12(fp)
 4007604:	4000d940 	call	4000d94 <strlen>
 4007608:	10800044 	addi	r2,r2,1
 400760c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4007610:	00000d06 	br	4007648 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4007614:	e0bffc17 	ldw	r2,-16(fp)
 4007618:	11000217 	ldw	r4,8(r2)
 400761c:	e1bffb17 	ldw	r6,-20(fp)
 4007620:	e17ffd17 	ldw	r5,-12(fp)
 4007624:	40079240 	call	4007924 <memcmp>
 4007628:	1004c03a 	cmpne	r2,r2,zero
 400762c:	1000031e 	bne	r2,zero,400763c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4007630:	e0bffc17 	ldw	r2,-16(fp)
 4007634:	e0bfff15 	stw	r2,-4(fp)
 4007638:	00000706 	br	4007658 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400763c:	e0bffc17 	ldw	r2,-16(fp)
 4007640:	10800017 	ldw	r2,0(r2)
 4007644:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4007648:	e0fffe17 	ldw	r3,-8(fp)
 400764c:	e0bffc17 	ldw	r2,-16(fp)
 4007650:	10fff01e 	bne	r2,r3,4007614 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4007654:	e03fff15 	stw	zero,-4(fp)
 4007658:	e0bfff17 	ldw	r2,-4(fp)
}
 400765c:	e037883a 	mov	sp,fp
 4007660:	dfc00117 	ldw	ra,4(sp)
 4007664:	df000017 	ldw	fp,0(sp)
 4007668:	dec00204 	addi	sp,sp,8
 400766c:	f800283a 	ret

04007670 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4007670:	defffa04 	addi	sp,sp,-24
 4007674:	dfc00515 	stw	ra,20(sp)
 4007678:	df000415 	stw	fp,16(sp)
 400767c:	df000404 	addi	fp,sp,16
 4007680:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4007684:	00810074 	movhi	r2,1025
 4007688:	10a6f304 	addi	r2,r2,-25652
 400768c:	10800017 	ldw	r2,0(r2)
 4007690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4007694:	00003306 	br	4007764 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4007698:	e0bffd17 	ldw	r2,-12(fp)
 400769c:	11000217 	ldw	r4,8(r2)
 40076a0:	4000d940 	call	4000d94 <strlen>
 40076a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 40076a8:	e0bffd17 	ldw	r2,-12(fp)
 40076ac:	10c00217 	ldw	r3,8(r2)
 40076b0:	e0bffc17 	ldw	r2,-16(fp)
 40076b4:	1885883a 	add	r2,r3,r2
 40076b8:	10bfffc4 	addi	r2,r2,-1
 40076bc:	10800003 	ldbu	r2,0(r2)
 40076c0:	10803fcc 	andi	r2,r2,255
 40076c4:	1080201c 	xori	r2,r2,128
 40076c8:	10bfe004 	addi	r2,r2,-128
 40076cc:	10800bd8 	cmpnei	r2,r2,47
 40076d0:	1000031e 	bne	r2,zero,40076e0 <alt_find_file+0x70>
    {
      len -= 1;
 40076d4:	e0bffc17 	ldw	r2,-16(fp)
 40076d8:	10bfffc4 	addi	r2,r2,-1
 40076dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40076e0:	e0bffc17 	ldw	r2,-16(fp)
 40076e4:	1007883a 	mov	r3,r2
 40076e8:	e0bffe17 	ldw	r2,-8(fp)
 40076ec:	1885883a 	add	r2,r3,r2
 40076f0:	10800003 	ldbu	r2,0(r2)
 40076f4:	10803fcc 	andi	r2,r2,255
 40076f8:	1080201c 	xori	r2,r2,128
 40076fc:	10bfe004 	addi	r2,r2,-128
 4007700:	10800be0 	cmpeqi	r2,r2,47
 4007704:	10000a1e 	bne	r2,zero,4007730 <alt_find_file+0xc0>
 4007708:	e0bffc17 	ldw	r2,-16(fp)
 400770c:	1007883a 	mov	r3,r2
 4007710:	e0bffe17 	ldw	r2,-8(fp)
 4007714:	1885883a 	add	r2,r3,r2
 4007718:	10800003 	ldbu	r2,0(r2)
 400771c:	10803fcc 	andi	r2,r2,255
 4007720:	1080201c 	xori	r2,r2,128
 4007724:	10bfe004 	addi	r2,r2,-128
 4007728:	1004c03a 	cmpne	r2,r2,zero
 400772c:	10000a1e 	bne	r2,zero,4007758 <alt_find_file+0xe8>
 4007730:	e0bffd17 	ldw	r2,-12(fp)
 4007734:	11000217 	ldw	r4,8(r2)
 4007738:	e1bffc17 	ldw	r6,-16(fp)
 400773c:	e17ffe17 	ldw	r5,-8(fp)
 4007740:	40079240 	call	4007924 <memcmp>
 4007744:	1004c03a 	cmpne	r2,r2,zero
 4007748:	1000031e 	bne	r2,zero,4007758 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400774c:	e0bffd17 	ldw	r2,-12(fp)
 4007750:	e0bfff15 	stw	r2,-4(fp)
 4007754:	00000806 	br	4007778 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4007758:	e0bffd17 	ldw	r2,-12(fp)
 400775c:	10800017 	ldw	r2,0(r2)
 4007760:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4007764:	00c10074 	movhi	r3,1025
 4007768:	18e6f304 	addi	r3,r3,-25652
 400776c:	e0bffd17 	ldw	r2,-12(fp)
 4007770:	10ffc91e 	bne	r2,r3,4007698 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4007774:	e03fff15 	stw	zero,-4(fp)
 4007778:	e0bfff17 	ldw	r2,-4(fp)
}
 400777c:	e037883a 	mov	sp,fp
 4007780:	dfc00117 	ldw	ra,4(sp)
 4007784:	df000017 	ldw	fp,0(sp)
 4007788:	dec00204 	addi	sp,sp,8
 400778c:	f800283a 	ret

04007790 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4007790:	defffc04 	addi	sp,sp,-16
 4007794:	df000315 	stw	fp,12(sp)
 4007798:	df000304 	addi	fp,sp,12
 400779c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40077a0:	00bffa04 	movi	r2,-24
 40077a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40077a8:	e03ffe15 	stw	zero,-8(fp)
 40077ac:	00001e06 	br	4007828 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 40077b0:	e0bffe17 	ldw	r2,-8(fp)
 40077b4:	00c10074 	movhi	r3,1025
 40077b8:	18e1fe04 	addi	r3,r3,-30728
 40077bc:	10800324 	muli	r2,r2,12
 40077c0:	10c5883a 	add	r2,r2,r3
 40077c4:	10800017 	ldw	r2,0(r2)
 40077c8:	1004c03a 	cmpne	r2,r2,zero
 40077cc:	1000131e 	bne	r2,zero,400781c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 40077d0:	e0bffe17 	ldw	r2,-8(fp)
 40077d4:	00c10074 	movhi	r3,1025
 40077d8:	18e1fe04 	addi	r3,r3,-30728
 40077dc:	10800324 	muli	r2,r2,12
 40077e0:	10c7883a 	add	r3,r2,r3
 40077e4:	e0bfff17 	ldw	r2,-4(fp)
 40077e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 40077ec:	00810074 	movhi	r2,1025
 40077f0:	10a6f704 	addi	r2,r2,-25636
 40077f4:	10c00017 	ldw	r3,0(r2)
 40077f8:	e0bffe17 	ldw	r2,-8(fp)
 40077fc:	1880040e 	bge	r3,r2,4007810 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 4007800:	00c10074 	movhi	r3,1025
 4007804:	18e6f704 	addi	r3,r3,-25636
 4007808:	e0bffe17 	ldw	r2,-8(fp)
 400780c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4007810:	e0bffe17 	ldw	r2,-8(fp)
 4007814:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4007818:	00000606 	br	4007834 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400781c:	e0bffe17 	ldw	r2,-8(fp)
 4007820:	10800044 	addi	r2,r2,1
 4007824:	e0bffe15 	stw	r2,-8(fp)
 4007828:	e0bffe17 	ldw	r2,-8(fp)
 400782c:	10800810 	cmplti	r2,r2,32
 4007830:	103fdf1e 	bne	r2,zero,40077b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4007834:	e0bffd17 	ldw	r2,-12(fp)
}
 4007838:	e037883a 	mov	sp,fp
 400783c:	df000017 	ldw	fp,0(sp)
 4007840:	dec00104 	addi	sp,sp,4
 4007844:	f800283a 	ret

04007848 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4007848:	defffb04 	addi	sp,sp,-20
 400784c:	df000415 	stw	fp,16(sp)
 4007850:	df000404 	addi	fp,sp,16
 4007854:	e13ffe15 	stw	r4,-8(fp)
 4007858:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400785c:	e0bfff17 	ldw	r2,-4(fp)
 4007860:	10840070 	cmpltui	r2,r2,4097
 4007864:	1000021e 	bne	r2,zero,4007870 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4007868:	00840004 	movi	r2,4096
 400786c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4007870:	e0fffe17 	ldw	r3,-8(fp)
 4007874:	e0bfff17 	ldw	r2,-4(fp)
 4007878:	1885883a 	add	r2,r3,r2
 400787c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4007880:	e0bffe17 	ldw	r2,-8(fp)
 4007884:	e0bffd15 	stw	r2,-12(fp)
 4007888:	00000506 	br	40078a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400788c:	e0bffd17 	ldw	r2,-12(fp)
 4007890:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4007894:	e0bffd17 	ldw	r2,-12(fp)
 4007898:	10800804 	addi	r2,r2,32
 400789c:	e0bffd15 	stw	r2,-12(fp)
 40078a0:	e0fffd17 	ldw	r3,-12(fp)
 40078a4:	e0bffc17 	ldw	r2,-16(fp)
 40078a8:	18bff836 	bltu	r3,r2,400788c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40078ac:	e0bffe17 	ldw	r2,-8(fp)
 40078b0:	108007cc 	andi	r2,r2,31
 40078b4:	1005003a 	cmpeq	r2,r2,zero
 40078b8:	1000021e 	bne	r2,zero,40078c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40078bc:	e0bffd17 	ldw	r2,-12(fp)
 40078c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40078c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40078c8:	e037883a 	mov	sp,fp
 40078cc:	df000017 	ldw	fp,0(sp)
 40078d0:	dec00104 	addi	sp,sp,4
 40078d4:	f800283a 	ret

040078d8 <atexit>:
 40078d8:	200b883a 	mov	r5,r4
 40078dc:	000d883a 	mov	r6,zero
 40078e0:	0009883a 	mov	r4,zero
 40078e4:	000f883a 	mov	r7,zero
 40078e8:	40079981 	jmpi	4007998 <__register_exitproc>

040078ec <exit>:
 40078ec:	defffe04 	addi	sp,sp,-8
 40078f0:	000b883a 	mov	r5,zero
 40078f4:	dc000015 	stw	r16,0(sp)
 40078f8:	dfc00115 	stw	ra,4(sp)
 40078fc:	2021883a 	mov	r16,r4
 4007900:	4007ad00 	call	4007ad0 <__call_exitprocs>
 4007904:	00810074 	movhi	r2,1025
 4007908:	10a6f004 	addi	r2,r2,-25664
 400790c:	11000017 	ldw	r4,0(r2)
 4007910:	20800f17 	ldw	r2,60(r4)
 4007914:	10000126 	beq	r2,zero,400791c <exit+0x30>
 4007918:	103ee83a 	callr	r2
 400791c:	8009883a 	mov	r4,r16
 4007920:	4007cc00 	call	4007cc0 <_exit>

04007924 <memcmp>:
 4007924:	00c000c4 	movi	r3,3
 4007928:	1980032e 	bgeu	r3,r6,4007938 <memcmp+0x14>
 400792c:	2144b03a 	or	r2,r4,r5
 4007930:	10c4703a 	and	r2,r2,r3
 4007934:	10000f26 	beq	r2,zero,4007974 <memcmp+0x50>
 4007938:	31ffffc4 	addi	r7,r6,-1
 400793c:	3000061e 	bne	r6,zero,4007958 <memcmp+0x34>
 4007940:	00000a06 	br	400796c <memcmp+0x48>
 4007944:	39ffffc4 	addi	r7,r7,-1
 4007948:	00bfffc4 	movi	r2,-1
 400794c:	21000044 	addi	r4,r4,1
 4007950:	29400044 	addi	r5,r5,1
 4007954:	38800526 	beq	r7,r2,400796c <memcmp+0x48>
 4007958:	20c00003 	ldbu	r3,0(r4)
 400795c:	28800003 	ldbu	r2,0(r5)
 4007960:	18bff826 	beq	r3,r2,4007944 <memcmp+0x20>
 4007964:	1885c83a 	sub	r2,r3,r2
 4007968:	f800283a 	ret
 400796c:	0005883a 	mov	r2,zero
 4007970:	f800283a 	ret
 4007974:	180f883a 	mov	r7,r3
 4007978:	20c00017 	ldw	r3,0(r4)
 400797c:	28800017 	ldw	r2,0(r5)
 4007980:	18bfed1e 	bne	r3,r2,4007938 <memcmp+0x14>
 4007984:	31bfff04 	addi	r6,r6,-4
 4007988:	21000104 	addi	r4,r4,4
 400798c:	29400104 	addi	r5,r5,4
 4007990:	39bff936 	bltu	r7,r6,4007978 <memcmp+0x54>
 4007994:	003fe806 	br	4007938 <memcmp+0x14>

04007998 <__register_exitproc>:
 4007998:	defffa04 	addi	sp,sp,-24
 400799c:	00810074 	movhi	r2,1025
 40079a0:	10a6f004 	addi	r2,r2,-25664
 40079a4:	dc000015 	stw	r16,0(sp)
 40079a8:	14000017 	ldw	r16,0(r2)
 40079ac:	dd000415 	stw	r20,16(sp)
 40079b0:	2829883a 	mov	r20,r5
 40079b4:	81405217 	ldw	r5,328(r16)
 40079b8:	dcc00315 	stw	r19,12(sp)
 40079bc:	dc800215 	stw	r18,8(sp)
 40079c0:	dc400115 	stw	r17,4(sp)
 40079c4:	dfc00515 	stw	ra,20(sp)
 40079c8:	2023883a 	mov	r17,r4
 40079cc:	3027883a 	mov	r19,r6
 40079d0:	3825883a 	mov	r18,r7
 40079d4:	28002526 	beq	r5,zero,4007a6c <__register_exitproc+0xd4>
 40079d8:	29000117 	ldw	r4,4(r5)
 40079dc:	008007c4 	movi	r2,31
 40079e0:	11002716 	blt	r2,r4,4007a80 <__register_exitproc+0xe8>
 40079e4:	8800101e 	bne	r17,zero,4007a28 <__register_exitproc+0x90>
 40079e8:	2105883a 	add	r2,r4,r4
 40079ec:	1085883a 	add	r2,r2,r2
 40079f0:	20c00044 	addi	r3,r4,1
 40079f4:	1145883a 	add	r2,r2,r5
 40079f8:	0009883a 	mov	r4,zero
 40079fc:	15000215 	stw	r20,8(r2)
 4007a00:	28c00115 	stw	r3,4(r5)
 4007a04:	2005883a 	mov	r2,r4
 4007a08:	dfc00517 	ldw	ra,20(sp)
 4007a0c:	dd000417 	ldw	r20,16(sp)
 4007a10:	dcc00317 	ldw	r19,12(sp)
 4007a14:	dc800217 	ldw	r18,8(sp)
 4007a18:	dc400117 	ldw	r17,4(sp)
 4007a1c:	dc000017 	ldw	r16,0(sp)
 4007a20:	dec00604 	addi	sp,sp,24
 4007a24:	f800283a 	ret
 4007a28:	29802204 	addi	r6,r5,136
 4007a2c:	00800044 	movi	r2,1
 4007a30:	110e983a 	sll	r7,r2,r4
 4007a34:	30c04017 	ldw	r3,256(r6)
 4007a38:	2105883a 	add	r2,r4,r4
 4007a3c:	1085883a 	add	r2,r2,r2
 4007a40:	1185883a 	add	r2,r2,r6
 4007a44:	19c6b03a 	or	r3,r3,r7
 4007a48:	14802015 	stw	r18,128(r2)
 4007a4c:	14c00015 	stw	r19,0(r2)
 4007a50:	00800084 	movi	r2,2
 4007a54:	30c04015 	stw	r3,256(r6)
 4007a58:	88bfe31e 	bne	r17,r2,40079e8 <__register_exitproc+0x50>
 4007a5c:	30804117 	ldw	r2,260(r6)
 4007a60:	11c4b03a 	or	r2,r2,r7
 4007a64:	30804115 	stw	r2,260(r6)
 4007a68:	003fdf06 	br	40079e8 <__register_exitproc+0x50>
 4007a6c:	00810074 	movhi	r2,1025
 4007a70:	10b06204 	addi	r2,r2,-15992
 4007a74:	100b883a 	mov	r5,r2
 4007a78:	80805215 	stw	r2,328(r16)
 4007a7c:	003fd606 	br	40079d8 <__register_exitproc+0x40>
 4007a80:	00800034 	movhi	r2,0
 4007a84:	10800004 	addi	r2,r2,0
 4007a88:	1000021e 	bne	r2,zero,4007a94 <__register_exitproc+0xfc>
 4007a8c:	013fffc4 	movi	r4,-1
 4007a90:	003fdc06 	br	4007a04 <__register_exitproc+0x6c>
 4007a94:	01006404 	movi	r4,400
 4007a98:	103ee83a 	callr	r2
 4007a9c:	1007883a 	mov	r3,r2
 4007aa0:	103ffa26 	beq	r2,zero,4007a8c <__register_exitproc+0xf4>
 4007aa4:	80805217 	ldw	r2,328(r16)
 4007aa8:	180b883a 	mov	r5,r3
 4007aac:	18000115 	stw	zero,4(r3)
 4007ab0:	18800015 	stw	r2,0(r3)
 4007ab4:	80c05215 	stw	r3,328(r16)
 4007ab8:	18006215 	stw	zero,392(r3)
 4007abc:	18006315 	stw	zero,396(r3)
 4007ac0:	0009883a 	mov	r4,zero
 4007ac4:	883fc826 	beq	r17,zero,40079e8 <__register_exitproc+0x50>
 4007ac8:	003fd706 	br	4007a28 <__register_exitproc+0x90>

04007acc <register_fini>:
 4007acc:	f800283a 	ret

04007ad0 <__call_exitprocs>:
 4007ad0:	00810074 	movhi	r2,1025
 4007ad4:	10a6f004 	addi	r2,r2,-25664
 4007ad8:	10800017 	ldw	r2,0(r2)
 4007adc:	defff304 	addi	sp,sp,-52
 4007ae0:	df000b15 	stw	fp,44(sp)
 4007ae4:	d8800115 	stw	r2,4(sp)
 4007ae8:	00800034 	movhi	r2,0
 4007aec:	10800004 	addi	r2,r2,0
 4007af0:	1005003a 	cmpeq	r2,r2,zero
 4007af4:	d8800215 	stw	r2,8(sp)
 4007af8:	d8800117 	ldw	r2,4(sp)
 4007afc:	dd400815 	stw	r21,32(sp)
 4007b00:	dd000715 	stw	r20,28(sp)
 4007b04:	10805204 	addi	r2,r2,328
 4007b08:	dfc00c15 	stw	ra,48(sp)
 4007b0c:	ddc00a15 	stw	r23,40(sp)
 4007b10:	dd800915 	stw	r22,36(sp)
 4007b14:	dcc00615 	stw	r19,24(sp)
 4007b18:	dc800515 	stw	r18,20(sp)
 4007b1c:	dc400415 	stw	r17,16(sp)
 4007b20:	dc000315 	stw	r16,12(sp)
 4007b24:	282b883a 	mov	r21,r5
 4007b28:	2039883a 	mov	fp,r4
 4007b2c:	d8800015 	stw	r2,0(sp)
 4007b30:	2829003a 	cmpeq	r20,r5,zero
 4007b34:	d8800117 	ldw	r2,4(sp)
 4007b38:	14405217 	ldw	r17,328(r2)
 4007b3c:	88001026 	beq	r17,zero,4007b80 <__call_exitprocs+0xb0>
 4007b40:	ddc00017 	ldw	r23,0(sp)
 4007b44:	88800117 	ldw	r2,4(r17)
 4007b48:	8c802204 	addi	r18,r17,136
 4007b4c:	143fffc4 	addi	r16,r2,-1
 4007b50:	80000916 	blt	r16,zero,4007b78 <__call_exitprocs+0xa8>
 4007b54:	05bfffc4 	movi	r22,-1
 4007b58:	a000151e 	bne	r20,zero,4007bb0 <__call_exitprocs+0xe0>
 4007b5c:	8409883a 	add	r4,r16,r16
 4007b60:	2105883a 	add	r2,r4,r4
 4007b64:	1485883a 	add	r2,r2,r18
 4007b68:	10c02017 	ldw	r3,128(r2)
 4007b6c:	a8c01126 	beq	r21,r3,4007bb4 <__call_exitprocs+0xe4>
 4007b70:	843fffc4 	addi	r16,r16,-1
 4007b74:	85bff81e 	bne	r16,r22,4007b58 <__call_exitprocs+0x88>
 4007b78:	d8800217 	ldw	r2,8(sp)
 4007b7c:	10003126 	beq	r2,zero,4007c44 <__call_exitprocs+0x174>
 4007b80:	dfc00c17 	ldw	ra,48(sp)
 4007b84:	df000b17 	ldw	fp,44(sp)
 4007b88:	ddc00a17 	ldw	r23,40(sp)
 4007b8c:	dd800917 	ldw	r22,36(sp)
 4007b90:	dd400817 	ldw	r21,32(sp)
 4007b94:	dd000717 	ldw	r20,28(sp)
 4007b98:	dcc00617 	ldw	r19,24(sp)
 4007b9c:	dc800517 	ldw	r18,20(sp)
 4007ba0:	dc400417 	ldw	r17,16(sp)
 4007ba4:	dc000317 	ldw	r16,12(sp)
 4007ba8:	dec00d04 	addi	sp,sp,52
 4007bac:	f800283a 	ret
 4007bb0:	8409883a 	add	r4,r16,r16
 4007bb4:	88c00117 	ldw	r3,4(r17)
 4007bb8:	2105883a 	add	r2,r4,r4
 4007bbc:	1445883a 	add	r2,r2,r17
 4007bc0:	18ffffc4 	addi	r3,r3,-1
 4007bc4:	11800217 	ldw	r6,8(r2)
 4007bc8:	1c001526 	beq	r3,r16,4007c20 <__call_exitprocs+0x150>
 4007bcc:	10000215 	stw	zero,8(r2)
 4007bd0:	303fe726 	beq	r6,zero,4007b70 <__call_exitprocs+0xa0>
 4007bd4:	00c00044 	movi	r3,1
 4007bd8:	1c06983a 	sll	r3,r3,r16
 4007bdc:	90804017 	ldw	r2,256(r18)
 4007be0:	8cc00117 	ldw	r19,4(r17)
 4007be4:	1884703a 	and	r2,r3,r2
 4007be8:	10001426 	beq	r2,zero,4007c3c <__call_exitprocs+0x16c>
 4007bec:	90804117 	ldw	r2,260(r18)
 4007bf0:	1884703a 	and	r2,r3,r2
 4007bf4:	10000c1e 	bne	r2,zero,4007c28 <__call_exitprocs+0x158>
 4007bf8:	2105883a 	add	r2,r4,r4
 4007bfc:	1485883a 	add	r2,r2,r18
 4007c00:	11400017 	ldw	r5,0(r2)
 4007c04:	e009883a 	mov	r4,fp
 4007c08:	303ee83a 	callr	r6
 4007c0c:	88800117 	ldw	r2,4(r17)
 4007c10:	98bfc81e 	bne	r19,r2,4007b34 <__call_exitprocs+0x64>
 4007c14:	b8800017 	ldw	r2,0(r23)
 4007c18:	147fd526 	beq	r2,r17,4007b70 <__call_exitprocs+0xa0>
 4007c1c:	003fc506 	br	4007b34 <__call_exitprocs+0x64>
 4007c20:	8c000115 	stw	r16,4(r17)
 4007c24:	003fea06 	br	4007bd0 <__call_exitprocs+0x100>
 4007c28:	2105883a 	add	r2,r4,r4
 4007c2c:	1485883a 	add	r2,r2,r18
 4007c30:	11000017 	ldw	r4,0(r2)
 4007c34:	303ee83a 	callr	r6
 4007c38:	003ff406 	br	4007c0c <__call_exitprocs+0x13c>
 4007c3c:	303ee83a 	callr	r6
 4007c40:	003ff206 	br	4007c0c <__call_exitprocs+0x13c>
 4007c44:	88800117 	ldw	r2,4(r17)
 4007c48:	1000081e 	bne	r2,zero,4007c6c <__call_exitprocs+0x19c>
 4007c4c:	89000017 	ldw	r4,0(r17)
 4007c50:	20000726 	beq	r4,zero,4007c70 <__call_exitprocs+0x1a0>
 4007c54:	b9000015 	stw	r4,0(r23)
 4007c58:	8809883a 	mov	r4,r17
 4007c5c:	00000000 	call	0 <__reset-0x4000000>
 4007c60:	bc400017 	ldw	r17,0(r23)
 4007c64:	883fb71e 	bne	r17,zero,4007b44 <__call_exitprocs+0x74>
 4007c68:	003fc506 	br	4007b80 <__call_exitprocs+0xb0>
 4007c6c:	89000017 	ldw	r4,0(r17)
 4007c70:	882f883a 	mov	r23,r17
 4007c74:	2023883a 	mov	r17,r4
 4007c78:	883fb21e 	bne	r17,zero,4007b44 <__call_exitprocs+0x74>
 4007c7c:	003fc006 	br	4007b80 <__call_exitprocs+0xb0>

04007c80 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4007c80:	defffd04 	addi	sp,sp,-12
 4007c84:	df000215 	stw	fp,8(sp)
 4007c88:	df000204 	addi	fp,sp,8
 4007c8c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4007c90:	e0bfff17 	ldw	r2,-4(fp)
 4007c94:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4007c98:	e0bffe17 	ldw	r2,-8(fp)
 4007c9c:	1005003a 	cmpeq	r2,r2,zero
 4007ca0:	1000021e 	bne	r2,zero,4007cac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4007ca4:	002af070 	cmpltui	zero,zero,43969
 4007ca8:	00000106 	br	4007cb0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4007cac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4007cb0:	e037883a 	mov	sp,fp
 4007cb4:	df000017 	ldw	fp,0(sp)
 4007cb8:	dec00104 	addi	sp,sp,4
 4007cbc:	f800283a 	ret

04007cc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4007cc0:	defffd04 	addi	sp,sp,-12
 4007cc4:	dfc00215 	stw	ra,8(sp)
 4007cc8:	df000115 	stw	fp,4(sp)
 4007ccc:	df000104 	addi	fp,sp,4
 4007cd0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4007cd4:	e13fff17 	ldw	r4,-4(fp)
 4007cd8:	4007c800 	call	4007c80 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4007cdc:	003fff06 	br	4007cdc <_exit+0x1c>
 4007ce0:	04007acc 	andi	r16,zero,491
